	Hello Wolrd!

**1 ;
Function delete userS always return 500

**2 ;
Error on /genericquerys/databases
	return 0 instead of 1

**3 ;
Shit happen when trying all database name with /genericquerys/{database}/schema
	template0 return error 500 + JSON with a space that put postman in the grave
		Add error 500 safety (if json == null then check status == 1 ; code == 200 and return null)

**4 ;
Error on /genericquerys/{table_name}
	Work fine from websie but not in postman
		Do not use "order_by" if variable is unset

**5 ;
Error while running delete user request with basic user accout. returned JSOn is empty and postman can't handle it (test stop).
	Add error 500 safety (if json == null then check status == 1 ; code == 200 and return null)

**6 ;
There's "Unchanged yet" at Get Domain request 1st test line. Why ?

**7 ;
Error while running Update properties.
	Admin account is kick out of vitis_admin privilege
		Add "postData" parameter fill with a "get properties" returned json properties file
		!!! WARNING !!! Be careful if "postData" is left blank, "properties.inc" will be DELETE !

**8 ;
Error on all Get AD request.
	1-6 return ERROR_CONTACT_ACTIVE_DIRECTORY_USERS_USER with code 200
	7 return error 500 Internal Serve Error





			With admin account first then Basic_user1 :


Get private token of admin account.
	Next request set to Get token.
	Init :
		time, i_user(not yet) and i_group variables to 0
	Set :
		user = admin ; password = admin ; bool = admin

Get token verify if token received equal saved one.

Add a "Basic_user" account and store it's user_id.
	Set :
		login, name, password, password_confirm = Basic_user
		privileges = vitis_user
	Clear :
		email, company, departement, groups
	Should I add 3 users like for the "group" ? Do same tests with one and a delete userS with the two left ?
		Only if delete userS is repair

Add 3 group named "Test_Group" + number(N, from 0 to 2) and store their name and id ("group_name" + (N) and "group_id" + (N)).
	Last group_id (group_id2) is store in environment group_id.

Update name from "Test_Group2" to "Test_Group_2" at group_id2

Get group and check if last update had been made

Delete group named "Test_Group_2"

Get groups and check if "Test_Group_2" had been delete.
	Group list should not be empty

Delete groupS remove "Test_Group0" and "Test_Group1"

Update user with new variables
	set :
		email = Basic_user@corp.com ; company = corp ; departement = 11223 ; privileges = vitis_user|vitis_admin

Get user check if update had been done on each updated field

Delete user from it's id

Get privilege info from vitis_admin

Update privilege. Should obviously do something, but well... life is life

Get privileges. Check what happen with update

Post domains. Add 3 domain named "Domain_+(N)" from 0 to 2
	Save last domain_id, domain, alias, server and port
	Should had a variable i_domain preset to 0
	set :
		domain, alias, server = "Domain_(N)"
		port = i_domain + 100


//Active directory tests //**8 ;

Update domain. add some info and change "Domain_2" to "Domain2"
	set :
		dn_search_user = Some_user ; filter_user = A_user ; dn_search_group = Some_group ; filter_group = A_group ; login = root ; password = toor


Get domain. Confirm/Check modifications on "Domain2" and unset of password

Delete domain = "Domain2"

Get domainS. Check if delete function had been correctly done.

Delete domainS remove "Domain_0" and "Domain_1"

Get querys // /genericquerys/databases //**2 ;
	store all database name and count (i_query++) them
		Nop, bad idea... + split doesn't work and if table empty, postman will stop running test
		Anyway it's possible to chain all query test by getting a data from previous request

		Get database name

Get querys // /genericquerys/{database}/schemas //**3 ;
	Get schema_name

Get querys // /genericquerys
	Store first table_name

Get querys // /genericquerys/{table_name}/columns

Get querys // /genericquerys/{table_name} //**4 ;

// Get modes
	Store "mode_id_0 && mode_id_1" from returned request where modes[0|1].modes_id != null;
	try to sort then from 0|1 to 1|0
	Get modeS

Get phpinfo.

Get TabS. Store first tab_id if != null

Get Tab from last save tab_id;

Get versions.

Get WebserviceS and store first web_service name

Get Webservice ; ressources list ; ressources infos

Get VitisSectionS and store section_id if != null

Get VitisSection


Add user //loop with basic user ; save it's user id and set next request to "Get private token" if execute with admin else skip
	set :
		login, name, user, password, password_confirm = Basic_user1
		company = corp ; email = Basic_user1@corp.com ; departement = 22334 ; group = 1 // 1 = demo ; privileges = vitis_user

// Cleaning

	Get Admin token and delete Basic_user1;

{
	"info": {
		"name": "Vitis Project",
		"_postman_id": "3c3cd92a-7f75-0500-1363-5fb5f40ed8a1",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "TRY",
			"item": [
				{
					"name": "Do NOT change folders order",
					"description": "",
					"item": [
						{
							"name": "Admin Start",
							"description": "",
							"item": [
								{
									"name": "Get private token (Admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d1c5b3c-0adc-4670-8e3a-18898c41ffae",
												"type": "text/javascript",
												"exec": [
													"var t = parseInt(pm.environment.get(\"time\"));",
													"console.log(t);",
													"t += parseInt(pm.response.responseTime);",
													"console.log(t);",
													"pm.environment.set(\"time\",t);",
													"",
													"if(pm.response.responseSize === 0){",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"",
													"if(jsonData.status === 0){",
													"    if (jsonData.errorMessage !== null){",
													"        var ErrorMess = jsonData.errorMessage;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"    else{",
													"        var ErrorMess = jsonData.error;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"}",
													"else{",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    ",
													"    //Do stuff here",
													"    pm.environment.set(\"user\", \"\");",
													"    pm.environment.set(\"password\", \"\");",
													"    ",
													"    pm.environment.set(\"token\", jsonData.token);",
													"    pm.environment.set(\"admin_id\",jsonData.user_id);",
													"    ",
													"    postman.setNextRequest(\"Get token\");",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "f18bd064-d083-45c1-a3f3-a2df8e531289",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"user\", \"admin\");",
													"pm.environment.set(\"password\", \"admin\");",
													"",
													"",
													"pm.environment.set(\"time\",0);",
													"pm.environment.set(\"bool\", \"admin\");",
													"pm.environment.set(\"i_domain\",0);",
													"pm.environment.set(\"i_group\", 0);",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "user",
													"type": "text",
													"value": "{{user}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "duration",
													"type": "text",
													"value": "60"
												}
											]
										},
										"url": {
											"raw": "https://medoc/rest/vitis/privatetoken",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"privatetoken"
											]
										},
										"description": "Request to get a token"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"id": "34681e5a-c7db-4ab3-99b9-ac86748c85cd",
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"id": "e4eb9985-0c52-4ca9-9989-026ea67c5cd4",
										"type": "text/javascript"
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "User Start",
							"description": "",
							"item": [
								{
									"name": "Get private token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "801e7d05-f77a-49fe-aeab-5194a82a495d",
												"type": "text/javascript",
												"exec": [
													"var t = parseInt(pm.environment.get(\"time\"));",
													"console.log(t);",
													"t += parseInt(pm.response.responseTime);",
													"console.log(t);",
													"pm.environment.set(\"time\",t);",
													"",
													"if(pm.response.responseSize === 0){",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"",
													"if(jsonData.status === 0){",
													"    if (jsonData.errorMessage !== null){",
													"        var ErrorMess = jsonData.errorMessage;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"    else{",
													"        var ErrorMess = jsonData.error;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"}",
													"else{",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    ",
													"    //Do stuff here",
													"    console.log(\"Token = \" + jsonData.token);",
													"    pm.environment.set(\"token\", jsonData.token);",
													"}",
													"",
													"",
													"",
													"",
													"",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1399e644-271b-422d-9cc9-05e2c20a52fc",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"bool\", \"user\");",
													"pm.environment.set(\"i_domain\",0);",
													"pm.environment.set(\"i_group\", 0);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "user",
													"type": "text",
													"value": "{{user}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "duration",
													"type": "text",
													"value": "60"
												}
											]
										},
										"url": {
											"raw": "https://medoc/rest/vitis/privatetoken",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"privatetoken"
											]
										},
										"description": "Request to get a token"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"id": "a26d5104-9265-4758-973e-d03c7bc878cd",
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"id": "4979f18b-6990-40e6-be0a-43e4dace8015",
										"type": "text/javascript"
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Token (private and public)",
							"description": "",
							"item": [
								{
									"name": "Get token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b91898bb-317c-48ca-a36f-9d57c6ae0e4a",
												"type": "text/javascript",
												"exec": [
													"var t = parseInt(pm.environment.get(\"time\"));",
													"console.log(t);",
													"t += parseInt(pm.response.responseTime);",
													"console.log(t);",
													"pm.environment.set(\"time\",t);",
													"",
													"if(pm.response.responseSize === 0){",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"",
													"if(jsonData.status === 0){",
													"    if (jsonData.errorMessage !== null){",
													"        var ErrorMess = jsonData.errorMessage;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"    else{",
													"        var ErrorMess = jsonData.error;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"}",
													"else{",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    ",
													"    //Do stuff here",
													"   ",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {},
										"url": {
											"raw": "https://medoc/rest/vitis/privatetoken?token={{token}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"privatetoken"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}",
													"equals": true
												}
											]
										},
										"description": "Request to get a token"
									},
									"response": []
								},
								{
									"name": "Get public token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a30c226-646f-46dc-afbc-270a4ef374f1",
												"type": "text/javascript",
												"exec": [
													"var t = parseInt(pm.environment.get(\"time\"));",
													"console.log(t);",
													"t += parseInt(pm.response.responseTime);",
													"console.log(t);",
													"pm.environment.set(\"time\",t);",
													"",
													"if(pm.response.responseSize === 0){",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"",
													"if(jsonData.status === 0){",
													"    if (jsonData.errorMessage !== null){",
													"        var ErrorMess = jsonData.errorMessage;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"    else{",
													"        var ErrorMess = jsonData.error;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"}",
													"else{",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    ",
													"    //Do stuff here",
													"   ",
													"}",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/publictoken",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"publictoken"
											]
										},
										"description": "Request to get a token"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Add 1 User and 3 Group",
							"description": "",
							"item": [
								{
									"name": "Add User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "625234ab-f848-4464-91aa-0f7cc9ddfa26",
												"type": "text/javascript",
												"exec": [
													"var t = parseInt(pm.environment.get(\"time\"));",
													"console.log(t);",
													"t += parseInt(pm.response.responseTime);",
													"console.log(t);",
													"pm.environment.set(\"time\",t);",
													"",
													"if(pm.response.responseSize === 0){",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"",
													"if(jsonData.status === 0){",
													"    if (jsonData.errorMessage !== null){",
													"        var ErrorMess = jsonData.errorMessage;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"    else{",
													"        var ErrorMess = jsonData.error;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"}",
													"else{",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    ",
													"    //Do stuff here",
													"    var b = pm.environment.get(\"bool\");",
													"    ",
													"    console.log(b);",
													"    if(b == \"admin\"){",
													"        pm.environment.set(\"user_id\",jsonData.user_id);",
													"        console.log(\"user_id = \" + jsonData.user_id);",
													"    }",
													"}",
													"",
													"",
													""
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "eafbf8d5-6dc0-4d50-90f7-70e95f121afe",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"login\", \"Basic_user\");",
													"pm.environment.set(\"name\", \"Basic_user\");",
													"pm.environment.set(\"password\", \"Basic_user\");",
													"pm.environment.set(\"password_confirm\", \"Basic_user\");",
													"",
													"pm.environment.set(\"email\",\"\");",
													"pm.environment.set(\"company\",\"\");",
													"pm.environment.set(\"department\",\"\");",
													"pm.environment.set(\"groups\", \"\"); //18 = Cadastre",
													"pm.environment.set(\"privileges\",\"vitis_user\");"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "token",
													"type": "text",
													"value": "{{token}}"
												},
												{
													"key": "login",
													"type": "text",
													"value": "{{login}}"
												},
												{
													"key": "action",
													"type": "text",
													"value": "{{action}}"
												},
												{
													"key": "name",
													"type": "text",
													"value": "{{name}}"
												},
												{
													"key": "email",
													"type": "text",
													"value": "{{email}}"
												},
												{
													"key": "company",
													"type": "text",
													"value": "{{company}}"
												},
												{
													"key": "department",
													"type": "text",
													"value": "{{department}}"
												},
												{
													"key": "groups",
													"type": "text",
													"value": "{{groups}}"
												},
												{
													"key": "privileges",
													"type": "text",
													"value": "{{privileges}}"
												},
												{
													"key": "ip_constraint",
													"type": "text",
													"value": "{{ip_constraint}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "password_confirm",
													"type": "text",
													"value": "{{password_confirm}}"
												},
												{
													"key": "restriction",
													"type": "text",
													"value": "{{restriction}}"
												}
											]
										},
										"url": {
											"raw": "https://medoc/rest/vitis/users",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"users"
											]
										},
										"description": "Request to add user"
									},
									"response": []
								},
								{
									"name": "Add Group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "fa6f5a7f-7693-4256-8630-7394b401401c",
												"type": "text/javascript",
												"exec": [
													"var i_g = pm.environment.get(\"i_group\");",
													"var g_name = \"Test_Group\".concat(i_g);",
													"var env_g_name = \"group_name\".concat(i_g);",
													"console.log(g_name);",
													"",
													"pm.environment.set(env_g_name,g_name);",
													"pm.environment.set(\"group_name\",g_name);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "22f19b0f-ce93-4494-b875-2ed8d2ff9afa",
												"type": "text/javascript",
												"exec": [
													"var t = parseInt(pm.environment.get(\"time\"));",
													"console.log(t);",
													"t += parseInt(pm.response.responseTime);",
													"console.log(t);",
													"pm.environment.set(\"time\",t);",
													"",
													"if(pm.response.responseSize === 0){",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"var i_g = pm.environment.get(\"i_group\");",
													"",
													"if(jsonData.status === 0){",
													"    if (jsonData.errorMessage !== null){",
													"        var ErrorMess = jsonData.errorMessage;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"    else{",
													"        var ErrorMess = jsonData.error;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"}",
													"else{",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    ",
													"    //Do stuff here",
													"    ",
													"    var g_id = \"group_id\".concat(i_g);",
													"    console.log(\"group_id = \" + jsonData.group_id);",
													"    pm.environment.set(g_id, jsonData.group_id);",
													"    pm.environment.set(\"group_id\", jsonData.group_id);",
													"",
													"    ",
													"}",
													"",
													"if(i_g < 2){",
													"        i_g++;",
													"        pm.environment.set(\"i_group\", i_g);",
													"        postman.setNextRequest(\"Add Group\");",
													"}",
													"",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "token",
													"type": "text",
													"value": "{{token}}"
												},
												{
													"key": "name",
													"type": "text",
													"value": "{{group_name}}"
												},
												{
													"key": "users",
													"type": "text",
													"value": "{{user_id}}"
												}
											]
										},
										"url": {
											"raw": "https://medoc/rest/vitis/groups",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"groups"
											]
										},
										"description": "Request to add group"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"id": "ab92f8a4-d98c-416a-948b-639163f10b53",
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"id": "44603ee0-59dd-41fe-a78f-c328b8a9013b",
										"type": "text/javascript"
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update Group and Get confirm",
							"description": "",
							"item": [
								{
									"name": "Update Group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ead88754-aea1-4098-97b7-2806019a2872",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"idList\", pm.environment.get(\"user_id\")+'|'+pm.environment.get(\"admin_id\"));",
													"pm.environment.set(\"name\", \"Test_Group_2\");",
													"pm.environment.set(\"group_name\",pm.environment.get(\"name\"));",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b279c42b-d544-42cf-872d-a7c20a6931e7",
												"type": "text/javascript",
												"exec": [
													"var t = parseInt(pm.environment.get(\"time\"));",
													"console.log(t);",
													"t += parseInt(pm.response.responseTime);",
													"console.log(t);",
													"pm.environment.set(\"time\",t);",
													"",
													"if(pm.response.responseSize === 0){",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"",
													"if(jsonData.status === 0){",
													"    if (jsonData.errorMessage !== null){",
													"        var ErrorMess = jsonData.errorMessage;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"    else{",
													"        var ErrorMess = jsonData.error;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"}",
													"else{",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    ",
													"    //Do stuff here",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {},
										"url": {
											"raw": "https://medoc/rest/vitis/groups/:group_id?token={{token}}&name={{name}}&users={{idList}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"groups",
												":group_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}",
													"equals": true
												},
												{
													"key": "name",
													"value": "{{name}}",
													"equals": true
												},
												{
													"key": "users",
													"value": "{{idList}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "group_id",
													"value": "{{group_id}}"
												}
											]
										},
										"description": "Request to update Group"
									},
									"response": []
								},
								{
									"name": "Get Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c1b8118-5d20-46c0-a3d5-2a2c523aaba3",
												"type": "text/javascript",
												"exec": [
													"var t = parseInt(pm.environment.get(\"time\"));",
													"console.log(t);",
													"t += parseInt(pm.response.responseTime);",
													"console.log(t);",
													"pm.environment.set(\"time\",t);",
													"",
													"if(pm.response.responseSize === 0){",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"",
													"if(jsonData.status === 0){",
													"    if (jsonData.errorMessage !== null){",
													"        var ErrorMess = jsonData.errorMessage;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"    else{",
													"        var ErrorMess = jsonData.error;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"}",
													"else{",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    ",
													"    //Do stuff here",
													"    pm.test(\"Update confirm\", function () {",
													"        var jsonData = pm.response.json();",
													"        console.log(jsonData.groups[0].name);",
													"        pm.expect(jsonData.groups[0].name).to.eql(pm.environment.get(\"group_name\"));",
													"    });",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {},
										"url": {
											"raw": "https://medoc/rest/vitis/groups/:group_id?token={{token}}&attributs={{attributs}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"groups",
												":group_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}",
													"equals": true
												},
												{
													"key": "attributs",
													"value": "{{attributs}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "group_id",
													"value": "{{group_id}}"
												}
											]
										},
										"description": "Request to get Group by id"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete Group and Get confirm",
							"description": "",
							"item": [
								{
									"name": "delete Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e5cea44-d9fe-408c-8c43-c39117dcf031",
												"type": "text/javascript",
												"exec": [
													"var t = parseInt(pm.environment.get(\"time\"));",
													"console.log(t);",
													"t += parseInt(pm.response.responseTime);",
													"console.log(t);",
													"pm.environment.set(\"time\",t);",
													"",
													"if(pm.response.responseSize === 0){",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"",
													"if(jsonData.status === 0){",
													"    if (jsonData.errorMessage !== null){",
													"        var ErrorMess = jsonData.errorMessage;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"    else{",
													"        var ErrorMess = jsonData.error;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"}",
													"else{",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    ",
													"    //Do stuff here",
													"   ",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {},
										"url": {
											"raw": "https://medoc/rest/vitis/groups/:group_id?token={{token}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"groups",
												":group_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "group_id",
													"value": "{{group_id}}"
												}
											]
										},
										"description": "Request to delete Group"
									},
									"response": []
								},
								{
									"name": "Get Groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3285d02-eebd-44ec-839d-5e4695dce563",
												"type": "text/javascript",
												"exec": [
													"var t = parseInt(pm.environment.get(\"time\"));",
													"console.log(t);",
													"t += parseInt(pm.response.responseTime);",
													"console.log(t);",
													"pm.environment.set(\"time\",t);",
													"",
													"if(pm.response.responseSize === 0){",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"",
													"if(jsonData.status === 0){",
													"    if (jsonData.errorMessage !== null){",
													"        var ErrorMess = jsonData.errorMessage;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"    else{",
													"        var ErrorMess = jsonData.error;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"}",
													"else{",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    ",
													"    //Do stuff here",
													"    for(var i in jsonData.groups){",
													"            if(jsonData.groups[i].name == \"Cadastre\"){",
													"                console.log(\"Cadastre found\");",
													"                pm.environment.set(\"groups\",jsonData.groups[i].group_id);",
													"            }",
													"        }",
													"    pm.test(\"Delete confirm\", function () { ",
													"        var res = null;",
													"        for(var i in jsonData.groups){",
													"            if(jsonData.groups[i].name == \"Test_Group_2\"){",
													"                console.log(\"Good\");",
													"                res = pm.environment.get(\"group_id\");",
													"                pm.expect(\"Group id : \" + res).not.to.eql(\"Group id : \" + parseInt(pm.environment.get(\"group_id\")));",
													"            }",
													"        }",
													"        console.log(\"Group id : \" + res);",
													"        console.log(\"Group id : \" + parseInt(pm.environment.get(\"group_id\")));",
													"    });",
													"",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/groups?token={{token}}&order_by={{order_by}}&sort_order={{sort_order}}&limit={{limit}}&offset={{offset}}&attributs={{attributs}}&filter={{filter}}&distinct={{distinct}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"groups"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}",
													"equals": true
												},
												{
													"key": "order_by",
													"value": "{{order_by}}",
													"equals": true
												},
												{
													"key": "sort_order",
													"value": "{{sort_order}}",
													"equals": true
												},
												{
													"key": "limit",
													"value": "{{limit}}",
													"equals": true
												},
												{
													"key": "offset",
													"value": "{{offset}}",
													"equals": true
												},
												{
													"key": "attributs",
													"value": "{{attributs}}",
													"equals": true
												},
												{
													"key": "filter",
													"value": "{{filter}}",
													"equals": true
												},
												{
													"key": "distinct",
													"value": "{{distinct}}",
													"equals": true
												}
											]
										},
										"description": "Request to get Groups"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete Groups",
							"description": "",
							"item": [
								{
									"name": "delete Groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "344058ea-e9ad-490a-9643-dd05b9bfab0a",
												"type": "text/javascript",
												"exec": [
													"var t = parseInt(pm.environment.get(\"time\"));",
													"console.log(t);",
													"t += parseInt(pm.response.responseTime);",
													"console.log(t);",
													"pm.environment.set(\"time\",t);",
													"",
													"if(pm.response.responseSize === 0){",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"",
													"if(jsonData.status === 0){",
													"    if (jsonData.errorMessage !== null){",
													"        var ErrorMess = jsonData.errorMessage;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"    else{",
													"        var ErrorMess = jsonData.error;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"}",
													"else{",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    ",
													"    //Do stuff here",
													"   ",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "33a038c6-c33e-4d20-a081-c414375fefd2",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"idList\", pm.environment.get(\"group_id0\")+'|'+pm.environment.get(\"group_id1\"));"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {},
										"url": {
											"raw": "https://medoc/rest/vitis/groups/?token={{token}}&idList={{idList}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"groups",
												""
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}",
													"equals": true
												},
												{
													"key": "idList",
													"value": "{{idList}}",
													"equals": true
												}
											]
										},
										"description": "Request to delete Group"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Update User and Get confirm",
							"description": "",
							"item": [
								{
									"name": "Update User",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "32c0951c-3369-46df-9f23-8aaefaeda043",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"email\",\"Basic_user@corp.com\");",
													"pm.environment.set(\"company\",\"corp\");",
													"pm.environment.set(\"department\",\"11223\");",
													"pm.environment.set(\"privileges\",\"vitis_user|vitis_admin\");",
													"",
													"",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d705923c-f5cd-490a-8cee-80783dc99fc3",
												"type": "text/javascript",
												"exec": [
													"var t = parseInt(pm.environment.get(\"time\"));",
													"console.log(t);",
													"t += parseInt(pm.response.responseTime);",
													"console.log(t);",
													"pm.environment.set(\"time\",t);",
													"",
													"if(pm.response.responseSize === 0){",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"",
													"if(jsonData.status === 0){",
													"    if (jsonData.errorMessage !== null){",
													"        var ErrorMess = jsonData.errorMessage;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"    else{",
													"        var ErrorMess = jsonData.error;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"}",
													"else{",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    ",
													"    //Do stuff here",
													"   ",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {},
										"url": {
											"raw": "https://medoc/rest/vitis/users/:user_id?token={{token}}&login={{login}}&name={{name}}&email={{email}}&company={{company}}&department={{department}}&groups={{groups}}&privileges={{privileges}}&ip_constraint={{ip_constraint}}&password={{password}}&password_confirm={{password_confirm}}&restriction={{restriction}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"users",
												":user_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}",
													"equals": true
												},
												{
													"key": "login",
													"value": "{{login}}",
													"equals": true
												},
												{
													"key": "name",
													"value": "{{name}}",
													"equals": true
												},
												{
													"key": "email",
													"value": "{{email}}",
													"equals": true
												},
												{
													"key": "company",
													"value": "{{company}}",
													"equals": true
												},
												{
													"key": "department",
													"value": "{{department}}",
													"equals": true
												},
												{
													"key": "groups",
													"value": "{{groups}}",
													"equals": true
												},
												{
													"key": "privileges",
													"value": "{{privileges}}",
													"equals": true
												},
												{
													"key": "ip_constraint",
													"value": "{{ip_constraint}}",
													"equals": true
												},
												{
													"key": "password",
													"value": "{{password}}",
													"equals": true
												},
												{
													"key": "password_confirm",
													"value": "{{password_confirm}}",
													"equals": true
												},
												{
													"key": "restriction",
													"value": "{{restriction}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{user_id}}"
												}
											]
										},
										"description": "Request to update User"
									},
									"response": []
								},
								{
									"name": "Get User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f24d0c41-4133-4cf3-bdc4-2e4ad41645e4",
												"type": "text/javascript",
												"exec": [
													"var t = parseInt(pm.environment.get(\"time\"));",
													"console.log(t);",
													"t+= parseInt(pm.response.responseTime);",
													"console.log(t);",
													"pm.environment.set(\"time\",t);",
													"",
													"if(pm.response.responseSize === 0){",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"",
													"if(jsonData.status === 0){",
													"    if (jsonData.errorMessage !== null){",
													"        var ErrorMess = jsonData.errorMessage;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"    else{",
													"        var ErrorMess = jsonData.error;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"}",
													"else{",
													"    pm.test(\"Status equal 1\", function () {",
													"        pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"        pm.response.to.have.status(200);",
													"    });",
													"    ",
													"    //Do stuff here",
													"    pm.test(\"Update confirm\", function () {",
													"        var jsonData = pm.response.json();",
													"        //console.log(jsonData.groups[0].name);",
													"        pm.expect(jsonData.users[0].email).to.eql(pm.environment.get(\"email\"));",
													"        pm.expect(jsonData.users[0].company).to.eql(pm.environment.get(\"company\"));",
													"        pm.expect(jsonData.users[0].department).to.eql(pm.environment.get(\"department\"));",
													"        pm.expect(jsonData.users[0].groups).to.eql(parseInt(pm.environment.get(\"groups\")));",
													"        pm.expect(jsonData.users[0].privileges).to.eql(pm.environment.get(\"privileges\"));",
													"    });",
													"",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {},
										"url": {
											"raw": "https://medoc/rest/vitis/users/:user_id?token={{token}}&attributs={{attributs}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"users",
												":user_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}",
													"equals": true
												},
												{
													"key": "attributs",
													"value": "{{attributs}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{user_id}}"
												}
											]
										},
										"description": "Request to get User by id"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete User",
							"description": "",
							"item": [
								{
									"name": "delete User",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00769fae-2853-4b0f-b371-b5dad65560c4",
												"type": "text/javascript",
												"exec": [
													"var t = parseInt(pm.environment.get(\"time\"));",
													"console.log(t);",
													"t += parseInt(pm.response.responseTime);",
													"console.log(t);",
													"pm.environment.set(\"time\",t);",
													"",
													"if(pm.response.responseSize === 0){",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"",
													"if(jsonData.status === 0){",
													"    if (jsonData.errorMessage !== null){",
													"        var ErrorMess = jsonData.errorMessage;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"    else{",
													"        var ErrorMess = jsonData.error;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"}",
													"else{",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    ",
													"    //Do stuff here",
													"   ",
													"}"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1c074021-9c7c-41ca-a211-77cd2bf105d8",
												"type": "text/javascript",
												"exec": [
													"console.log(pm.environment.get(\"user_id\"));",
													"var b = pm.environment.get(\"bool\");",
													"if(b == \"user\"){",
													"    pm.environment.set(\"tmpo_uID\",pm.environment.get(\"user_id\"));",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {},
										"url": {
											"raw": "https://medoc/rest/vitis/users/:user_id?token={{token}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"users",
												":user_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{user_id}}"
												}
											]
										},
										"description": "Request to delete User"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "privileges",
							"description": "",
							"item": [
								{
									"name": "Get Privilege",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4f773a5-c31b-426a-a55a-08168d5a6c3a",
												"type": "text/javascript",
												"exec": [
													"var t = parseInt(pm.environment.get(\"time\"));",
													"console.log(t);",
													"t += parseInt(pm.response.responseTime);",
													"console.log(t);",
													"pm.environment.set(\"time\",t);",
													"",
													"if(pm.response.responseSize === 0){",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"",
													"if(jsonData.status === 0){",
													"    if (jsonData.errorMessage !== null){",
													"        var ErrorMess = jsonData.errorMessage;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"    else{",
													"        var ErrorMess = jsonData.error;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"}",
													"else{",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    ",
													"    //Do stuff here",
													"   ",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/privileges/:rolname?token={{token}}&description={{description}}&users={{users}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"privileges",
												":rolname"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}",
													"equals": true
												},
												{
													"key": "description",
													"value": "{{description}}",
													"equals": true
												},
												{
													"key": "users",
													"value": "{{users}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "rolname",
													"value": "vitis_admin"
												}
											]
										},
										"description": "Request to get Privilege by rolname"
									},
									"response": []
								},
								{
									"name": "Update Privilege",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6179676b-2245-43dd-9c6b-4803e789cdfb",
												"type": "text/javascript",
												"exec": [
													"var t = parseInt(pm.environment.get(\"time\"));",
													"console.log(t);",
													"t += parseInt(pm.response.responseTime);",
													"console.log(t);",
													"pm.environment.set(\"time\",t);",
													"",
													"if(pm.response.responseSize === 0){",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"",
													"if(jsonData.status === 0){",
													"    if (jsonData.errorMessage !== null){",
													"        var ErrorMess = jsonData.errorMessage;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"    else{",
													"        var ErrorMess = jsonData.error;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"}",
													"else{",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    ",
													"    //Do stuff here",
													"   ",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/privileges/:rolname?token={{token}}&description={{description}}&users={{users}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"privileges",
												":rolname"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}",
													"equals": true
												},
												{
													"key": "description",
													"value": "{{description}}",
													"equals": true
												},
												{
													"key": "users",
													"value": "{{users}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "rolname",
													"value": "{{rolname}}"
												}
											]
										},
										"description": "Request to update Privilege"
									},
									"response": []
								},
								{
									"name": "Get Privileges",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1cafa59-d601-4755-b448-7bb039729b86",
												"type": "text/javascript",
												"exec": [
													"var t = parseInt(pm.environment.get(\"time\"));",
													"console.log(t);",
													"t += parseInt(pm.response.responseTime);",
													"console.log(t);",
													"pm.environment.set(\"time\",t);",
													"",
													"if(pm.response.responseSize === 0){",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"",
													"if(jsonData.status === 0){",
													"    if (jsonData.errorMessage !== null){",
													"        var ErrorMess = jsonData.errorMessage;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"    else{",
													"        var ErrorMess = jsonData.error;",
													"        console.log(ErrorMess);",
													"        pm.test(ErrorMess, function () {});",
													"    }",
													"}",
													"else{",
													"    pm.test(\"Status equal 1\", function () {",
													"    pm.expect(jsonData.status).to.eql(1);",
													"    });",
													"    pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);});",
													"    ",
													"    //Do stuff here",
													"   ",
													"}"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/privileges?token={{token}}&order_by={{order_by}}&sort_order={{sort_order}}&limit={{limit}}&offset={{offset}}&attributs={{attributs}}&filter={{filter}}&distinct={{distinct}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"privileges"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}",
													"equals": true
												},
												{
													"key": "order_by",
													"value": "{{order_by}}",
													"equals": true
												},
												{
													"key": "sort_order",
													"value": "{{sort_order}}",
													"equals": true
												},
												{
													"key": "limit",
													"value": "{{limit}}",
													"equals": true
												},
												{
													"key": "offset",
													"value": "{{offset}}",
													"equals": true
												},
												{
													"key": "attributs",
													"value": "{{attributs}}",
													"equals": true
												},
												{
													"key": "filter",
													"value": "{{filter}}",
													"equals": true
												},
												{
													"key": "distinct",
													"value": "{{distinct}}",
													"equals": true
												}
											]
										},
										"description": "Request to get Privileges"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Domain and AD tests",
							"description": "",
							"item": [
								{
									"name": "Add 3 domain",
									"description": "",
									"item": [
										{
											"name": "Add Domain",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "59af134f-0718-4f0d-b8d8-dd03f923895c",
														"type": "text/javascript",
														"exec": [
															"var t = parseInt(pm.environment.get(\"time\"));",
															"console.log(t);",
															"t+= parseInt(pm.response.responseTime);",
															"console.log(t);",
															"pm.environment.set(\"time\",t);",
															"",
															"if(pm.response.responseSize === 0){",
															"    pm.test(\"Status equal 1\", function () {",
															"    pm.expect(jsonData.status).to.eql(1);",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);});",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"var i_d = pm.environment.get(\"i_domain\");",
															"",
															"if(jsonData.status === 0){",
															"    if (jsonData.errorMessage !== null){",
															"        var ErrorMess = jsonData.errorMessage;",
															"        console.log(ErrorMess);",
															"        pm.test(ErrorMess, function () {});",
															"    }",
															"    else{",
															"        var ErrorMess = jsonData.error;",
															"        console.log(ErrorMess);",
															"        pm.test(ErrorMess, function () {});",
															"    }",
															"}",
															"else{",
															"    pm.test(\"Status equal 1\", function () {",
															"    pm.expect(jsonData.status).to.eql(1);",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);});",
															"    ",
															"    //Do stuff here",
															"    ",
															"    var d_id = \"domain_id\".concat(i_d);",
															"    console.log(\"domain_id = \" + jsonData.domain_id);",
															"    pm.environment.set(d_id, jsonData.domain_id);",
															"    pm.environment.set(\"domain_id\", jsonData.domain_id);",
															"",
															"    ",
															"}",
															"",
															"if(i_d < 2){",
															"        i_d++;",
															"        pm.environment.set(\"i_domain\", i_d);",
															"        postman.setNextRequest(\"Add Domain\");",
															"}",
															"",
															""
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "326fb3c7-feef-4e25-9150-43e9ae7a0ed0",
														"type": "text/javascript",
														"exec": [
															"var i_d = pm.environment.get(\"i_domain\");",
															"var d_name = \"Domain_\".concat(i_d);",
															"var env_d_name = \"domain\".concat(i_d);",
															"console.log(d_name);",
															"",
															"pm.environment.set(env_d_name,d_name);",
															"pm.environment.set(\"domain\",d_name);",
															"pm.environment.set(\"alias\",d_name);",
															"pm.environment.set(\"server\",d_name);",
															"pm.environment.set(\"port\",parseInt(i_d) + 100);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "token",
															"type": "text",
															"value": "{{token}}"
														},
														{
															"key": "domain",
															"type": "text",
															"value": "{{domain}}"
														},
														{
															"key": "alias",
															"type": "text",
															"value": "{{alias}}"
														},
														{
															"key": "server",
															"type": "text",
															"value": "{{server}}"
														},
														{
															"key": "port",
															"type": "text",
															"value": "{{port}}"
														},
														{
															"key": "dn_search_user",
															"type": "text",
															"value": "{{dn_search_user}}"
														},
														{
															"key": "filter_user",
															"type": "text",
															"value": "{{filter_user}}"
														},
														{
															"key": "dn_search_group",
															"type": "text",
															"value": "{{dn_search_group}}"
														},
														{
															"key": "filter_group",
															"type": "text",
															"value": "{{filter_group}}"
														},
														{
															"key": "login",
															"type": "text",
															"value": "{{login}}"
														},
														{
															"key": "password",
															"type": "text",
															"value": "01234"
														},
														{
															"key": "type",
															"type": "text",
															"value": "AD"
														},
														{
															"key": "verify_rights",
															"type": "text",
															"value": "{{verify_rights}}"
														}
													]
												},
												"url": {
													"raw": "https://medoc/rest/vitis/domains",
													"protocol": "https",
													"host": [
														"medoc"
													],
													"path": [
														"rest",
														"vitis",
														"domains"
													]
												},
												"description": "Request to add domain"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"id": "0a4a7de9-7497-4c79-a18f-047fd63db943",
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"id": "32c25a71-898b-4b97-96b6-54dcab654c58",
												"type": "text/javascript"
											}
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "ActiveDirectory",
									"description": "Folder for ActiveDirectory",
									"item": [
										{
											"name": "Test connection to active directory",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "f24f833c-0e86-4260-99cc-813547d5a54f",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "a2a29605-19ae-4c07-8bd2-48a6e431f569",
														"type": "text/javascript",
														"exec": [
															"var t = parseInt(pm.environment.get(\"time\"));",
															"console.log(t);",
															"t += parseInt(pm.response.responseTime);",
															"console.log(t);",
															"pm.environment.set(\"time\",t);",
															"",
															"if(pm.response.responseSize === 0){",
															"    pm.test(\"Status equal 1\", function () {",
															"    pm.expect(jsonData.status).to.eql(1);",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);});",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"",
															"if(jsonData.status === 0){",
															"    if (jsonData.errorMessage !== null){",
															"        var ErrorMess = jsonData.errorMessage;",
															"        console.log(ErrorMess);",
															"        pm.test(ErrorMess, function () {});",
															"    }",
															"    else{",
															"        var ErrorMess = jsonData.error;",
															"        console.log(ErrorMess);",
															"        pm.test(ErrorMess, function () {});",
															"    }",
															"}",
															"else{",
															"    pm.test(\"Status equal 1\", function () {",
															"    pm.expect(jsonData.status).to.eql(1);",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);});",
															"    ",
															"    //Do stuff here",
															"   ",
															"}",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://medoc/rest/vitis/ActiveDirectory/Test?token={{token}}&domain_id={{domain_id}}&login={{login}}&password={{password}}&object=person",
													"protocol": "https",
													"host": [
														"medoc"
													],
													"path": [
														"rest",
														"vitis",
														"ActiveDirectory",
														"Test"
													],
													"query": [
														{
															"key": "token",
															"value": "{{token}}",
															"equals": true
														},
														{
															"key": "domain_id",
															"value": "{{domain_id}}",
															"equals": true
														},
														{
															"key": "login",
															"value": "{{login}}",
															"equals": true
														},
														{
															"key": "password",
															"value": "{{password}}",
															"equals": true
														},
														{
															"key": "object",
															"value": "person",
															"equals": true
														}
													]
												},
												"description": "Request to test connection to active directory"
											},
											"response": []
										},
										{
											"name": "Get Active Directory tree of domain",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "6d9d1bd2-bc31-4d22-b2a9-31a9b839e66c",
														"type": "text/javascript",
														"exec": [
															"var t = parseInt(pm.environment.get(\"time\"));",
															"console.log(t);",
															"t += parseInt(pm.response.responseTime);",
															"console.log(t);",
															"pm.environment.set(\"time\",t);",
															"",
															"if(pm.response.responseSize === 0){",
															"    pm.test(\"Status equal 1\", function () {",
															"    pm.expect(jsonData.status).to.eql(1);",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);});",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"",
															"if(jsonData.status === 0){",
															"    if (jsonData.errorMessage !== null){",
															"        var ErrorMess = jsonData.errorMessage;",
															"        console.log(ErrorMess);",
															"        pm.test(ErrorMess, function () {});",
															"    }",
															"    else{",
															"        var ErrorMess = jsonData.error;",
															"        console.log(ErrorMess);",
															"        pm.test(ErrorMess, function () {});",
															"    }",
															"}",
															"else{",
															"    pm.test(\"Status equal 1\", function () {",
															"    pm.expect(jsonData.status).to.eql(1);",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);});",
															"    ",
															"    //Do stuff here",
															"   ",
															"}",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://medoc/rest/vitis/ActiveDirectory/Tree?token={{token}}&domain_id={{domain_id}}&login={{login}}&password={{password}}&object=person",
													"protocol": "https",
													"host": [
														"medoc"
													],
													"path": [
														"rest",
														"vitis",
														"ActiveDirectory",
														"Tree"
													],
													"query": [
														{
															"key": "token",
															"value": "{{token}}",
															"equals": true
														},
														{
															"key": "domain_id",
															"value": "{{domain_id}}",
															"equals": true
														},
														{
															"key": "login",
															"value": "{{login}}",
															"equals": true
														},
														{
															"key": "password",
															"value": "{{password}}",
															"equals": true
														},
														{
															"key": "object",
															"value": "person",
															"equals": true
														}
													]
												},
												"description": "Request to get active Directory tree of domain by id"
											},
											"response": []
										},
										{
											"name": "Search Active Directory users",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "11340656-e5c4-421c-ad27-cfbcde1be78c",
														"type": "text/javascript",
														"exec": [
															"var t = parseInt(pm.environment.get(\"time\"));",
															"console.log(t);",
															"t += parseInt(pm.response.responseTime);",
															"console.log(t);",
															"pm.environment.set(\"time\",t);",
															"",
															"if(pm.response.responseSize === 0){",
															"    pm.test(\"Status equal 1\", function () {",
															"    pm.expect(jsonData.status).to.eql(1);",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);});",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"",
															"if(jsonData.status === 0){",
															"    if (jsonData.errorMessage !== null){",
															"        var ErrorMess = jsonData.errorMessage;",
															"        console.log(ErrorMess);",
															"        pm.test(ErrorMess, function () {});",
															"    }",
															"    else{",
															"        var ErrorMess = jsonData.error;",
															"        console.log(ErrorMess);",
															"        pm.test(ErrorMess, function () {});",
															"    }",
															"}",
															"else{",
															"    pm.test(\"Status equal 1\", function () {",
															"    pm.expect(jsonData.status).to.eql(1);",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);});",
															"    ",
															"    //Do stuff here",
															"   ",
															"}",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://medoc/rest/vitis/ActiveDirectory/Users?token={{token}}&domain_id={{domain_id}}&login={{login}}&password={{password}}&search_account={{search_account}}&search_groups={{search_groups}}&search_department={{search_department}}",
													"protocol": "https",
													"host": [
														"medoc"
													],
													"path": [
														"rest",
														"vitis",
														"ActiveDirectory",
														"Users"
													],
													"query": [
														{
															"key": "token",
															"value": "{{token}}",
															"equals": true
														},
														{
															"key": "domain_id",
															"value": "{{domain_id}}",
															"equals": true
														},
														{
															"key": "login",
															"value": "{{login}}",
															"equals": true
														},
														{
															"key": "password",
															"value": "{{password}}",
															"equals": true
														},
														{
															"key": "search_account",
															"value": "{{search_account}}",
															"equals": true
														},
														{
															"key": "search_groups",
															"value": "{{search_groups}}",
															"equals": true
														},
														{
															"key": "search_department",
															"value": "{{search_department}}",
															"equals": true
														}
													]
												},
												"description": "Request to search active Directory users"
											},
											"response": []
										},
										{
											"name": "Get Active Directory users of branch",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d79bcf58-263c-4b9a-8640-ae99a4abb885",
														"type": "text/javascript",
														"exec": [
															"var t = parseInt(pm.environment.get(\"time\"));",
															"console.log(t);",
															"t += parseInt(pm.response.responseTime);",
															"console.log(t);",
															"pm.environment.set(\"time\",t);",
															"",
															"if(pm.response.responseSize === 0){",
															"    pm.test(\"Status equal 1\", function () {",
															"    pm.expect(jsonData.status).to.eql(1);",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);});",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"",
															"if(jsonData.status === 0){",
															"    if (jsonData.errorMessage !== null){",
															"        var ErrorMess = jsonData.errorMessage;",
															"        console.log(ErrorMess);",
															"        pm.test(ErrorMess, function () {});",
															"    }",
															"    else{",
															"        var ErrorMess = jsonData.error;",
															"        console.log(ErrorMess);",
															"        pm.test(ErrorMess, function () {});",
															"    }",
															"}",
															"else{",
															"    pm.test(\"Status equal 1\", function () {",
															"    pm.expect(jsonData.status).to.eql(1);",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);});",
															"    ",
															"    //Do stuff here",
															"   ",
															"}",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://medoc/rest/vitis/ActiveDirectory/Users/:branch?token={{token}}&domain_id={{domain_id}}&login={{login}}&password={{password}}",
													"protocol": "https",
													"host": [
														"medoc"
													],
													"path": [
														"rest",
														"vitis",
														"ActiveDirectory",
														"Users",
														":branch"
													],
													"query": [
														{
															"key": "token",
															"value": "{{token}}",
															"equals": true
														},
														{
															"key": "domain_id",
															"value": "{{domain_id}}",
															"equals": true
														},
														{
															"key": "login",
															"value": "{{login}}",
															"equals": true
														},
														{
															"key": "password",
															"value": "{{password}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "branch",
															"value": "{{branch}}"
														}
													]
												},
												"description": "Request to get active Directory users of branch by id"
											},
											"response": []
										},
										{
											"name": "Search Active Directory groups",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c3d73d08-bba3-4eef-8d4c-7dcfd2c81c5f",
														"type": "text/javascript",
														"exec": [
															"var t = parseInt(pm.environment.get(\"time\"));",
															"console.log(t);",
															"t += parseInt(pm.response.responseTime);",
															"console.log(t);",
															"pm.environment.set(\"time\",t);",
															"",
															"if(pm.response.responseSize === 0){",
															"    pm.test(\"Status equal 1\", function () {",
															"    pm.expect(jsonData.status).to.eql(1);",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);});",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"",
															"if(jsonData.status === 0){",
															"    if (jsonData.errorMessage !== null){",
															"        var ErrorMess = jsonData.errorMessage;",
															"        console.log(ErrorMess);",
															"        pm.test(ErrorMess, function () {});",
															"    }",
															"    else{",
															"        var ErrorMess = jsonData.error;",
															"        console.log(ErrorMess);",
															"        pm.test(ErrorMess, function () {});",
															"    }",
															"}",
															"else{",
															"    pm.test(\"Status equal 1\", function () {",
															"    pm.expect(jsonData.status).to.eql(1);",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);});",
															"    ",
															"    //Do stuff here",
															"   ",
															"}",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://medoc/rest/vitis/ActiveDirectory/Groups?token={{token}}&domain_id={{domain_id}}&login={{login}}&password={{password}}&search_group={{search_group}}",
													"protocol": "https",
													"host": [
														"medoc"
													],
													"path": [
														"rest",
														"vitis",
														"ActiveDirectory",
														"Groups"
													],
													"query": [
														{
															"key": "token",
															"value": "{{token}}",
															"equals": true
														},
														{
															"key": "domain_id",
															"value": "{{domain_id}}",
															"equals": true
														},
														{
															"key": "login",
															"value": "{{login}}",
															"equals": true
														},
														{
															"key": "password",
															"value": "{{password}}",
															"equals": true
														},
														{
															"key": "search_group",
															"value": "{{search_group}}",
															"equals": true
														}
													]
												},
												"description": "Request to search active Directory groups"
											},
											"response": []
										},
										{
											"name": "Get Active Directory groups of branch",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c688b1ab-f2d3-490a-8424-e7e369d7ecfc",
														"type": "text/javascript",
														"exec": [
															"var t = parseInt(pm.environment.get(\"time\"));",
															"console.log(t);",
															"t += parseInt(pm.response.responseTime);",
															"console.log(t);",
															"pm.environment.set(\"time\",t);",
															"",
															"if(pm.response.responseSize === 0){",
															"    pm.test(\"Status equal 1\", function () {",
															"    pm.expect(jsonData.status).to.eql(1);",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);});",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"",
															"if(jsonData.status === 0){",
															"    if (jsonData.errorMessage !== null){",
															"        var ErrorMess = jsonData.errorMessage;",
															"        console.log(ErrorMess);",
															"        pm.test(ErrorMess, function () {});",
															"    }",
															"    else{",
															"        var ErrorMess = jsonData.error;",
															"        console.log(ErrorMess);",
															"        pm.test(ErrorMess, function () {});",
															"    }",
															"}",
															"else{",
															"    pm.test(\"Status equal 1\", function () {",
															"    pm.expect(jsonData.status).to.eql(1);",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);});",
															"    ",
															"    //Do stuff here",
															"   ",
															"}",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://medoc/rest/vitis/ActiveDirectory/Groups/:branch?token={{token}}&domain_id={{domain_id}}&login={{login}}&password={{password}}",
													"protocol": "https",
													"host": [
														"medoc"
													],
													"path": [
														"rest",
														"vitis",
														"ActiveDirectory",
														"Groups",
														":branch"
													],
													"query": [
														{
															"key": "token",
															"value": "{{token}}",
															"equals": true
														},
														{
															"key": "domain_id",
															"value": "{{domain_id}}",
															"equals": true
														},
														{
															"key": "login",
															"value": "{{login}}",
															"equals": true
														},
														{
															"key": "password",
															"value": "{{password}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "branch",
															"value": "{{branch}}"
														}
													]
												},
												"description": "Request to get active Directory groups of branch by id"
											},
											"response": []
										},
										{
											"name": "Get groups of Active Directory user",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0c400e4d-c70c-4106-9168-fddf66ba1825",
														"type": "text/javascript",
														"exec": [
															"var t = parseInt(pm.environment.get(\"time\"));",
															"console.log(t);",
															"t += parseInt(pm.response.responseTime);",
															"console.log(t);",
															"pm.environment.set(\"time\",t);",
															"",
															"if(pm.response.responseSize === 0){",
															"    pm.test(\"Status equal 1\", function () {",
															"    pm.expect(jsonData.status).to.eql(1);",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);});",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"",
															"if(jsonData.status === 0){",
															"    if (jsonData.errorMessage !== null){",
															"        var ErrorMess = jsonData.errorMessage;",
															"        console.log(ErrorMess);",
															"        pm.test(ErrorMess, function () {});",
															"    }",
															"    else{",
															"        var ErrorMess = jsonData.error;",
															"        console.log(ErrorMess);",
															"        pm.test(ErrorMess, function () {});",
															"    }",
															"}",
															"else{",
															"    pm.test(\"Status equal 1\", function () {",
															"    pm.expect(jsonData.status).to.eql(1);",
															"    });",
															"    pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);});",
															"    ",
															"    //Do stuff here",
															"   ",
															"}",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://medoc/rest/vitis/ActiveDirectory/UserGroups/:user_id?token={{token}}&mixed_rights_management={{mixed_rights_management}}",
													"protocol": "https",
													"host": [
														"medoc"
													],
													"path": [
														"rest",
														"vitis",
														"ActiveDirectory",
														"UserGroups",
														":user_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{token}}",
															"equals": true
														},
														{
															"key": "mixed_rights_management",
															"value": "{{mixed_rights_management}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "{{user_id}}"
														}
													]
												},
												"description": "Request to get the groupd of an active Directory user"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Domain",
									"description": "",
									"item": [
										{
											"name": "Update domain and Get confirm",
											"description": "",
											"item": [
												{
													"name": "Update Domain",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "68c7401f-826c-44d8-b8ac-3c5f247355df",
																"type": "text/javascript",
																"exec": [
																	"var t = parseInt(pm.environment.get(\"time\"));",
																	"console.log(t);",
																	"t += parseInt(pm.response.responseTime);",
																	"console.log(t);",
																	"pm.environment.set(\"time\",t);",
																	"",
																	"if(pm.response.responseSize === 0){",
																	"    pm.test(\"Status equal 1\", function () {",
																	"    pm.expect(jsonData.status).to.eql(1);",
																	"    });",
																	"    pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);});",
																	"    return null;",
																	"}",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"if(jsonData.status === 0){",
																	"    if (jsonData.errorMessage !== null){",
																	"        var ErrorMess = jsonData.errorMessage;",
																	"        console.log(ErrorMess);",
																	"        pm.test(ErrorMess, function () {});",
																	"    }",
																	"    else{",
																	"        var ErrorMess = jsonData.error;",
																	"        console.log(ErrorMess);",
																	"        pm.test(ErrorMess, function () {});",
																	"    }",
																	"}",
																	"else{",
																	"    pm.test(\"Status equal 1\", function () {",
																	"        pm.expect(jsonData.status).to.eql(1);",
																	"    });",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"    //Do stuff here",
																	"}"
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "13bd46eb-3308-40c4-ba98-ce8d32ca1c89",
																"type": "text/javascript",
																"exec": [
																	"pm.environment.set(\"domain\",\"Domain2\");",
																	"pm.environment.set(\"dn_search_user\",\"Some_user\");",
																	"pm.environment.set(\"filter_user\",\"A_user\");",
																	"pm.environment.set(\"dn_search_group\",\"Some_group\");",
																	"pm.environment.set(\"filter_group\",\"A_group\");",
																	"pm.environment.set(\"login\",\"root\");",
																	"pm.environment.set(\"password\",\"toor\");"
																]
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://medoc/rest/vitis/domains/:domain_id?token={{token}}&domain={{domain}}&alias={{alias}}&server={{server}}&port={{port}}&dn_search_user={{dn_search_user}}&filter_user={{filter_user}}&dn_search_group={{dn_search_group}}&filter_group={{filter_group}}&login={{login}}&password={{password}}&type=AD&verify_rights={{verify_rights}}",
															"protocol": "https",
															"host": [
																"medoc"
															],
															"path": [
																"rest",
																"vitis",
																"domains",
																":domain_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{token}}",
																	"equals": true
																},
																{
																	"key": "domain",
																	"value": "{{domain}}",
																	"equals": true
																},
																{
																	"key": "alias",
																	"value": "{{alias}}",
																	"equals": true
																},
																{
																	"key": "server",
																	"value": "{{server}}",
																	"equals": true
																},
																{
																	"key": "port",
																	"value": "{{port}}",
																	"equals": true
																},
																{
																	"key": "dn_search_user",
																	"value": "{{dn_search_user}}",
																	"equals": true
																},
																{
																	"key": "filter_user",
																	"value": "{{filter_user}}",
																	"equals": true
																},
																{
																	"key": "dn_search_group",
																	"value": "{{dn_search_group}}",
																	"equals": true
																},
																{
																	"key": "filter_group",
																	"value": "{{filter_group}}",
																	"equals": true
																},
																{
																	"key": "login",
																	"value": "{{login}}",
																	"equals": true
																},
																{
																	"key": "password",
																	"value": "{{password}}",
																	"equals": true
																},
																{
																	"key": "type",
																	"value": "AD",
																	"equals": true
																},
																{
																	"key": "verify_rights",
																	"value": "{{verify_rights}}",
																	"equals": true
																}
															],
															"variable": [
																{
																	"key": "domain_id",
																	"value": "{{domain_id}}"
																}
															]
														},
														"description": "Request to update domain"
													},
													"response": []
												},
												{
													"name": "Get Domain",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "6bc779c5-e73d-482a-beac-143316f1f37b",
																"type": "text/javascript",
																"exec": [
																	"// Unchanged yet",
																	"",
																	"var t = parseInt(pm.environment.get(\"time\"));",
																	"console.log(t);",
																	"t+= parseInt(pm.response.responseTime);",
																	"console.log(t);",
																	"pm.environment.set(\"time\",t);",
																	"",
																	"if(pm.response.responseSize === 0){",
																	"    pm.test(\"Status equal 1\", function () {",
																	"    pm.expect(jsonData.status).to.eql(1);",
																	"    });",
																	"    pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);});",
																	"    return null;",
																	"}",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"if(jsonData.status === 0){",
																	"    if (jsonData.errorMessage !== null){",
																	"        var ErrorMess = jsonData.errorMessage;",
																	"        console.log(ErrorMess);",
																	"        pm.test(ErrorMess, function () {});",
																	"    }",
																	"    else{",
																	"        var ErrorMess = jsonData.error;",
																	"        console.log(ErrorMess);",
																	"        pm.test(ErrorMess, function () {});",
																	"    }",
																	"}",
																	"else{",
																	"    pm.test(\"Status equal 1\", function () {",
																	"        pm.expect(jsonData.status).to.eql(1);",
																	"    });",
																	"    pm.test(\"Status code is 200\", function () {",
																	"        pm.response.to.have.status(200);",
																	"    });",
																	"    ",
																	"    //Do stuff here",
																	"    pm.test(\"Update confirm\", function () {",
																	"        var jsonData = pm.response.json();",
																	"        //console.log(jsonData.groups[0].name);",
																	"        pm.expect(jsonData.domains[0].dn_search_user).to.eql(pm.environment.get(\"dn_search_user\"));",
																	"        pm.expect(jsonData.domains[0].filter_user).to.eql(pm.environment.get(\"filter_user\"));",
																	"        pm.expect(jsonData.domains[0].dn_search_group).to.eql(pm.environment.get(\"dn_search_group\"));",
																	"        pm.expect(jsonData.domains[0].filter_group).to.eql(pm.environment.get(\"filter_group\"));",
																	"        pm.expect(jsonData.domains[0].login).to.eql(pm.environment.get(\"login\"));",
																	"        pm.expect(jsonData.domains[0].password).to.eql(pm.environment.get(\"password\"));",
																	"        ",
																	"    });",
																	"",
																	"}"
																]
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://medoc/rest/vitis/domains/:domain_id?token={{token}}&attributs={{attributs}}",
															"protocol": "https",
															"host": [
																"medoc"
															],
															"path": [
																"rest",
																"vitis",
																"domains",
																":domain_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{token}}",
																	"equals": true
																},
																{
																	"key": "attributs",
																	"value": "{{attributs}}",
																	"equals": true
																}
															],
															"variable": [
																{
																	"key": "domain_id",
																	"value": "{{domain_id}}"
																}
															]
														},
														"description": "Request to get Domain by id"
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "Delete domain and Get confirm",
											"description": "",
											"item": [
												{
													"name": "delete Domain",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "ad69187f-df19-487d-b3f3-c09b0464c4c8",
																"type": "text/javascript",
																"exec": [
																	"var t = parseInt(pm.environment.get(\"time\"));",
																	"console.log(t);",
																	"t += parseInt(pm.response.responseTime);",
																	"console.log(t);",
																	"pm.environment.set(\"time\",t);",
																	"",
																	"if(pm.response.responseSize === 0){",
																	"    pm.test(\"Status equal 1\", function () {",
																	"    pm.expect(jsonData.status).to.eql(1);",
																	"    });",
																	"    pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);});",
																	"    return null;",
																	"}",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"if(jsonData.status === 0){",
																	"    if (jsonData.errorMessage !== null){",
																	"        var ErrorMess = jsonData.errorMessage;",
																	"        console.log(ErrorMess);",
																	"        pm.test(ErrorMess, function () {});",
																	"    }",
																	"    else{",
																	"        var ErrorMess = jsonData.error;",
																	"        console.log(ErrorMess);",
																	"        pm.test(ErrorMess, function () {});",
																	"    }",
																	"}",
																	"else{",
																	"    pm.test(\"Status equal 1\", function () {",
																	"    pm.expect(jsonData.status).to.eql(1);",
																	"    });",
																	"    pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);});",
																	"    ",
																	"    //Do stuff here",
																	"   ",
																	"}"
																]
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://medoc/rest/vitis/domains/:domain_id?token={{token}}",
															"protocol": "https",
															"host": [
																"medoc"
															],
															"path": [
																"rest",
																"vitis",
																"domains",
																":domain_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{token}}",
																	"equals": true
																}
															],
															"variable": [
																{
																	"key": "domain_id",
																	"value": "{{domain_id}}"
																}
															]
														},
														"description": "Request to delete Domain"
													},
													"response": []
												},
												{
													"name": "Get Domains",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "0f27f069-dd23-48ca-ab94-16547b1bcdfd",
																"type": "text/javascript",
																"exec": [
																	"var t = parseInt(pm.environment.get(\"time\"));",
																	"console.log(t);",
																	"t += parseInt(pm.response.responseTime);",
																	"console.log(t);",
																	"pm.environment.set(\"time\",t);",
																	"",
																	"if(pm.response.responseSize === 0){",
																	"    pm.test(\"Status equal 1\", function () {",
																	"    pm.expect(jsonData.status).to.eql(1);",
																	"    });",
																	"    pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);});",
																	"    return null;",
																	"}",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"if(jsonData.status === 0){",
																	"    if (jsonData.errorMessage !== null){",
																	"        var ErrorMess = jsonData.errorMessage;",
																	"        console.log(ErrorMess);",
																	"        pm.test(ErrorMess, function () {});",
																	"    }",
																	"    else{",
																	"        var ErrorMess = jsonData.error;",
																	"        console.log(ErrorMess);",
																	"        pm.test(ErrorMess, function () {});",
																	"    }",
																	"}",
																	"else{",
																	"    pm.test(\"Status equal 1\", function () {",
																	"    pm.expect(jsonData.status).to.eql(1);",
																	"    });",
																	"    pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);});",
																	"    ",
																	"    //Do stuff here",
																	"    ",
																	"    pm.test(\"Delete confirm\", function () { ",
																	"        var res = null;",
																	"        for(var i in jsonData.domains){",
																	"            if(jsonData.domains[i].name == \"Domain2\"){",
																	"                console.log(\"Good\");",
																	"                res = pm.environment.get(\"domain_id\");",
																	"                pm.expect(\"Domain id : \" + res).not.to.eql(\"Domain id : \" + parseInt(pm.environment.get(\"domain_id\")));",
																	"            }",
																	"        }",
																	"        console.log(\"Group id : \" + res);",
																	"        console.log(\"Group id : \" + parseInt(pm.environment.get(\"domain_id\")));",
																	"    });",
																	"",
																	"",
																	"}",
																	""
																]
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json, application/x-vm-json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://medoc/rest/vitis/domains?token={{token}}&order_by={{order_by}}&sort_order={{sort_order}}&limit={{limit}}&offset={{offset}}&attributs={{attributs}}&filter={{filter}}&distinct={{distinct}}",
															"protocol": "https",
															"host": [
																"medoc"
															],
															"path": [
																"rest",
																"vitis",
																"domains"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{token}}",
																	"equals": true
																},
																{
																	"key": "order_by",
																	"value": "{{order_by}}",
																	"equals": true
																},
																{
																	"key": "sort_order",
																	"value": "{{sort_order}}",
																	"equals": true
																},
																{
																	"key": "limit",
																	"value": "{{limit}}",
																	"equals": true
																},
																{
																	"key": "offset",
																	"value": "{{offset}}",
																	"equals": true
																},
																{
																	"key": "attributs",
																	"value": "{{attributs}}",
																	"equals": true
																},
																{
																	"key": "filter",
																	"value": "{{filter}}",
																	"equals": true
																},
																{
																	"key": "distinct",
																	"value": "{{distinct}}",
																	"equals": true
																}
															]
														},
														"description": "Request to get Domains"
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "Delete domains",
											"description": "",
											"item": [
												{
													"name": "delete Domain",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "d8faf808-ff7d-4b31-ad8f-b29686ac0569",
																"type": "text/javascript",
																"exec": [
																	"var t = parseInt(pm.environment.get(\"time\"));",
																	"console.log(t);",
																	"t += parseInt(pm.response.responseTime);",
																	"console.log(t);",
																	"pm.environment.set(\"time\",t);",
																	"",
																	"if(pm.response.responseSize === 0){",
																	"    pm.test(\"Status equal 1\", function () {",
																	"    pm.expect(jsonData.status).to.eql(1);",
																	"    });",
																	"    pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);});",
																	"    return null;",
																	"}",
																	"",
																	"var jsonData = pm.response.json();",
																	"",
																	"if(jsonData.status === 0){",
																	"    if (jsonData.errorMessage !== null){",
																	"        var ErrorMess = jsonData.errorMessage;",
																	"        console.log(ErrorMess);",
																	"        pm.test(ErrorMess, function () {});",
																	"    }",
																	"    else{",
																	"        var ErrorMess = jsonData.error;",
																	"        console.log(ErrorMess);",
																	"        pm.test(ErrorMess, function () {});",
																	"    }",
																	"}",
																	"else{",
																	"    pm.test(\"Status equal 1\", function () {",
																	"    pm.expect(jsonData.status).to.eql(1);",
																	"    });",
																	"    pm.test(\"Status code is 200\", function () {",
																	"    pm.response.to.have.status(200);});",
																	"    ",
																	"    //Do stuff here",
																	"   ",
																	"}",
																	"",
																	"pm.environment.set(\"domain\",\"\");",
																	"pm.environment.set(\"alias\",\"\");",
																	"pm.environment.set(\"server\",\"\");",
																	"pm.environment.set(\"port\",\"\");",
																	"pm.environment.set(\"domain\",\"\");",
																	"pm.environment.set(\"dn_search_user\",\"\");",
																	"pm.environment.set(\"filter_user\",\"\");",
																	"pm.environment.set(\"dn_search_group\",\"\");",
																	"pm.environment.set(\"filter_group\",\"\");",
																	"pm.environment.set(\"login\",\"\");",
																	"pm.environment.set(\"password\",\"\");"
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "934594ac-7b6f-4a41-8d70-0dd50d86cc24",
																"type": "text/javascript",
																"exec": [
																	"pm.environment.set(\"idList\", pm.environment.get(\"domain_id0\")+'|'+pm.environment.get(\"domain_id1\"));"
																]
															}
														}
													],
													"request": {
														"method": "DELETE",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://medoc/rest/vitis/domains/?token={{token}}&idList={{idList}}",
															"protocol": "https",
															"host": [
																"medoc"
															],
															"path": [
																"rest",
																"vitis",
																"domains",
																""
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{token}}",
																	"equals": true
																},
																{
																	"key": "idList",
																	"value": "{{idList}}",
																	"equals": true
																}
															]
														},
														"description": "Request to delete Domain"
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"id": "40bde464-0882-45ef-bd90-de8bf9f1c33d",
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"id": "84dee74e-2d1d-4cb7-8440-cdd4dadee761",
										"type": "text/javascript"
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "76a12d8a-af02-45d4-97db-fe3c1375f63c",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2d6732aa-b550-4c8e-8aff-458bdc7472cc",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "genericquerys",
					"description": "Folder for genericquerys",
					"item": [
						{
							"name": "Get Querys",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6b116261-9f6d-44df-a71a-30740cbf0d57",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(\"ErrorMess : \" + ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(\"Error : \" +ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    if(jsonData.genericquerys[0]!==null){",
											"        console.log(\"!null\");",
											"        pm.environment.set(\"database\",jsonData.genericquerys[0].database);",
											"    }",
											"    ",
											"    /*var tab=[];",
											"",
											"    for (var i in jsonData.genericquerys){",
											"        //console.log(jsonData.genericquerys[i].database);",
											"        tab.push(jsonData.genericquerys[i].database);",
											"        i_q++;",
											"    }",
											"    //console.log(tab);",
											"    pm.environment.set(\"databases\",tab);",
											"    var t = [];",
											"    t = pm.environment.get(\"databases\");",
											"    //console.log(t);",
											"    pm.environment.set(\"max_query\",i_q);*/",
											"}",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "https://medoc/rest/vitis/genericquerys/databases?token={{token}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"genericquerys",
										"databases"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										}
									]
								},
								"description": "Get the dtabases list"
							},
							"response": []
						},
						{
							"name": "Get Querys",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "6e205e15-9474-4b14-b5c4-ff411f882e0f",
										"type": "text/javascript",
										"exec": [
											"/*var tmp = pm.environment.get(\"databases\");",
											"var dbs = tmp.split(',');",
											"console.log(dbs);",
											"var i_q = pm.environment.get(\"i_query\");",
											"pm.environment.set(\"database\",dbs[i_q]);*/"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "58b2f724-5a35-4af7-85fe-853f08cb5c9f",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    ",
											"    if(jsonData.genericquerys[0]!==null){",
											"        console.log(\"!null\");",
											"        pm.environment.set(\"schema\",jsonData.genericquerys[0].schema_name);",
											"    }",
											"    /*var i_q = pm.environment.get(\"i_query\");",
											"    var max_q = pm.environment.get(\"max_query\");",
											"    if(i_q < 5){",
											"        i_q++;",
											"        pm.environment.set(\"i_query\",i_q);",
											"    }*/",
											"}",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/genericquerys/:database/schemas?token={{token}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"genericquerys",
										":database",
										"schemas"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "database",
											"value": "{{database}}"
										}
									]
								},
								"description": "Get the database schemas"
							},
							"response": []
						},
						{
							"name": "Get Querys",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "99f4785d-f2c5-4d56-8025-81a66dffca07",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    if(jsonData.genericquerys[0]!==null){",
											"        console.log(\"!null\");",
											"        pm.environment.set(\"table_name\",jsonData.genericquerys[0].table_name);",
											"    }",
											"}",
											"   ",
											"   ",
											"   ",
											"   "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/genericquerys?token={{token}}&login={{login}}&password={{password}}&server={{server}}&port={{port}}&sgbd={{sgbd}}&database={{database}}&schema={{schema}}&table={{table}}&filter={{filter}}&limit={{limit}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"genericquerys"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "login",
											"value": "{{login}}",
											"equals": true
										},
										{
											"key": "password",
											"value": "{{password}}",
											"equals": true
										},
										{
											"key": "server",
											"value": "{{server}}",
											"equals": true
										},
										{
											"key": "port",
											"value": "{{port}}",
											"equals": true
										},
										{
											"key": "sgbd",
											"value": "{{sgbd}}",
											"equals": true
										},
										{
											"key": "database",
											"value": "{{database}}",
											"equals": true
										},
										{
											"key": "schema",
											"value": "{{schema}}",
											"equals": true
										},
										{
											"key": "table",
											"value": "{{table}}",
											"equals": true
										},
										{
											"key": "filter",
											"value": "{{filter}}",
											"equals": true
										},
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										}
									]
								},
								"description": "Request to query a schema. There is two ways to use this service: with the token witch will use the current server/port/sgbd, with login/password witch can query distant servers"
							},
							"response": []
						},
						{
							"name": "Get Querys",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "194bf00c-79ad-49aa-9804-f1a1a177dc48",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/genericquerys/:table_name/columns?token={{token}}&login={{login}}&password={{password}}&server={{server}}&port={{port}}&sgbd={{sgbd}}&database={{database}}&schema={{schema}}&encoding={{encoding}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"genericquerys",
										":table_name",
										"columns"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "login",
											"value": "{{login}}",
											"equals": true
										},
										{
											"key": "password",
											"value": "{{password}}",
											"equals": true
										},
										{
											"key": "server",
											"value": "{{server}}",
											"equals": true
										},
										{
											"key": "port",
											"value": "{{port}}",
											"equals": true
										},
										{
											"key": "sgbd",
											"value": "{{sgbd}}",
											"equals": true
										},
										{
											"key": "database",
											"value": "{{database}}",
											"equals": true
										},
										{
											"key": "schema",
											"value": "{{schema}}",
											"equals": true
										},
										{
											"key": "encoding",
											"value": "{{encoding}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "table_name",
											"value": "{{table_name}}"
										}
									]
								},
								"description": "Request to query. There is two ways to use this service: with the token witch will use the current server/port/sgbd, with login/password witch can query distant servers"
							},
							"response": []
						},
						{
							"name": "Get Querys",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f0772df5-b723-4033-ad4d-2adee1318f32",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3985a7f3-679d-4691-b13c-823f790d165a",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"login\",\"\");",
											"pm.environment.set(\"password\",\"\");",
											"pm.environment.set(\"server\",\"\");",
											"pm.environment.set(\"port\",\"\");",
											""
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/genericquerys/:table_name?token={{token}}&login={{login}}&password={{password}}&server={{server}}&port={{port}}&sgbd={{sgbd}}&database={{database}}&schema=pg_catalog&encoding={{encoding}}&sort_order={{sort_order}}&limit={{limit}}&offset={{offset}}&attributs={{attributs}}&filter={{filter}}&distinct={{distinct}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"genericquerys",
										":table_name"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "login",
											"value": "{{login}}",
											"equals": true
										},
										{
											"key": "password",
											"value": "{{password}}",
											"equals": true
										},
										{
											"key": "server",
											"value": "{{server}}",
											"equals": true
										},
										{
											"key": "port",
											"value": "{{port}}",
											"equals": true
										},
										{
											"key": "sgbd",
											"value": "{{sgbd}}",
											"equals": true
										},
										{
											"key": "database",
											"value": "{{database}}",
											"equals": true
										},
										{
											"key": "schema",
											"value": "pg_catalog",
											"equals": true
										},
										{
											"key": "encoding",
											"value": "{{encoding}}",
											"equals": true
										},
										{
											"key": "order_by",
											"value": "{{order_by}}",
											"equals": true,
											"disabled": true
										},
										{
											"key": "sort_order",
											"value": "{{sort_order}}",
											"equals": true
										},
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "offset",
											"value": "{{offset}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										},
										{
											"key": "filter",
											"value": "{{filter}}",
											"equals": true
										},
										{
											"key": "distinct",
											"value": "{{distinct}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "table_name",
											"value": "pg_group"
										}
									]
								},
								"description": "Request to query a table. There is two ways to use this service: with the token witch will use the current server/port/sgbd, with login/password witch can query distant servers"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "modes",
					"description": "Folder for modes",
					"item": [
						{
							"name": "Get Mode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5625e8c-a96d-45dd-b95d-c7f474dd8ec1",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    if(jsonData.modes[0].mode_id!==null){",
											"        console.log(\"!null\");",
											"        console.log(jsonData.modes[0]);",
											"       pm.environment.set(\"mode_id_0\",jsonData.modes[0].mode_id);",
											"    }",
											"    if(jsonData.list_count > 1){",
											"        if(jsonData.modes[1].mode_id!==null){",
											"            console.log(\"!null_2\");",
											"            console.log(jsonData.modes[1]);",
											"            pm.environment.set(\"mode_id_1\",jsonData.modes[1].mode_id);",
											"        }",
											"    }",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/modes/:mode_id?token={{token}}&attributs={{attributs}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"modes",
										":mode_id"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "mode_id",
											"value": "{{mode_id}}"
										}
									]
								},
								"description": "Request to get Mode by id"
							},
							"response": []
						},
						{
							"name": "Sort modes",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "edd7a262-6605-4996-9a69-b0f806018c9c",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"modes_id\", pm.environment.get(\"mode_id_1\")+'|'+pm.environment.get(\"mode_id_0\"));"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "657ba044-123c-49cc-b6de-8322300212af",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/modes/sorting?token={{token}}&modes_id={{modes_id}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"modes",
										"sorting"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "modes_id",
											"value": "{{modes_id}}",
											"equals": true
										}
									]
								},
								"description": "Request to sort the modes of the application"
							},
							"response": []
						},
						{
							"name": "Get Modes",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31c75a62-baaf-443a-bae4-36cb022b8e9a",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/modes?token={{token}}&order_by={{order_by}}&sort_order={{sort_order}}&limit={{limit}}&offset={{offset}}&attributs={{attributs}}&filter={{filter}}&distinct={{distinct}}&action={{action}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"modes"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "order_by",
											"value": "{{order_by}}",
											"equals": true
										},
										{
											"key": "sort_order",
											"value": "{{sort_order}}",
											"equals": true
										},
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "offset",
											"value": "{{offset}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										},
										{
											"key": "filter",
											"value": "{{filter}}",
											"equals": true
										},
										{
											"key": "distinct",
											"value": "{{distinct}}",
											"equals": true
										},
										{
											"key": "action",
											"value": "{{action}}",
											"equals": true
										}
									]
								},
								"description": "Request to get Modes"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "phpinfo",
					"description": "Folder for phpinfo",
					"item": [
						{
							"name": "Get phpinfo",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba86412f-f659-4129-8632-6ebdd994a4dc",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/phpinfo?token={{token}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"phpinfo"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										}
									]
								},
								"description": "Request to get phpinfo"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "tabs",
					"description": "Folder for tabs",
					"item": [
						{
							"name": "Get Tabs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66119be5-3bca-4ff4-a62a-22bdd41fb945",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    if(jsonData.tabs[0]!==null){",
											"        console.log(\"!null\");",
											"        pm.environment.set(\"tab_id\",jsonData.tabs[0].tab_id);",
											"    }",
											"}",
											"   ",
											"   ",
											"   ",
											"   "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/tabs?token={{token}}&order_by={{order_by}}&sort_order={{sort_order}}&limit={{limit}}&offset={{offset}}&attributs={{attributs}}&filter={{filter}}&distinct={{distinct}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"tabs"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "order_by",
											"value": "{{order_by}}",
											"equals": true
										},
										{
											"key": "sort_order",
											"value": "{{sort_order}}",
											"equals": true
										},
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "offset",
											"value": "{{offset}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										},
										{
											"key": "filter",
											"value": "{{filter}}",
											"equals": true
										},
										{
											"key": "distinct",
											"value": "{{distinct}}",
											"equals": true
										}
									]
								},
								"description": "Request to get Tabs"
							},
							"response": []
						},
						{
							"name": "Get Tab",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f61ecad-eb5c-420c-9b74-2043db10e338",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"}",
											"   ",
											"   ",
											"   ",
											"   "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/tabs/:tab_id?token={{token}}&attributs={{attributs}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"tabs",
										":tab_id"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "tab_id",
											"value": "{{tab_id}}"
										}
									]
								},
								"description": "Request to get Tab by mode id"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "versions",
					"description": "Folder for versions",
					"item": [
						{
							"name": "Get versions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c26c4fe8-25fc-4aca-a472-2e617806e9ff",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"",
											"}",
											"   ",
											"   ",
											"   ",
											"   "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/versions?token={{token}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"versions"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										}
									]
								},
								"description": "Request to get versions"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "webservices",
					"description": "Folder for webservices",
					"item": [
						{
							"name": "Get WebServices",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02012bef-b7aa-441e-a15a-4b73578eea40",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    if(jsonData.webservices[0]!==null){",
											"        console.log(\"!null\");",
											"        pm.environment.set(\"web_service\",jsonData.webservices[0].name);",
											"    }",
											"}",
											"   ",
											"   ",
											"   ",
											"   "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x_vm_json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/webservices?token={{token}}&attributs={{attributs}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"webservices"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										}
									]
								},
								"description": "Request to get webservices"
							},
							"response": []
						},
						{
							"name": "Get WebService",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c59d678-237a-4c72-bc91-e7fc45f506b9",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x_vm_json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/webservices/:web_service?token={{token}}&attributs={{attributs}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"webservices",
										":web_service"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "web_service",
											"value": "{{web_service}}"
										}
									]
								},
								"description": "Request to get WebService by id"
							},
							"response": []
						},
						{
							"name": "Get ressources list",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddd42bbf-f319-4191-bc96-1006809ac7be",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, application/x_vm_json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/webservices/:web_service/ressources?token={{token}}&attributs={{attributs}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"webservices",
										":web_service",
										"ressources"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "web_service",
											"value": "{{web_service}}"
										}
									]
								},
								"description": "Request to get ressources list"
							},
							"response": []
						},
						{
							"name": "Get ressources infos",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "573e8030-1612-4cdc-954f-2e367318a4e4",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, application/x_vm_json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/webservices/:web_service/ressources/:ressource?token={{token}}&attributs={{attributs}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"webservices",
										":web_service",
										"ressources",
										":ressource"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "web_service",
											"value": "{{web_service}}"
										},
										{
											"key": "ressource",
											"value": "{{ressource}}"
										}
									]
								},
								"description": "Request to get ressources infos"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "vitissections",
					"description": "Folder for vitissections",
					"item": [
						{
							"name": "Get VitisSections",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00dc5184-7f50-4736-baec-552f136a6a11",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    if(jsonData.vitissections[0]!==null){",
											"        console.log(\"!null\");",
											"        pm.environment.set(\"section_id\",jsonData.vitissections[0].section_id);",
											"    }",
											"}",
											"   ",
											"   ",
											"   ",
											"   "
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/vitissections?token={{token}}&order_by={{order_by}}&sort_order={{sort_order}}&limit={{limit}}&offset={{offset}}&attributs={{attributs}}&filter={{filter}}&distinct={{distinct}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"vitissections"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "order_by",
											"value": "{{order_by}}",
											"equals": true
										},
										{
											"key": "sort_order",
											"value": "{{sort_order}}",
											"equals": true
										},
										{
											"key": "limit",
											"value": "{{limit}}",
											"equals": true
										},
										{
											"key": "offset",
											"value": "{{offset}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										},
										{
											"key": "filter",
											"value": "{{filter}}",
											"equals": true
										},
										{
											"key": "distinct",
											"value": "{{distinct}}",
											"equals": true
										}
									]
								},
								"description": "Request to get VitisSections"
							},
							"response": []
						},
						{
							"name": "Get VitisSection",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bed78dd1-d07b-4a66-8093-c2621f4d18b9",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}"
										]
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": ""
								},
								"url": {
									"raw": "https://medoc/rest/vitis/vitissections/:section_id?token={{token}}&attributs={{attributs}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"vitissections",
										":section_id"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										},
										{
											"key": "attributs",
											"value": "{{attributs}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "section_id",
											"value": "{{section_id}}"
										}
									]
								},
								"description": "Request to get VitisSection by mode id"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "b480f772-0450-4c13-ab41-ba7e9ad67724",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"id": "6d6b4aca-2d26-40ce-9905-ef5895234294",
								"type": "text/javascript"
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "loop",
					"description": "",
					"item": [
						{
							"name": "Add User //loop with basic user",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3d1e839f-22f0-45b1-b6d5-e1d4ea89f727",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"    console.log(b);",
											"    ",
											"}",
											"",
											"var b = pm.environment.get(\"bool\");",
											"if(b == \"admin\"){",
											"    pm.environment.set(\"user_id\",jsonData.user_id);",
											"    console.log(\"user_id =\" + jsonData.user_id);",
											"}",
											"if(b == \"admin\"){",
											"    postman.setNextRequest(\"Get private token\");",
											"}",
											"",
											"",
											"",
											"",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c2de2e10-0db8-4028-bc5b-fc57ad646c1f",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"login\", \"Basic_user1\");",
											"pm.environment.set(\"name\", \"Basic_user1\");",
											"",
											"pm.environment.set(\"user\", \"Basic_user1\");",
											"",
											"pm.environment.set(\"password\", \"Basic_user1\");",
											"pm.environment.set(\"password_confirm\", \"Basic_user1\");",
											"pm.environment.set(\"company\",\"corp\");",
											"pm.environment.set(\"email\",\"Basic_user1@corp.com\");",
											"pm.environment.set(\"department\",\"22334\");",
											"pm.environment.set(\"groups\", \"1\"); //1 = demo",
											"pm.environment.set(\"privileges\",\"vitis_user\");",
											"",
											"",
											""
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "token",
											"type": "text",
											"value": "{{token}}"
										},
										{
											"key": "login",
											"type": "text",
											"value": "{{login}}"
										},
										{
											"key": "action",
											"type": "text",
											"value": "{{action}}"
										},
										{
											"key": "name",
											"type": "text",
											"value": "{{name}}"
										},
										{
											"key": "email",
											"type": "text",
											"value": "{{email}}"
										},
										{
											"key": "company",
											"type": "text",
											"value": "{{company}}"
										},
										{
											"key": "department",
											"type": "text",
											"value": "{{department}}"
										},
										{
											"key": "groups",
											"type": "text",
											"value": "{{groups}}"
										},
										{
											"key": "privileges",
											"type": "text",
											"value": "{{privileges}}"
										},
										{
											"key": "ip_constraint",
											"type": "text",
											"value": "{{ip_constraint}}"
										},
										{
											"key": "password",
											"type": "text",
											"value": "{{password}}"
										},
										{
											"key": "password_confirm",
											"type": "text",
											"value": "{{password_confirm}}"
										},
										{
											"key": "restriction",
											"type": "text",
											"value": "{{restriction}}"
										}
									]
								},
								"url": {
									"raw": "https://medoc/rest/vitis/users",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"users"
									]
								},
								"description": "Request to add user\nThis user will be use to try everything again without admin right"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Clean",
					"description": "",
					"item": [
						{
							"name": "Get private token (Admin) //Clean",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77e7e808-9955-42ce-93c9-d47f82f21fdd",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"    //console.log(jsonData.token);",
											"    pm.environment.set(\"token\", jsonData.token);",
											"    pm.environment.set(\"user\", \"\");",
											"    pm.environment.set(\"password\", \"\");",
											"}",
											"",
											"pm.test(\"Total time before cleaning : \" + t + \"ms\", function () {});"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e95d9582-ebaf-4c62-82cc-cd53d53680ce",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"user\", \"admin\");",
											"pm.environment.set(\"password\", \"admin\");"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "user",
											"type": "text",
											"value": "{{user}}"
										},
										{
											"key": "password",
											"type": "text",
											"value": "{{password}}"
										},
										{
											"key": "duration",
											"type": "text",
											"value": "2"
										}
									]
								},
								"url": {
									"raw": "https://medoc/rest/vitis/privatetoken",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"privatetoken"
									]
								},
								"description": "Request to get a token"
							},
							"response": []
						},
						{
							"name": "delete User //Clean",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8e649d9-e92c-485e-b481-19f2fe91e294",
										"type": "text/javascript",
										"exec": [
											"var t = parseInt(pm.environment.get(\"time\"));",
											"console.log(t);",
											"t += parseInt(pm.response.responseTime);",
											"console.log(t);",
											"pm.environment.set(\"time\",t);",
											"",
											"if(pm.response.responseSize === 0){",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    return null;",
											"}",
											"",
											"var jsonData = pm.response.json();",
											"",
											"if(jsonData.status === 0){",
											"    if (jsonData.errorMessage !== null){",
											"        var ErrorMess = jsonData.errorMessage;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"    else{",
											"        var ErrorMess = jsonData.error;",
											"        console.log(ErrorMess);",
											"        pm.test(ErrorMess, function () {});",
											"    }",
											"}",
											"else{",
											"    pm.test(\"Status equal 1\", function () {",
											"    pm.expect(jsonData.status).to.eql(1);",
											"    });",
											"    pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);});",
											"    ",
											"    //Do stuff here",
											"   ",
											"}",
											"pm.test(\"Total time after cleaning : \" + t + \"ms\", function () {});"
										]
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json, application/x-vm-json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {},
								"url": {
									"raw": "https://medoc/rest/vitis/users/:user_id?token={{token}}",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"users",
										":user_id"
									],
									"query": [
										{
											"key": "token",
											"value": "{{token}}",
											"equals": true
										}
									],
									"variable": [
										{
											"key": "user_id",
											"value": "{{user_id}}"
										}
									]
								},
								"description": "Request to delete User"
							},
							"response": []
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"id": "edfb6f02-fe85-4dc8-8e79-2abd5d3b9d66",
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"id": "7b9d63f7-8991-4759-b916-b944f32121a0",
						"type": "text/javascript"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"exec": [
					""
				],
				"id": "7512eb45-9983-4090-a2c0-a62de26115ac",
				"type": "text/javascript"
			}
		},
		{
			"listen": "test",
			"script": {
				"exec": [
					""
				],
				"id": "432674e9-9c6f-4660-9455-89496c4bb8b6",
				"type": "text/javascript"
			}
		}
	]
}
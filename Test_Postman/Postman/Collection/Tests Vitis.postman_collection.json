{
	"info": {
		"name": "Tests Vitis",
		"_postman_id": "00c07c1b-17cb-3afd-285e-92821e9ca724",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Vitis",
			"description": "Tests de l'API Vitis",
			"item": [
				{
					"name": "Admin connection",
					"item": [
						{
							"name": "Get private token (Admin)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa18a445-f117-4e2c-ac21-35d5728455ba",
										"type": "text/javascript",
										"exec": [
											"// Test la présence de réponse",
											"if(pm.response.responseSize === 0){",
											"    tests['No response'] = false;",
											"    return null;",
											"}",
											"",
											"// Tests contenu",
											"var jsonData = pm.response.json();",
											"tests[\"token is ok\"] = typeof(jsonData.token) === \"string\";",
											"tests[\"user is ok\"] = typeof(jsonData.user) === \"string\";",
											"tests[\"validity_date is ok\"] = typeof(jsonData.validity_date) === \"string\";",
											"tests[\"user_id is ok\"] = typeof(jsonData.user_id) === \"number\";",
											"tests[\"privileges is ok\"] = jsonData.privileges instanceof Array;",
											"",
											"// Variables",
											"pm.environment.set(\"main_token\", jsonData.token);",
											"pm.environment.set(\"main_admin_id\",jsonData.user_id);",
											"",
											"// Passe directement à la requête Get token",
											"// postman.setNextRequest(\"Get token\");",
											""
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6bd8e739-8151-4208-97aa-a70ed4f78467",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"error_test\", false);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "user",
											"type": "text",
											"value": "{{admin_user}}"
										},
										{
											"key": "password",
											"type": "text",
											"value": "{{admin_password}}"
										},
										{
											"key": "duration",
											"type": "text",
											"value": "600"
										}
									]
								},
								"url": {
									"raw": "https://{{host}}/rest/vitis/privatetoken",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"vitis",
										"privatetoken"
									]
								},
								"description": "Request to get a token"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "34681e5a-c7db-4ab3-99b9-ac86748c85cd",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"id": "e4eb9985-0c52-4ca9-9989-026ea67c5cd4",
								"type": "text/javascript"
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "User Start",
					"item": [
						{
							"name": "Get private token (User)",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34a4c779-e295-4d6b-902a-0cce63da93d3",
										"type": "text/javascript",
										"exec": [
											"// Test la présence de réponse",
											"if(pm.response.responseSize === 0){",
											"    tests['No response'] = false",
											"    return null;",
											"}",
											"",
											"// Tests contenu",
											"var jsonData = pm.response.json();",
											"tests[\"token is ok\"] = typeof(jsonData.token) === \"string\";",
											"tests[\"user is ok\"] = typeof(jsonData.user) === \"string\";",
											"tests[\"validity_date is ok\"] = typeof(jsonData.validity_date) === \"string\";",
											"tests[\"user_id is ok\"] = typeof(jsonData.user_id) === \"number\";",
											"tests[\"privileges is ok\"] = jsonData.privileges instanceof Array",
											"",
											"// Variables",
											"pm.environment.set(\"simple_user_token\", jsonData.token);",
											"pm.environment.set(\"simple_user_id\",jsonData.user_id);",
											"",
											"// Passe directement à la requête Get token",
											"// postman.setNextRequest(\"Get token\");"
										]
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "138325f7-989d-432e-8767-7c125aea7173",
										"type": "text/javascript",
										"exec": [
											"pm.environment.set(\"error_test\", false);"
										]
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "user",
											"type": "text",
											"value": "{{user_user}}"
										},
										{
											"key": "password",
											"type": "text",
											"value": "{{user_password}}"
										},
										{
											"key": "duration",
											"type": "text",
											"value": "600"
										}
									]
								},
								"url": {
									"raw": "https://{{host}}/rest/vitis/privatetoken",
									"protocol": "https",
									"host": [
										"{{host}}"
									],
									"path": [
										"rest",
										"vitis",
										"privatetoken"
									]
								},
								"description": "Request to get a token"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "a26d5104-9265-4758-973e-d03c7bc878cd",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"id": "4979f18b-6990-40e6-be0a-43e4dace8015",
								"type": "text/javascript"
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Main",
					"item": [
						{
							"name": "Private token",
							"item": [
								{
									"name": "Get token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0a4ecf4-8b3c-4b59-a825-2d46292110b9",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"// Tests contenu",
													"var jsonData = pm.response.json();",
													"tests[\"token is ok\"] = typeof(jsonData.token) === \"string\";",
													"tests[\"user is ok\"] = typeof(jsonData.user) === \"string\";",
													"tests[\"validity_date is ok\"] = typeof(jsonData.validity_date) === \"string\";",
													"tests[\"user_id is ok\"] = typeof(jsonData.user_id) === \"number\";",
													"tests[\"privileges is ok\"] = jsonData.privileges instanceof Array;"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/privatetoken?token={{main_token}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"privatetoken"
											],
											"query": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"equals": true
												}
											]
										},
										"description": "Request to get a token"
									},
									"response": []
								},
								{
									"name": "Get public token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false",
													"    return null;",
													"}"
												],
												"id": "a5f8ebf4-5375-456c-af97-d4a64a8b8c7e",
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/publictoken",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"publictoken"
											]
										},
										"description": "Request to get a token"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"id": "84fb9c18-5ae0-4e1b-b43a-12d1a9e27be5",
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"id": "792c887e-59d6-4361-b5bb-42888be68284",
										"type": "text/javascript"
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Users",
							"item": [
								{
									"name": "Add User",
									"item": [
										{
											"name": "Add User",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "75842fc5-2d66-458a-aa0c-7afa495fe644",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"user_id is ok\"] = typeof(jsonData.user_id) === \"number\";",
															"",
															"// Variables d'environnement",
															"pm.environment.set(\"test_user_id\", jsonData.user_id);"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "87ee7075-12f8-46b7-b085-3a06ca08f741",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_user_login\", \"test_test_user\");",
															"pm.environment.set(\"test_user_name\", \"test main user\");",
															"pm.environment.set(\"test_user_password\", \"test_test_user\");",
															"pm.environment.set(\"test_user_password_confirm\", \"test_test_user\");",
															"pm.environment.set(\"test_user_email\",\"test_test_user@test.com\");",
															"pm.environment.set(\"test_user_company\",\"test company\");",
															"pm.environment.set(\"test_user_department\",\"test departement\");",
															"pm.environment.set(\"test_user_groups\", pm.environment.get(\"groups\"));",
															"pm.environment.set(\"test_user_action\", \"\");",
															"pm.environment.set(\"test_user_ip_constraint\", \"\");",
															"pm.environment.set(\"test_user_restriction\", \"%\");",
															"pm.environment.set(\"test_user_privileges\",\"vitis_user\");"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "token",
															"type": "text",
															"value": "{{main_token}}"
														},
														{
															"key": "login",
															"type": "text",
															"value": "{{test_user_login}}"
														},
														{
															"key": "action",
															"type": "text",
															"value": "{{test_user_action}}"
														},
														{
															"key": "name",
															"type": "text",
															"value": "{{test_user_name}}"
														},
														{
															"key": "email",
															"type": "text",
															"value": "{{test_user_email}}"
														},
														{
															"key": "company",
															"type": "text",
															"value": "{{test_user_company}}"
														},
														{
															"key": "department",
															"type": "text",
															"value": "{{test_user_department}}"
														},
														{
															"key": "groups",
															"type": "text",
															"value": "{{test_user_groups}}"
														},
														{
															"key": "privileges",
															"type": "text",
															"value": "{{test_user_privileges}}"
														},
														{
															"key": "ip_constraint",
															"type": "text",
															"value": "{{test_user_ip_constraint}}"
														},
														{
															"key": "password",
															"type": "text",
															"value": "{{test_user_password}}"
														},
														{
															"key": "password_confirm",
															"type": "text",
															"value": "{{test_user_password_confirm}}"
														},
														{
															"key": "restriction",
															"type": "text",
															"value": "{{test_user_restriction}}"
														}
													]
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users"
													]
												},
												"description": "Test: Ajoute l'utilisateur Basic_user"
											},
											"response": []
										},
										{
											"name": "Test Add user",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "76c41c6e-a500-4889-ac5e-fd37e7a16e37",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"users is ok\"] = jsonData.users instanceof Array;",
															"tests[\"users get is ok\"] = jsonData.users.length === 1;",
															"tests[\"user_id is ok\"] = jsonData.users[0].user_id === parseInt(pm.environment.get(\"test_user_id\"));",
															"tests[\"login is ok\"] = jsonData.users[0].login === pm.environment.get(\"test_user_login\");",
															"tests[\"name is ok\"] = jsonData.users[0].name === pm.environment.get(\"test_user_name\");",
															"tests[\"email is ok\"] = jsonData.users[0].email === pm.environment.get(\"test_user_email\");   ",
															"tests[\"company is ok\"] = jsonData.users[0].company === pm.environment.get(\"test_user_company\");",
															"tests[\"department is ok\"] = jsonData.users[0].department === pm.environment.get(\"test_user_department\");",
															"tests[\"ip_constraint is ok\"] = jsonData.users[0].ip_constraint === pm.environment.get(\"test_user_ip_constraint\");",
															"tests[\"restriction is ok\"] = jsonData.users[0].restriction === pm.environment.get(\"test_user_restriction\");",
															"tests[\"groups is ok\"] = jsonData.users[0].groups === pm.environment.get(\"test_user_groups\");",
															"tests[\"privileges is ok\"] = jsonData.users[0].privileges === pm.environment.get(\"test_user_privileges\");",
															"",
															"// Nettoyage variables ",
															"pm.environment.unset(\"test_user_attributes\");",
															""
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "8ff044dc-11a3-41c0-972f-b8f1bc66e2a7",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_user_attributes\", \"\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&attributs={{test_user_attributes}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users",
														":user_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{test_user_attributes}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "{{test_user_id}}"
														}
													]
												},
												"description": "Test: vérifie le précédent PUT"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get User",
									"item": [
										{
											"name": "Get Users",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f943a962-ba84-4ec1-9c97-20f40f165e60",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"users is ok\"] = jsonData.users instanceof Array;",
															"",
															"//Get parameters name for later tests",
															"var order_by;",
															"var filter;",
															"    for(var param in jsonData.users[0]){",
															"        order_by = param;",
															"        filter = jsonData.users[0][param];",
															"        if(jsonData.users[0][param] !== null){",
															"            break;",
															"        }",
															"    }",
															"",
															"//Tests order_by and sort_order",
															"var sort = true;",
															"var varA, varB = null;",
															"var ordsortjsonData;",
															"",
															"//Send request with order_by variable name in ASC order",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/users?token=\"+pm.environment.get(\"main_token\")+\"&order_by=\"+order_by+\"&sort_order=asc\", function (err, ordsortResponse) {",
															"    ordsortjsonData = ordsortResponse.json();",
															"    ",
															"//Check sort",
															"    for(var parameter in ordsortjsonData.users){",
															"        varB = ordsortjsonData.users[parameter][order_by];",
															"        if(varB !== null && varA !== null){",
															"            if(varA > varB){ ",
															"                sort = false;",
															"                break;",
															"            }",
															"        }",
															"        varA = varB;",
															"    }",
															"    pm.test(\"order_by and sort_order is ok\", function () {pm.expect(sort).to.be.true});",
															"});",
															"",
															"//Tests limit and offset",
															"var maxListCount, firstparamName, lastparamName, paramName, limoffjsonData;",
															"var lim = true, off = true;",
															"",
															"//Setup limit and offset check parameters",
															"if(jsonData.list_count > 1){",
															"    maxListCount = parseInt(jsonData.list_count) - 1 ;",
															"    firstparamName = jsonData.users[0][order_by];",
															"    lastparamName = jsonData.users[parseInt(maxListCount)][order_by];",
															"    maxListCount--;",
															"    ",
															"//Send request with limit at maxListCount -1 and offset at 1",
															"    pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/users?token=\"+pm.environment.get(\"main_token\")+\"&limit=\"+ parseInt(maxListCount) +\"&offset=1\", function (err, limoffResponse) {",
															"        limoffjsonData = limoffResponse.json();",
															"    ",
															"//Check limit and offset result",
															"        for(var parameter in limoffjsonData.attjsonData){",
															"            paramName = limoffjsonData.users[parameter][order_by];",
															"            if(paramName === firstparamName){",
															"                off = false;",
															"            }",
															"            if(paramName === lastparamName){",
															"                lim = false;",
															"            }",
															"        }",
															"        pm.test(\"offset is ok\", function () {pm.expect(off).to.be.true});",
															"        pm.test(\"limit is ok\", function () {pm.expect(lim).to.be.true});",
															"    });",
															"}",
															"",
															"//Test attributes",
															"var attjsonData;",
															"var att = true;",
															"",
															"//Send request to get only the order_by variable name attribute",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/users?token=\"+pm.environment.get(\"main_token\")+\"&attributs=\"+order_by, function (err, attResponse) {",
															"    attjsonData = attResponse.json();",
															"",
															"//Check attribute ",
															"    for(var parameter in attjsonData.users){",
															"        for(var attparam in attjsonData.users[parameter]){",
															"            if(attparam !== order_by){",
															"                att = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"attribute is ok\", function () {pm.expect(att).to.be.true});",
															"});",
															"",
															"//Test filter",
															"var fltrjson = JSON.stringify({'column': order_by, 'compare_operator': '=', 'value': filter});",
															"var fltrjsonData;",
															"var fltr = true;",
															"",
															"//Send request with filter argument",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/users?token=\"+pm.environment.get(\"main_token\")+\"&filter=\"+fltrjson, function (err, fltrResponse) {",
															"    fltrjsonData = fltrResponse.json();",
															"",
															"//Check filter",
															"    for(var parameter in fltrjsonData.users){",
															"        for(var fltrparam in fltrjsonData.users[parameter]){",
															"            var tmp = fltrjsonData.users[parameter][fltrparam];",
															"            if(fltrparam === order_by && tmp !== filter){",
															"                fltr = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"filter is ok\", function () {pm.expect(fltr).to.be.true});",
															"});",
															"",
															"//Save variable for without 's' next test",
															"var varibla;",
															"for(var param in jsonData.users[0]){",
															"    variable = \"get_users_\" + param;",
															"    pm.environment.set(variable,jsonData.users[0][param]);",
															"}",
															"",
															"//Clean variables",
															"pm.environment.unset(\"get_users_order_by\");",
															"pm.environment.unset(\"get_users_sort_order\");",
															"pm.environment.unset(\"get_users_limit\");",
															"pm.environment.unset(\"get_users_offset\");",
															"pm.environment.unset(\"get_users_attributs\");",
															"pm.environment.unset(\"get_users_filter\");",
															"pm.environment.unset(\"get_users_distinct\");",
															"",
															"",
															""
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "70eb3640-d9e4-4570-a7c2-0c9ecddc2366",
														"type": "text/javascript",
														"exec": [
															"",
															"if(typeof(pm.environment.get(\"test_user_attributes\")) == \"undefined\")",
															"\tpm.environment.set(\"test_user_attributes\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_users_order_by\")) == \"undefined\")",
															"\tpm.environment.set(\"get_users_order_by\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_users_sort_order\")) == \"undefined\")",
															"\tpm.environment.set(\"get_users_sort_order\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_users_limit\")) == \"undefined\")",
															"\tpm.environment.set(\"get_users_limit\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_users_offset\")) == \"undefined\")",
															"\tpm.environment.set(\"get_users_offset\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_users_attributs\")) == \"undefined\")",
															"\tpm.environment.set(\"get_users_attributs\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_users_filter\")) == \"undefined\")",
															"\tpm.environment.set(\"get_users_filter\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_users_distinct\")) == \"undefined\")",
															"\tpm.environment.set(\"get_users_distinct\", \"\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users/?token={{main_token}}&order_by={{get_users_order_by}}&sort_order={{get_users_sort_order}}&limit={{get_users_limit}}&offset={{get_users_offset}}&attributs={{get_users_attributs}}&filter={{get_users_filter}}&distinct={{get_users_distinct}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users",
														""
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "order_by",
															"value": "{{get_users_order_by}}",
															"equals": true
														},
														{
															"key": "sort_order",
															"value": "{{get_users_sort_order}}",
															"equals": true
														},
														{
															"key": "limit",
															"value": "{{get_users_limit}}",
															"equals": true
														},
														{
															"key": "offset",
															"value": "{{get_users_offset}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{get_users_attributs}}",
															"equals": true
														},
														{
															"key": "filter",
															"value": "{{get_users_filter}}",
															"equals": true
														},
														{
															"key": "distinct",
															"value": "{{get_users_distinct}}",
															"equals": true
														}
													]
												},
												"description": "Test: vérifie le précédent PUT"
											},
											"response": []
										},
										{
											"name": "Get User",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "66995952-e395-4b80-8c7d-17b24db4e6e5",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"tests[\"group is ok\"] = jsonData.users instanceof Array;",
															"",
															"var variable;",
															"for(var param in jsonData.users[0]){",
															"    variable = \"get_users_\" + param;",
															"    if(jsonData.users[0][param] != null){",
															"        if(pm.environment.get(variable) != null){",
															"            tests[param+ \" is ok\"] = jsonData.users[0][param] == pm.environment.get(variable);",
															"        }else{",
															"            tests[param+ \" parameter was returned too with a : \" + typeof(jsonData.users[0][param])] = true;",
															"        }",
															"    }else if(jsonData.users[0][param] == null && pm.environment.get(variable) == (\"\" || null)){",
															"        tests[param+ \" is supposed ok (return filled with null argument)\"] = true;",
															"    }else{",
															"        console.log(param+ \" : \"+ jsonData.users[0][param] + \" : \"+ pm.environment.get(variable))",
															"        tests[\"! Warning ! \"+ param + \" isn't ok\" ] = false;",
															"    }",
															"    pm.environment.unset(variable);",
															"}",
															"",
															"// Nettoyage variables ",
															"pm.environment.unset(\"test_user_attributes\");"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d2c0fec6-7159-492a-bb14-d24c6632e164",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_user_attributes\", \"\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&attributs={{test_user_attributes}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users",
														":user_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{test_user_attributes}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "{{get_users_user_id}}"
														}
													]
												},
												"description": "Test: vérifie le précédent PUT"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Edit User",
									"item": [
										{
											"name": "Simple attributes",
											"item": [
												{
													"name": "Update User",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "7d2adf29-c72e-4878-8a0e-c41703527d2b",
																"type": "text/javascript",
																"exec": [
																	"pm.environment.set(\"test_user_name\", \"test main user edited\");",
																	"pm.environment.set(\"test_user_email\",\"test_test_user_edited@test.com\");",
																	"pm.environment.set(\"test_user_company\",\"test company edited\");",
																	"pm.environment.set(\"test_user_department\",\"test departement edited\");",
																	"// pm.environment.set(\"test_user_groups\", \"\");",
																	"// pm.environment.set(\"test_user_action\", \"\");",
																	"pm.environment.set(\"test_user_ip_constraint\", \"\");",
																	"pm.environment.set(\"test_user_restriction\", \"%\");",
																	"pm.environment.set(\"test_user_privileges\",\"vitis_user|vitis_admin\");"
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "91834f0d-efad-454b-8a78-fe531741e29e",
																"type": "text/javascript",
																"exec": [
																	"// Test la présence de réponse",
																	"if(pm.response.responseSize === 0){",
																	"    tests['No response'] = false",
																	"    return null;",
																	"}",
																	"",
																	"// Tests contenu",
																	"var jsonData = pm.response.json();",
																	"tests[\"user_id is ok\"] = typeof(jsonData.user_id) === \"string\";"
																]
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json, application/x-vm-json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&name={{test_user_name}}&email={{test_user_email}}&company={{test_user_company}}&department={{test_user_department}}&groups={{test_user_groups}}&privileges={{test_user_privileges}}&ip_constraint={{test_user_ip_constraint}}&restriction={{test_user_restriction}}",
															"protocol": "https",
															"host": [
																"{{host}}"
															],
															"path": [
																"rest",
																"vitis",
																"users",
																":user_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{main_token}}",
																	"equals": true
																},
																{
																	"key": "login",
																	"value": "{{login}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "name",
																	"value": "{{test_user_name}}",
																	"equals": true
																},
																{
																	"key": "email",
																	"value": "{{test_user_email}}",
																	"equals": true
																},
																{
																	"key": "company",
																	"value": "{{test_user_company}}",
																	"equals": true
																},
																{
																	"key": "department",
																	"value": "{{test_user_department}}",
																	"equals": true
																},
																{
																	"key": "groups",
																	"value": "{{test_user_groups}}",
																	"equals": true
																},
																{
																	"key": "privileges",
																	"value": "{{test_user_privileges}}",
																	"equals": true
																},
																{
																	"key": "ip_constraint",
																	"value": "{{test_user_ip_constraint}}",
																	"equals": true
																},
																{
																	"key": "password",
																	"value": "{{password}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "password_confirm",
																	"value": "{{password_confirm}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "restriction",
																	"value": "{{test_user_restriction}}",
																	"equals": true
																}
															],
															"variable": [
																{
																	"key": "user_id",
																	"value": "{{test_user_id}}"
																}
															]
														},
														"description": "Request to update User"
													},
													"response": []
												},
												{
													"name": "Test update user",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "a49a47f5-0aa7-4157-835d-8b6f2eefeba7",
																"type": "text/javascript",
																"exec": [
																	"// Test la présence de réponse",
																	"if(pm.response.responseSize === 0){",
																	"    tests['No response'] = false",
																	"    return null;",
																	"}",
																	"",
																	"// Tests contenu",
																	"var jsonData = pm.response.json();",
																	"tests[\"users is ok\"] = jsonData.users instanceof Array",
																	"tests[\"users get is ok\"] = jsonData.users.length === 1;",
																	"tests[\"user_id is ok\"] = jsonData.users[0].user_id === parseInt(pm.environment.get(\"test_user_id\"));",
																	"tests[\"name is ok\"] = jsonData.users[0].name === pm.environment.get(\"test_user_name\");",
																	"tests[\"email is ok\"] = jsonData.users[0].email === pm.environment.get(\"test_user_email\");   ",
																	"tests[\"company is ok\"] = jsonData.users[0].company === pm.environment.get(\"test_user_company\");",
																	"tests[\"department is ok\"] = jsonData.users[0].department === pm.environment.get(\"test_user_department\");",
																	"tests[\"ip_constraint is ok\"] = jsonData.users[0].ip_constraint === pm.environment.get(\"test_user_ip_constraint\");",
																	"tests[\"restriction is ok\"] = jsonData.users[0].restriction === pm.environment.get(\"test_user_restriction\");",
																	"tests[\"groups is ok\"] = jsonData.users[0].groups === pm.environment.get(\"test_user_groups\");",
																	"tests[\"privileges is ok\"] = jsonData.users[0].privileges === pm.environment.get(\"test_user_privileges\");",
																	"",
																	"// Nettoyage variables ",
																	"pm.environment.unset(\"test_user_attributes\");",
																	""
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "5f9fc6df-38ce-4350-a1f9-72c56c46f3f1",
																"type": "text/javascript",
																"exec": [
																	"pm.environment.set(\"test_user_attributes\", \"\");"
																]
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json, application/x-vm-json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&attributs={{test_user_attributes}}",
															"protocol": "https",
															"host": [
																"{{host}}"
															],
															"path": [
																"rest",
																"vitis",
																"users",
																":user_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{main_token}}",
																	"equals": true
																},
																{
																	"key": "attributs",
																	"value": "{{test_user_attributes}}",
																	"equals": true
																}
															],
															"variable": [
																{
																	"key": "user_id",
																	"value": "{{test_user_id}}"
																}
															]
														},
														"description": "Test: vérifie le précédent PUT"
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "Login",
											"item": [
												{
													"name": "Update user login",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "e3d9e64d-ae17-439c-bc66-584df196fe83",
																"type": "text/javascript",
																"exec": [
																	"pm.environment.set(\"test_user_login\", \"test_test_user_edited\");",
																	"",
																	"",
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "91834f0d-efad-454b-8a78-fe531741e29e",
																"type": "text/javascript",
																"exec": [
																	"// Test la présence de réponse",
																	"if(pm.response.responseSize === 0){",
																	"    tests['No response'] = false",
																	"    return null;",
																	"}",
																	"",
																	"// Tests contenu",
																	"var jsonData = pm.response.json();",
																	"tests[\"user_id is ok\"] = typeof(jsonData.user_id) === \"string\";"
																]
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json, application/x-vm-json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&login={{test_user_login}}",
															"protocol": "https",
															"host": [
																"{{host}}"
															],
															"path": [
																"rest",
																"vitis",
																"users",
																":user_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{main_token}}",
																	"equals": true
																},
																{
																	"key": "login",
																	"value": "{{test_user_login}}",
																	"equals": true
																},
																{
																	"equals": true,
																	"key": "name",
																	"value": "{{test_user_name}}",
																	"disabled": true
																},
																{
																	"equals": true,
																	"key": "email",
																	"value": "{{test_user_email}}",
																	"disabled": true
																},
																{
																	"equals": true,
																	"key": "company",
																	"value": "{{test_user_company}}",
																	"disabled": true
																},
																{
																	"equals": true,
																	"key": "department",
																	"value": "{{test_user_department}}",
																	"disabled": true
																},
																{
																	"equals": true,
																	"key": "groups",
																	"value": "{{test_user_groups}}",
																	"disabled": true
																},
																{
																	"equals": true,
																	"key": "privileges",
																	"value": "{{test_user_privileges}}",
																	"disabled": true
																},
																{
																	"equals": true,
																	"key": "ip_constraint",
																	"value": "{{test_user_ip_constraint}}",
																	"disabled": true
																},
																{
																	"equals": true,
																	"key": "password",
																	"value": "{{password}}",
																	"disabled": true
																},
																{
																	"equals": true,
																	"key": "password_confirm",
																	"value": "{{password_confirm}}",
																	"disabled": true
																},
																{
																	"equals": true,
																	"key": "restriction",
																	"value": "{{test_user_restriction}}",
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "user_id",
																	"value": "{{test_user_id}}"
																}
															]
														},
														"description": "Vérifie qu'on ne puisse pas changer le login"
													},
													"response": []
												},
												{
													"name": "Test update user login",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c2503dc2-e2fb-44d3-a2d5-b0a59a501471",
																"type": "text/javascript",
																"exec": [
																	"// Test la présence de réponse",
																	"if(pm.response.responseSize === 0){",
																	"    tests['No response'] = false",
																	"    return null;",
																	"}",
																	"",
																	"// Tests contenu",
																	"var jsonData = pm.response.json();",
																	"tests[\"users is ok\"] = jsonData.users instanceof Array",
																	"tests[\"login is ok\"] = jsonData.users[0].login !== pm.environment.get(\"test_user_login\"); // Vérifie que le login n'a pas été changé",
																	"",
																	"// Nettoyage variables ",
																	"pm.environment.unset(\"test_user_attributes\");",
																	""
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "50146028-a4e8-4a2d-961c-bdea9bd378d4",
																"type": "text/javascript",
																"exec": [
																	"pm.environment.set(\"test_user_attributes\", \"\");"
																]
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json, application/x-vm-json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&attributs={{test_user_attributes}}",
															"protocol": "https",
															"host": [
																"{{host}}"
															],
															"path": [
																"rest",
																"vitis",
																"users",
																":user_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{main_token}}",
																	"equals": true
																},
																{
																	"key": "attributs",
																	"value": "{{test_user_attributes}}",
																	"equals": true
																}
															],
															"variable": [
																{
																	"key": "user_id",
																	"value": "{{test_user_id}}"
																}
															]
														},
														"description": "Test: vérifie le précédent PUT"
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"id": "79abfb54-f79b-45db-a801-c22fe280d31c",
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"id": "96a93803-55a4-4870-afd0-9381a7e9909d",
														"type": "text/javascript"
													}
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "Groups",
											"item": [
												{
													"name": "Wrong user groups",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "9e8a6df5-5b02-4ad7-b228-c09fc8e37261",
																"type": "text/javascript",
																"exec": [
																	"pm.environment.set(\"error_test\", true);",
																	"pm.environment.set(\"test_wrong_user_groups\", \"255|256\");"
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "8da6693a-083e-4101-a05c-fc9f62916e01",
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json, application/x-vm-json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&groups={{test_wrong_user_groups}}",
															"protocol": "https",
															"host": [
																"{{host}}"
															],
															"path": [
																"rest",
																"vitis",
																"users",
																":user_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{main_token}}",
																	"equals": true
																},
																{
																	"key": "login",
																	"value": "{{login}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "name",
																	"value": "{{test_user_name}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "email",
																	"value": "{{test_user_email}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "company",
																	"value": "{{test_user_company}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "department",
																	"value": "{{test_user_department}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "groups",
																	"value": "{{test_wrong_user_groups}}",
																	"equals": true
																},
																{
																	"key": "privileges",
																	"value": "{{test_user_privileges}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "ip_constraint",
																	"value": "{{test_user_ip_constraint}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "password",
																	"value": "{{password}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "password_confirm",
																	"value": "{{password_confirm}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "restriction",
																	"value": "{{test_user_restriction}}",
																	"equals": true,
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "user_id",
																	"value": "{{test_user_id}}"
																}
															]
														},
														"description": "Des-associe les groupes"
													},
													"response": []
												},
												{
													"name": "Test wrong user groups",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "4c11e483-facc-4cae-a660-d74dc1d1a9b4",
																"type": "text/javascript",
																"exec": [
																	"// Test la présence de réponse",
																	"if(pm.response.responseSize === 0){",
																	"    tests['No response'] = false",
																	"    return null;",
																	"}",
																	"",
																	"// Tests contenu",
																	"var jsonData = pm.response.json();",
																	"tests[\"groups is ok\"] = jsonData.users[0].groups === \"\";",
																	"",
																	"// Nettoyage variables ",
																	"pm.environment.unset(\"test_user_attributes\");",
																	"pm.environment.unset(\"test_wrong_user_groups\");"
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "25c063d2-a4a6-42ae-ab96-d33278451a04",
																"type": "text/javascript",
																"exec": [
																	"pm.environment.set(\"test_user_attributes\", \"\");"
																]
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json, application/x-vm-json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&attributs={{test_user_attributes}}",
															"protocol": "https",
															"host": [
																"{{host}}"
															],
															"path": [
																"rest",
																"vitis",
																"users",
																":user_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{main_token}}",
																	"equals": true
																},
																{
																	"key": "attributs",
																	"value": "{{test_user_attributes}}",
																	"equals": true
																}
															],
															"variable": [
																{
																	"key": "user_id",
																	"value": "{{test_user_id}}"
																}
															]
														},
														"description": "Test: vérifie le précédent PUT"
													},
													"response": []
												},
												{
													"name": "Empty user groups",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "a610727e-48ec-4a5e-8bc4-3e1ac3980a1b",
																"type": "text/javascript",
																"exec": [
																	"pm.environment.set(\"test_user_groups\", \"\");"
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "e46cde65-5441-424c-abd1-efeb094ea234",
																"type": "text/javascript",
																"exec": [
																	"// Test la présence de réponse",
																	"if(pm.response.responseSize === 0){",
																	"    tests['No response'] = false",
																	"    return null;",
																	"}",
																	"",
																	"// Tests contenu",
																	"var jsonData = pm.response.json();",
																	"tests[\"user_id is ok\"] = typeof(jsonData.user_id) === \"string\";"
																]
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json, application/x-vm-json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&groups={{test_user_groups}}",
															"protocol": "https",
															"host": [
																"{{host}}"
															],
															"path": [
																"rest",
																"vitis",
																"users",
																":user_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{main_token}}",
																	"equals": true
																},
																{
																	"key": "login",
																	"value": "{{login}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "name",
																	"value": "{{test_user_name}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "email",
																	"value": "{{test_user_email}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "company",
																	"value": "{{test_user_company}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "department",
																	"value": "{{test_user_department}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "groups",
																	"value": "{{test_user_groups}}",
																	"equals": true
																},
																{
																	"key": "privileges",
																	"value": "{{test_user_privileges}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "ip_constraint",
																	"value": "{{test_user_ip_constraint}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "password",
																	"value": "{{password}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "password_confirm",
																	"value": "{{password_confirm}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "restriction",
																	"value": "{{test_user_restriction}}",
																	"equals": true,
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "user_id",
																	"value": "{{test_user_id}}"
																}
															]
														},
														"description": "Des-associe les groupes"
													},
													"response": []
												},
												{
													"name": "Test empty user groups",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "a728f348-ecc1-4077-9e93-2e17eca29cac",
																"type": "text/javascript",
																"exec": [
																	"// Test la présence de réponse",
																	"if(pm.response.responseSize === 0){",
																	"    tests['No response'] = false",
																	"    return null;",
																	"}",
																	"",
																	"// Tests contenu",
																	"var jsonData = pm.response.json();",
																	"tests[\"groups is ok\"] = jsonData.users[0].groups === pm.environment.get(\"test_user_groups\");",
																	"",
																	"// Nettoyage variables ",
																	"pm.environment.unset(\"test_user_attributes\");",
																	""
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "d59d8802-00a7-4a9e-83ff-79b93b2a19d4",
																"type": "text/javascript",
																"exec": [
																	"pm.environment.set(\"test_user_attributes\", \"\");"
																]
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json, application/x-vm-json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&attributs={{test_user_attributes}}",
															"protocol": "https",
															"host": [
																"{{host}}"
															],
															"path": [
																"rest",
																"vitis",
																"users",
																":user_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{main_token}}",
																	"equals": true
																},
																{
																	"key": "attributs",
																	"value": "{{test_user_attributes}}",
																	"equals": true
																}
															],
															"variable": [
																{
																	"key": "user_id",
																	"value": "{{test_user_id}}"
																}
															]
														},
														"description": "Test: vérifie le précédent PUT"
													},
													"response": []
												},
												{
													"name": "Add user groups",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "3022fda0-0d50-4e27-810a-c62b460cd13b",
																"type": "text/javascript",
																"exec": [
																	"pm.environment.set(\"test_user_groups\", pm.environment.get(\"groups\"));"
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "91834f0d-efad-454b-8a78-fe531741e29e",
																"type": "text/javascript",
																"exec": [
																	"// Test la présence de réponse",
																	"if(pm.response.responseSize === 0){",
																	"    tests['No response'] = false",
																	"    return null;",
																	"}",
																	"",
																	"// Tests contenu",
																	"var jsonData = pm.response.json();",
																	"tests[\"user_id is ok\"] = typeof(jsonData.user_id) === \"string\";"
																]
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json, application/x-vm-json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&groups={{test_user_groups}}",
															"protocol": "https",
															"host": [
																"{{host}}"
															],
															"path": [
																"rest",
																"vitis",
																"users",
																":user_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{main_token}}",
																	"equals": true
																},
																{
																	"key": "login",
																	"value": "{{login}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "name",
																	"value": "{{test_user_name}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "email",
																	"value": "{{test_user_email}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "company",
																	"value": "{{test_user_company}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "department",
																	"value": "{{test_user_department}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "groups",
																	"value": "{{test_user_groups}}",
																	"equals": true
																},
																{
																	"key": "privileges",
																	"value": "{{test_user_privileges}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "ip_constraint",
																	"value": "{{test_user_ip_constraint}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "password",
																	"value": "{{password}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "password_confirm",
																	"value": "{{password_confirm}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "restriction",
																	"value": "{{test_user_restriction}}",
																	"equals": true,
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "user_id",
																	"value": "{{test_user_id}}"
																}
															]
														},
														"description": "Ajoute des groupes existants"
													},
													"response": []
												},
												{
													"name": "Test add user groups",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5169e31d-6ee9-46c9-bd54-d51daedaed9e",
																"type": "text/javascript",
																"exec": [
																	"// Test la présence de réponse",
																	"if(pm.response.responseSize === 0){",
																	"    tests['No response'] = false",
																	"    return null;",
																	"}",
																	"",
																	"// Tests contenu",
																	"var jsonData = pm.response.json();",
																	"tests[\"users is ok\"] = jsonData.users instanceof Array",
																	"tests[\"users get is ok\"] = jsonData.users.length === 1;",
																	"tests[\"user_id is ok\"] = jsonData.users[0].user_id === parseInt(pm.environment.get(\"test_user_id\"));",
																	"tests[\"name is ok\"] = jsonData.users[0].name === pm.environment.get(\"test_user_name\");",
																	"tests[\"email is ok\"] = jsonData.users[0].email === pm.environment.get(\"test_user_email\");   ",
																	"tests[\"company is ok\"] = jsonData.users[0].company === pm.environment.get(\"test_user_company\");",
																	"tests[\"department is ok\"] = jsonData.users[0].department === pm.environment.get(\"test_user_department\");",
																	"tests[\"ip_constraint is ok\"] = jsonData.users[0].ip_constraint === pm.environment.get(\"test_user_ip_constraint\");",
																	"tests[\"restriction is ok\"] = jsonData.users[0].restriction === pm.environment.get(\"test_user_restriction\");",
																	"tests[\"groups is ok\"] = jsonData.users[0].groups === pm.environment.get(\"test_user_groups\");",
																	"tests[\"privileges is ok\"] = jsonData.users[0].privileges === pm.environment.get(\"test_user_privileges\");",
																	"",
																	"// Nettoyage variables ",
																	"pm.environment.unset(\"test_user_attributes\");",
																	""
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "d59d8802-00a7-4a9e-83ff-79b93b2a19d4",
																"type": "text/javascript",
																"exec": [
																	"pm.environment.set(\"test_user_attributes\", \"\");"
																]
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json, application/x-vm-json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&attributs={{test_user_attributes}}",
															"protocol": "https",
															"host": [
																"{{host}}"
															],
															"path": [
																"rest",
																"vitis",
																"users",
																":user_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{main_token}}",
																	"equals": true
																},
																{
																	"key": "attributs",
																	"value": "{{test_user_attributes}}",
																	"equals": true
																}
															],
															"variable": [
																{
																	"key": "user_id",
																	"value": "{{test_user_id}}"
																}
															]
														},
														"description": "Test: vérifie le précédent PUT"
													},
													"response": []
												}
											],
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"id": "a457104a-b286-4ef5-9d73-464e7ed8e6aa",
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															""
														],
														"id": "7ed7d232-cdc0-4ecb-9ff4-ffa331be65da",
														"type": "text/javascript"
													}
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "IP constraint",
											"item": [
												{
													"name": "Update IP constraint",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "baadf08e-d737-419c-95a2-4e68d002f1ab",
																"type": "text/javascript",
																"exec": [
																	"// Restriction d'une ip innexistante",
																	"pm.environment.set(\"test_user_ip_constraint\", \"192.168.1.255\");"
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "91834f0d-efad-454b-8a78-fe531741e29e",
																"type": "text/javascript",
																"exec": [
																	"// Test la présence de réponse",
																	"if(pm.response.responseSize === 0){",
																	"    tests['No response'] = false",
																	"    return null;",
																	"}",
																	"",
																	"// Tests contenu",
																	"var jsonData = pm.response.json();",
																	"tests[\"user_id is ok\"] = typeof(jsonData.user_id) === \"string\";"
																]
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json, application/x-vm-json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&ip_constraint={{test_user_ip_constraint}}",
															"protocol": "https",
															"host": [
																"{{host}}"
															],
															"path": [
																"rest",
																"vitis",
																"users",
																":user_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{main_token}}",
																	"equals": true
																},
																{
																	"key": "login",
																	"value": "{{login}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "name",
																	"value": "{{test_user_name}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "email",
																	"value": "{{test_user_email}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "company",
																	"value": "{{test_user_company}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "department",
																	"value": "{{test_user_department}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "groups",
																	"value": "{{test_user_groups}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "privileges",
																	"value": "{{test_user_privileges}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "ip_constraint",
																	"value": "{{test_user_ip_constraint}}",
																	"equals": true
																},
																{
																	"key": "password",
																	"value": "{{password}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "password_confirm",
																	"value": "{{password_confirm}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "restriction",
																	"value": "{{test_user_restriction}}",
																	"equals": true,
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "user_id",
																	"value": "{{test_user_id}}"
																}
															]
														},
														"description": "Request to update User"
													},
													"response": []
												},
												{
													"name": "Test IP constraint",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "5169e31d-6ee9-46c9-bd54-d51daedaed9e",
																"type": "text/javascript",
																"exec": [
																	"// Test la présence de réponse",
																	"if(pm.response.responseSize === 0){",
																	"    tests['No response'] = false",
																	"    return null;",
																	"}",
																	"",
																	"// Tests contenu",
																	"var jsonData = pm.response.json();",
																	"tests[\"users is ok\"] = jsonData.users instanceof Array",
																	"tests[\"users get is ok\"] = jsonData.users.length === 1;",
																	"tests[\"user_id is ok\"] = jsonData.users[0].user_id === parseInt(pm.environment.get(\"test_user_id\"));",
																	"tests[\"name is ok\"] = jsonData.users[0].name === pm.environment.get(\"test_user_name\");",
																	"tests[\"email is ok\"] = jsonData.users[0].email === pm.environment.get(\"test_user_email\");   ",
																	"tests[\"company is ok\"] = jsonData.users[0].company === pm.environment.get(\"test_user_company\");",
																	"tests[\"department is ok\"] = jsonData.users[0].department === pm.environment.get(\"test_user_department\");",
																	"tests[\"ip_constraint is ok\"] = jsonData.users[0].ip_constraint === pm.environment.get(\"test_user_ip_constraint\");",
																	"tests[\"restriction is ok\"] = jsonData.users[0].restriction === pm.environment.get(\"test_user_restriction\");",
																	"tests[\"groups is ok\"] = jsonData.users[0].groups === pm.environment.get(\"test_user_groups\");",
																	"tests[\"privileges is ok\"] = jsonData.users[0].privileges === pm.environment.get(\"test_user_privileges\");",
																	"",
																	"// Nettoyage variables ",
																	"pm.environment.unset(\"test_user_attributes\");",
																	""
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "d59d8802-00a7-4a9e-83ff-79b93b2a19d4",
																"type": "text/javascript",
																"exec": [
																	"pm.environment.set(\"test_user_attributes\", \"\");"
																]
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json, application/x-vm-json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&attributs={{test_user_attributes}}",
															"protocol": "https",
															"host": [
																"{{host}}"
															],
															"path": [
																"rest",
																"vitis",
																"users",
																":user_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{main_token}}",
																	"equals": true
																},
																{
																	"key": "attributs",
																	"value": "{{test_user_attributes}}",
																	"equals": true
																}
															],
															"variable": [
																{
																	"key": "user_id",
																	"value": "{{test_user_id}}"
																}
															]
														},
														"description": "Test: vérifie le précédent PUT"
													},
													"response": []
												},
												{
													"name": "Test IP constraint",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "f68450b4-9c07-412d-a421-3a0455a3dc26",
																"type": "text/javascript",
																"exec": [
																	"// Test la présence de réponse",
																	"if(pm.response.responseSize === 0){",
																	"    tests['No response'] = false",
																	"    return null;",
																	"}",
																	"",
																	"// Tests contenu",
																	"var jsonData = pm.response.json();",
																	"",
																	"// Sort du mode error_test",
																	"pm.environment.set(\"error_test\", false);"
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "41fcc688-478c-4b9e-b4d3-b06d5fc1ab09",
																"type": "text/javascript",
																"exec": [
																	"pm.environment.set(\"error_test\", true);"
																]
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "user",
																	"type": "text",
																	"value": "{{test_user_login}}"
																},
																{
																	"key": "password",
																	"type": "text",
																	"value": "{{test_user_password}}"
																},
																{
																	"key": "duration",
																	"type": "text",
																	"value": "60"
																}
															]
														},
														"url": {
															"raw": "https://{{host}}/rest/vitis/privatetoken",
															"protocol": "https",
															"host": [
																"{{host}}"
															],
															"path": [
																"rest",
																"vitis",
																"privatetoken"
															]
														},
														"description": "Request to get a token"
													},
													"response": []
												},
												{
													"name": "Redo IP constraint",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"id": "7c44ecaa-2387-4fef-875f-d68b8761a5e7",
																"type": "text/javascript",
																"exec": [
																	"// Restriction d'une ip innexistante",
																	"pm.environment.set(\"test_user_ip_constraint\", \"\");"
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"id": "91834f0d-efad-454b-8a78-fe531741e29e",
																"type": "text/javascript",
																"exec": [
																	"// Test la présence de réponse",
																	"if(pm.response.responseSize === 0){",
																	"    tests['No response'] = false",
																	"    return null;",
																	"}",
																	"",
																	"// Tests contenu",
																	"var jsonData = pm.response.json();",
																	"tests[\"user_id is ok\"] = typeof(jsonData.user_id) === \"string\";"
																]
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json, application/x-vm-json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&ip_constraint={{test_user_ip_constraint}}",
															"protocol": "https",
															"host": [
																"{{host}}"
															],
															"path": [
																"rest",
																"vitis",
																"users",
																":user_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{main_token}}",
																	"equals": true
																},
																{
																	"key": "login",
																	"value": "{{login}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "name",
																	"value": "{{test_user_name}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "email",
																	"value": "{{test_user_email}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "company",
																	"value": "{{test_user_company}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "department",
																	"value": "{{test_user_department}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "groups",
																	"value": "{{test_user_groups}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "privileges",
																	"value": "{{test_user_privileges}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "ip_constraint",
																	"value": "{{test_user_ip_constraint}}",
																	"equals": true
																},
																{
																	"key": "password",
																	"value": "{{password}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "password_confirm",
																	"value": "{{password_confirm}}",
																	"equals": true,
																	"disabled": true
																},
																{
																	"key": "restriction",
																	"value": "{{test_user_restriction}}",
																	"equals": true,
																	"disabled": true
																}
															],
															"variable": [
																{
																	"key": "user_id",
																	"value": "{{test_user_id}}"
																}
															]
														},
														"description": "Request to update User"
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete User",
									"item": [
										{
											"name": "Delete User",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8d155bf4-6601-4e62-8134-d68da7f69041",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"users is ok\"] = jsonData.users instanceof Array",
															"tests[\"users get is ok\"] = jsonData.users.length === 1;",
															"tests[\"user_id is ok\"] = parseInt(jsonData.users[0].user_id) === parseInt(pm.environment.get(\"test_user_id\"));"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6c5b4b50-f98b-4b4d-9674-1e5b64da12d7",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users",
														":user_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "{{test_user_id}}"
														}
													]
												},
												"description": "Request to delete User"
											},
											"response": []
										},
										{
											"name": "Test delete user",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8d476dc0-4d5b-4f90-a5d1-acef55fa189f",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"users is ok\"] = jsonData.users instanceof Array",
															"tests[\"users get is ok\"] = jsonData.users.length === 1;",
															"tests[\"user_id is ok\"] = typeof(jsonData.users[0].user_id) === \"undefined\";",
															"tests[\"login is ok\"] = typeof(jsonData.users[0].login) === \"undefined\";",
															"tests[\"name is ok\"] = typeof(jsonData.users[0].name) === \"undefined\";"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d59d8802-00a7-4a9e-83ff-79b93b2a19d4",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_user_attributes\", \"\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&attributs={{test_user_attributes}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users",
														":user_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{test_user_attributes}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "{{test_user_id}}"
														}
													]
												},
												"description": "Test: vérifie le précédent PUT"
											},
											"response": []
										},
										{
											"name": "Add User 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ab1de1b9-e1ce-4d45-9bf7-5d405832d88f",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"user_id is ok\"] = typeof(jsonData.user_id) === \"number\";",
															"",
															"// Variables d'environnement",
															"pm.environment.set(\"test_user_id_1\", jsonData.user_id);"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0bfa03ec-8228-4b1d-83bb-321888b97c76",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_user_login\", \"test_test_user_1\");",
															"pm.environment.set(\"test_user_name\", \"test main user_1\");",
															"pm.environment.set(\"test_user_password\", \"test_test_user_1\");",
															"pm.environment.set(\"test_user_password_confirm\", \"test_test_user_1\");",
															"pm.environment.set(\"test_user_email\",\"test_test_user@test.com\");",
															"pm.environment.set(\"test_user_company\",\"test company\");",
															"pm.environment.set(\"test_user_department\",\"test departement\");",
															"pm.environment.set(\"test_user_groups\", pm.environment.get(\"groups\"));",
															"pm.environment.set(\"test_user_action\", \"\");",
															"pm.environment.set(\"test_user_ip_constraint\", \"\");",
															"pm.environment.set(\"test_user_restriction\", \"%\");",
															"pm.environment.set(\"test_user_privileges\",\"vitis_user\");"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "token",
															"type": "text",
															"value": "{{main_token}}"
														},
														{
															"key": "login",
															"type": "text",
															"value": "{{test_user_login}}"
														},
														{
															"key": "action",
															"type": "text",
															"value": "{{test_user_action}}"
														},
														{
															"key": "name",
															"type": "text",
															"value": "{{test_user_name}}"
														},
														{
															"key": "email",
															"type": "text",
															"value": "{{test_user_email}}"
														},
														{
															"key": "company",
															"type": "text",
															"value": "{{test_user_company}}"
														},
														{
															"key": "department",
															"type": "text",
															"value": "{{test_user_department}}"
														},
														{
															"key": "groups",
															"type": "text",
															"value": "{{test_user_groups}}"
														},
														{
															"key": "privileges",
															"type": "text",
															"value": "{{test_user_privileges}}"
														},
														{
															"key": "ip_constraint",
															"type": "text",
															"value": "{{test_user_ip_constraint}}"
														},
														{
															"key": "password",
															"type": "text",
															"value": "{{test_user_password}}"
														},
														{
															"key": "password_confirm",
															"type": "text",
															"value": "{{test_user_password_confirm}}"
														},
														{
															"key": "restriction",
															"type": "text",
															"value": "{{test_user_restriction}}"
														}
													]
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users"
													]
												},
												"description": "Test: Ajoute l'utilisateur Basic_user"
											},
											"response": []
										},
										{
											"name": "Test add user 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c17e1a0d-35ca-44e0-9999-989d163607e9",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"users is ok\"] = jsonData.users instanceof Array;",
															"tests[\"users get is ok\"] = jsonData.users.length === 1;",
															"tests[\"user_id is ok\"] = jsonData.users[0].user_id === parseInt(pm.environment.get(\"test_user_id_1\"));",
															"tests[\"login is ok\"] = jsonData.users[0].login === pm.environment.get(\"test_user_login\");",
															"tests[\"name is ok\"] = jsonData.users[0].name === pm.environment.get(\"test_user_name\");",
															"tests[\"email is ok\"] = jsonData.users[0].email === pm.environment.get(\"test_user_email\");   ",
															"tests[\"company is ok\"] = jsonData.users[0].company === pm.environment.get(\"test_user_company\");",
															"tests[\"department is ok\"] = jsonData.users[0].department === pm.environment.get(\"test_user_department\");",
															"tests[\"ip_constraint is ok\"] = jsonData.users[0].ip_constraint === pm.environment.get(\"test_user_ip_constraint\");",
															"tests[\"restriction is ok\"] = jsonData.users[0].restriction === pm.environment.get(\"test_user_restriction\");",
															"tests[\"groups is ok\"] = jsonData.users[0].groups === pm.environment.get(\"test_user_groups\");",
															"tests[\"privileges is ok\"] = jsonData.users[0].privileges === pm.environment.get(\"test_user_privileges\");",
															"",
															"// Nettoyage variables ",
															"pm.environment.unset(\"test_user_attributes\");",
															""
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d59d8802-00a7-4a9e-83ff-79b93b2a19d4",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_user_attributes\", \"\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&attributs={{test_user_attributes}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users",
														":user_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{test_user_attributes}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "{{test_user_id_1}}"
														}
													]
												},
												"description": "Test: vérifie le précédent PUT"
											},
											"response": []
										},
										{
											"name": "Add User 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "155f5dc9-c36e-43e8-bfd2-7ce141fd40b7",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"user_id is ok\"] = typeof(jsonData.user_id) === \"number\";",
															"",
															"// Variables d'environnement",
															"pm.environment.set(\"test_user_id_2\", jsonData.user_id);"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "7a4df4c2-494c-4dfa-88fb-02f6fb9ecc52",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_user_login\", \"test_test_user_2\");",
															"pm.environment.set(\"test_user_name\", \"test main user_2\");",
															"pm.environment.set(\"test_user_password\", \"test_test_user_2\");",
															"pm.environment.set(\"test_user_password_confirm\", \"test_test_user_2\");",
															"pm.environment.set(\"test_user_email\",\"test_test_user@test.com\");",
															"pm.environment.set(\"test_user_company\",\"test company\");",
															"pm.environment.set(\"test_user_department\",\"test departement\");",
															"pm.environment.set(\"test_user_groups\", pm.environment.get(\"groups\"));",
															"pm.environment.set(\"test_user_action\", \"\");",
															"pm.environment.set(\"test_user_ip_constraint\", \"\");",
															"pm.environment.set(\"test_user_restriction\", \"%\");",
															"pm.environment.set(\"test_user_privileges\",\"vitis_user\");"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "token",
															"type": "text",
															"value": "{{main_token}}"
														},
														{
															"key": "login",
															"type": "text",
															"value": "{{test_user_login}}"
														},
														{
															"key": "action",
															"type": "text",
															"value": "{{test_user_action}}"
														},
														{
															"key": "name",
															"type": "text",
															"value": "{{test_user_name}}"
														},
														{
															"key": "email",
															"type": "text",
															"value": "{{test_user_email}}"
														},
														{
															"key": "company",
															"type": "text",
															"value": "{{test_user_company}}"
														},
														{
															"key": "department",
															"type": "text",
															"value": "{{test_user_department}}"
														},
														{
															"key": "groups",
															"type": "text",
															"value": "{{test_user_groups}}"
														},
														{
															"key": "privileges",
															"type": "text",
															"value": "{{test_user_privileges}}"
														},
														{
															"key": "ip_constraint",
															"type": "text",
															"value": "{{test_user_ip_constraint}}"
														},
														{
															"key": "password",
															"type": "text",
															"value": "{{test_user_password}}"
														},
														{
															"key": "password_confirm",
															"type": "text",
															"value": "{{test_user_password_confirm}}"
														},
														{
															"key": "restriction",
															"type": "text",
															"value": "{{test_user_restriction}}"
														}
													]
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users"
													]
												},
												"description": "Test: Ajoute l'utilisateur Basic_user"
											},
											"response": []
										},
										{
											"name": "Test add user 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4678b720-87ea-403b-bc7a-07dc8daea33d",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"users is ok\"] = jsonData.users instanceof Array",
															"tests[\"users get is ok\"] = jsonData.users.length === 1;",
															"tests[\"user_id is ok\"] = jsonData.users[0].user_id === parseInt(pm.environment.get(\"test_user_id_2\"));",
															"tests[\"login is ok\"] = jsonData.users[0].login === pm.environment.get(\"test_user_login\");",
															"tests[\"name is ok\"] = jsonData.users[0].name === pm.environment.get(\"test_user_name\");",
															"tests[\"email is ok\"] = jsonData.users[0].email === pm.environment.get(\"test_user_email\");   ",
															"tests[\"company is ok\"] = jsonData.users[0].company === pm.environment.get(\"test_user_company\");",
															"tests[\"department is ok\"] = jsonData.users[0].department === pm.environment.get(\"test_user_department\");",
															"tests[\"ip_constraint is ok\"] = jsonData.users[0].ip_constraint === pm.environment.get(\"test_user_ip_constraint\");",
															"tests[\"restriction is ok\"] = jsonData.users[0].restriction === pm.environment.get(\"test_user_restriction\");",
															"tests[\"groups is ok\"] = jsonData.users[0].groups === pm.environment.get(\"test_user_groups\");",
															"tests[\"privileges is ok\"] = jsonData.users[0].privileges === pm.environment.get(\"test_user_privileges\");",
															"",
															"// Nettoyage variables ",
															"pm.environment.unset(\"test_user_attributes\");",
															""
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d59d8802-00a7-4a9e-83ff-79b93b2a19d4",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_user_attributes\", \"\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&attributs={{test_user_attributes}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users",
														":user_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{test_user_attributes}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "{{test_user_id_2}}"
														}
													]
												},
												"description": "Test: vérifie le précédent PUT"
											},
											"response": []
										},
										{
											"name": "Delete Users",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "70c2b63a-5081-4a32-8ad6-9360b14aad44",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"users is ok\"] = jsonData.users instanceof Array",
															"tests[\"users get is ok\"] = jsonData.users.length === 2;",
															"tests[\"user_id is ok\"] = parseInt(jsonData.users[0].user_id) === parseInt(pm.environment.get(\"test_user_id_1\"));",
															"tests[\"user_id is ok\"] = parseInt(jsonData.users[1].user_id) === parseInt(pm.environment.get(\"test_user_id_2\"));"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6c5b4b50-f98b-4b4d-9674-1e5b64da12d7",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users?token={{main_token}}&idList={{test_user_id_1}}|{{test_user_id_2}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "idList",
															"value": "{{test_user_id_1}}|{{test_user_id_2}}",
															"equals": true
														}
													]
												},
												"description": "Request to delete User"
											},
											"response": []
										},
										{
											"name": "Test delete users",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "576b76cc-626f-48d7-9b44-3fd42bb5f936",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"users is ok\"] = jsonData.users instanceof Array",
															"tests[\"users get is ok\"] = jsonData.users.length === 1;",
															"tests[\"user_id is ok\"] = typeof(jsonData.users[0].user_id) === \"undefined\";",
															"tests[\"login is ok\"] = typeof(jsonData.users[0].login) === \"undefined\";",
															"tests[\"name is ok\"] = typeof(jsonData.users[0].name) === \"undefined\";",
															""
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d59d8802-00a7-4a9e-83ff-79b93b2a19d4",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_user_attributes\", \"\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&attributs={{test_user_attributes}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users",
														":user_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{test_user_attributes}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "{{test_user_id}}"
														}
													]
												},
												"description": "Test: vérifie le précédent PUT"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Without rights",
									"item": [
										{
											"name": "Add User",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "df5a93b6-2ffc-467a-bc70-b56f59c6594c",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"user_id is ok\"] = typeof(jsonData.user_id) === \"number\";",
															"",
															"// Variables d'environnement",
															"pm.environment.set(\"test_user_id\", jsonData.user_id);"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "86620d36-8d4b-4d53-80f6-03f30d4686c4",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_user_login\", \"test_test_user\");",
															"pm.environment.set(\"test_user_name\", \"test main user\");",
															"pm.environment.set(\"test_user_password\", \"test_test_user\");",
															"pm.environment.set(\"test_user_password_confirm\", \"test_test_user\");",
															"pm.environment.set(\"test_user_email\",\"test_test_user@test.com\");",
															"pm.environment.set(\"test_user_company\",\"test company\");",
															"pm.environment.set(\"test_user_department\",\"test departement\");",
															"pm.environment.set(\"test_user_groups\", pm.environment.get(\"groups\"));",
															"pm.environment.set(\"test_user_action\", \"\");",
															"pm.environment.set(\"test_user_ip_constraint\", \"\");",
															"pm.environment.set(\"test_user_restriction\", \"%\");",
															"pm.environment.set(\"test_user_privileges\",\"vitis_user\");"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "token",
															"type": "text",
															"value": "{{main_token}}"
														},
														{
															"key": "login",
															"type": "text",
															"value": "{{test_user_login}}"
														},
														{
															"key": "action",
															"type": "text",
															"value": "{{test_user_action}}"
														},
														{
															"key": "name",
															"type": "text",
															"value": "{{test_user_name}}"
														},
														{
															"key": "email",
															"type": "text",
															"value": "{{test_user_email}}"
														},
														{
															"key": "company",
															"type": "text",
															"value": "{{test_user_company}}"
														},
														{
															"key": "department",
															"type": "text",
															"value": "{{test_user_department}}"
														},
														{
															"key": "groups",
															"type": "text",
															"value": "{{test_user_groups}}",
															"disabled": true
														},
														{
															"key": "privileges",
															"type": "text",
															"value": "{{test_user_privileges}}"
														},
														{
															"key": "ip_constraint",
															"type": "text",
															"value": "{{test_user_ip_constraint}}"
														},
														{
															"key": "password",
															"type": "text",
															"value": "{{test_user_password}}"
														},
														{
															"key": "password_confirm",
															"type": "text",
															"value": "{{test_user_password_confirm}}"
														},
														{
															"key": "restriction",
															"type": "text",
															"value": "{{test_user_restriction}}"
														}
													]
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users"
													]
												},
												"description": "Test: Ajoute l'utilisateur Basic_user"
											},
											"response": []
										},
										{
											"name": "Add User (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ffaad559-40c1-4b24-b978-6d2f37b5e488",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false",
															"    return null;",
															"}",
															"pm.environment.set(\"error_test\", false);"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "b3e1a2c8-d407-4ed5-b3dc-b85283a9c64a",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"error_test\", true);",
															"pm.environment.set(\"test_user_login\", \"test_test_user\");",
															"pm.environment.set(\"test_user_name\", \"test main user\");",
															"pm.environment.set(\"test_user_password\", \"test_test_user\");",
															"pm.environment.set(\"test_user_password_confirm\", \"test_test_user\");",
															"pm.environment.set(\"test_user_email\",\"test_test_user@test.com\");",
															"pm.environment.set(\"test_user_company\",\"test company\");",
															"pm.environment.set(\"test_user_department\",\"test departement\");",
															"pm.environment.set(\"test_user_groups\", pm.environment.get(\"groups\"));",
															"pm.environment.set(\"test_user_action\", \"\");",
															"pm.environment.set(\"test_user_ip_constraint\", \"\");",
															"pm.environment.set(\"test_user_restriction\", \"%\");",
															"pm.environment.set(\"test_user_privileges\",\"vitis_user\");"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/x-www-form-urlencoded"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "token",
															"type": "text",
															"value": "{{test_user_token}}"
														},
														{
															"key": "login",
															"type": "text",
															"value": "{{test_user_login}}"
														},
														{
															"key": "action",
															"type": "text",
															"value": "{{test_user_action}}"
														},
														{
															"key": "name",
															"type": "text",
															"value": "{{test_user_name}}"
														},
														{
															"key": "email",
															"type": "text",
															"value": "{{test_user_email}}"
														},
														{
															"key": "company",
															"type": "text",
															"value": "{{test_user_company}}"
														},
														{
															"key": "department",
															"type": "text",
															"value": "{{test_user_department}}"
														},
														{
															"key": "groups",
															"type": "text",
															"value": "{{test_user_groups}}"
														},
														{
															"key": "privileges",
															"type": "text",
															"value": "{{test_user_privileges}}"
														},
														{
															"key": "ip_constraint",
															"type": "text",
															"value": "{{test_user_ip_constraint}}"
														},
														{
															"key": "password",
															"type": "text",
															"value": "{{test_user_password}}"
														},
														{
															"key": "password_confirm",
															"type": "text",
															"value": "{{test_user_password_confirm}}"
														},
														{
															"key": "restriction",
															"type": "text",
															"value": "{{test_user_restriction}}"
														}
													]
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users"
													]
												},
												"description": "Test: Ajoute l'utilisateur Basic_user"
											},
											"response": []
										},
										{
											"name": "Get Simple User (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "838e7b9b-847d-4492-bf54-2d52fcb1f8c0",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Nettoyage variables ",
															"pm.environment.unset(\"test_user_attributes\");"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "efcdca65-630f-4d89-869e-24e5b4d31ef7",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_user_attributes\", \"\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{simple_user_token}}&attributs={{test_user_attributes}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users",
														":user_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{test_user_attributes}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "{{simple_user_id}}"
														}
													]
												},
												"description": "Test: vérifie le précédent PUT"
											},
											"response": []
										},
										{
											"name": "Get Other User (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"var jsonData = pm.response.json();",
															"",
															"// Tests contenu",
															"/*tests[\"users is ok\"] = jsonData.users instanceof Array;",
															"tests[\"users get is ok\"] = jsonData.users.length === 1;",
															"tests[\"user_id is ok\"] = jsonData.users[0].user_id === parseInt(pm.environment.get(\"test_user_id\"));",
															"tests[\"login is ok\"] = jsonData.users[0].login === pm.environment.get(\"test_user_login\");",
															"tests[\"name is ok\"] = jsonData.users[0].name === pm.environment.get(\"test_user_name\");",
															"tests[\"email is ok\"] = jsonData.users[0].email === pm.environment.get(\"test_user_email\");   ",
															"tests[\"company is ok\"] = jsonData.users[0].company === pm.environment.get(\"test_user_company\");",
															"tests[\"department is ok\"] = jsonData.users[0].department === pm.environment.get(\"test_user_department\");",
															"tests[\"ip_constraint is ok\"] = jsonData.users[0].ip_constraint === pm.environment.get(\"test_user_ip_constraint\");",
															"tests[\"restriction is ok\"] = jsonData.users[0].restriction === pm.environment.get(\"test_user_restriction\");",
															"tests[\"groups is ok\"] = jsonData.users[0].groups === pm.environment.get(\"test_user_groups\");",
															"tests[\"privileges is ok\"] = jsonData.users[0].privileges === pm.environment.get(\"test_user_privileges\");*/",
															"pm.environment.set(\"error_test\", false);",
															"/*var variable;",
															"for(var param in jsonData.users[0]){",
															"    variable = \"get_users_\" + param;",
															"    if(jsonData.users[0][param] != null){",
															"        if(pm.environment.get(variable) != null){",
															"            tests[param+ \" is ok\"] = jsonData.users[0][param] == pm.environment.get(variable);",
															"        }else{",
															"            tests[param+ \" parameter was returned too with a : \" + typeof(jsonData.users[0][param])] = true;",
															"        }",
															"    }else if(jsonData.users[0][param] == null && pm.environment.get(variable) == (\"\" || null)){",
															"        tests[param+ \" is supposed ok (return filled with null argument)\"] = true;",
															"    }else{",
															"        tests[\"! Warning ! \"+ param + \" isn't ok\" ] = false;",
															"    }",
															"    pm.environment.unset(variable);",
															"}",
															"*/",
															"// Nettoyage variables ",
															"pm.environment.unset(\"test_user_attributes\");"
														],
														"id": "1b3210a8-ab2b-4642-b116-5c82455dcbff",
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"error_test\", true);",
															"pm.environment.set(\"test_user_attributes\", \"\");"
														],
														"id": "b3460667-c957-4afe-a836-1e9b3993d842",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{test_user_token}}&attributs={{test_user_attributes}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users",
														":user_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{test_user_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{test_user_attributes}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "{{test_user_id}}"
														}
													]
												},
												"description": "Test: vérifie le précédent PUT"
											},
											"response": []
										},
										{
											"name": "Get Users (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8fa2f6aa-9c09-4c77-8b56-62985572e153",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"users is ok\"] = jsonData.users instanceof Array;",
															"",
															"//Get parameters name for later tests",
															"var order_by;",
															"var filter;",
															"    for(var param in jsonData.users[0]){",
															"        order_by = param;",
															"        filter = jsonData.users[0][param];",
															"        if(jsonData.users[0][param] !== null){",
															"            break;",
															"        }",
															"    }",
															"",
															"//Tests order_by and sort_order",
															"var sort = true;",
															"var varA, varB = null;",
															"var ordsortjsonData;",
															"",
															"//Send request with order_by variable name in ASC order",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/users?token=\"+pm.environment.get(\"main_token\")+\"&order_by=\"+order_by+\"&sort_order=asc\", function (err, ordsortResponse) {",
															"    ordsortjsonData = ordsortResponse.json();",
															"    ",
															"//Check sort",
															"    for(var parameter in ordsortjsonData.users){",
															"        varB = ordsortjsonData.users[parameter][order_by];",
															"        if(varB !== null && varA !== null){",
															"            if(varA > varB){ ",
															"                sort = false;",
															"                break;",
															"            }",
															"        }",
															"        varA = varB;",
															"    }",
															"    pm.test(\"order_by and sort_order is ok\", function () {pm.expect(sort).to.be.true});",
															"});",
															"",
															"//Tests limit and offset",
															"var maxListCount, firstparamName, lastparamName, paramName, limoffjsonData;",
															"var lim = true, off = true;",
															"",
															"//Setup limit and offset check parameters",
															"if(jsonData.list_count > 1){",
															"    maxListCount = parseInt(jsonData.list_count) - 1 ;",
															"    firstparamName = jsonData.users[0][order_by];",
															"    lastparamName = jsonData.users[parseInt(maxListCount)][order_by];",
															"    maxListCount--;",
															"    ",
															"//Send request with limit at maxListCount -1 and offset at 1",
															"    pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/users?token=\"+pm.environment.get(\"main_token\")+\"&limit=\"+ parseInt(maxListCount) +\"&offset=1\", function (err, limoffResponse) {",
															"        limoffjsonData = limoffResponse.json();",
															"    ",
															"//Check limit and offset result",
															"        for(var parameter in limoffjsonData.attjsonData){",
															"            paramName = limoffjsonData.users[parameter][order_by];",
															"            if(paramName === firstparamName){",
															"                off = false;",
															"            }",
															"            if(paramName === lastparamName){",
															"                lim = false;",
															"            }",
															"        }",
															"        pm.test(\"offset is ok\", function () {pm.expect(off).to.be.true});",
															"        pm.test(\"limit is ok\", function () {pm.expect(lim).to.be.true});",
															"    });",
															"}",
															"",
															"//Test attributes",
															"var attjsonData;",
															"var att = true;",
															"",
															"//Send request to get only the order_by variable name attribute",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/users?token=\"+pm.environment.get(\"main_token\")+\"&attributs=\"+order_by, function (err, attResponse) {",
															"    attjsonData = attResponse.json();",
															"",
															"//Check attribute ",
															"    for(var parameter in attjsonData.users){",
															"        for(var attparam in attjsonData.users[parameter]){",
															"            if(attparam !== order_by){",
															"                att = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"attribute is ok\", function () {pm.expect(att).to.be.true});",
															"});",
															"",
															"//Test filter",
															"var fltrjson = JSON.stringify({'column': order_by, 'compare_operator': '=', 'value': filter});",
															"var fltrjsonData;",
															"var fltr = true;",
															"",
															"//Send request with filter argument",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/users?token=\"+pm.environment.get(\"main_token\")+\"&filter=\"+fltrjson, function (err, fltrResponse) {",
															"    fltrjsonData = fltrResponse.json();",
															"",
															"//Check filter",
															"    for(var parameter in fltrjsonData.users){",
															"        for(var fltrparam in fltrjsonData.users[parameter]){",
															"            var tmp = fltrjsonData.users[parameter][fltrparam];",
															"            if(fltrparam === order_by && tmp !== filter){",
															"                fltr = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"filter is ok\", function () {pm.expect(fltr).to.be.true});",
															"});",
															"",
															"//Save variable for without 's' next test",
															"",
															"",
															"//Clean variables",
															"pm.environment.unset(\"get_users_order_by\");",
															"pm.environment.unset(\"get_users_sort_order\");",
															"pm.environment.unset(\"get_users_limit\");",
															"pm.environment.unset(\"get_users_offset\");",
															"pm.environment.unset(\"get_users_attributs\");",
															"pm.environment.unset(\"get_users_filter\");",
															"pm.environment.unset(\"get_users_distinct\");",
															"",
															"",
															""
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "70eb3640-d9e4-4570-a7c2-0c9ecddc2366",
														"type": "text/javascript",
														"exec": [
															"",
															"if(typeof(pm.environment.get(\"test_user_attributes\")) == \"undefined\")",
															"\tpm.environment.set(\"test_user_attributes\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_users_order_by\")) == \"undefined\")",
															"\tpm.environment.set(\"get_users_order_by\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_users_sort_order\")) == \"undefined\")",
															"\tpm.environment.set(\"get_users_sort_order\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_users_limit\")) == \"undefined\")",
															"\tpm.environment.set(\"get_users_limit\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_users_offset\")) == \"undefined\")",
															"\tpm.environment.set(\"get_users_offset\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_users_attributs\")) == \"undefined\")",
															"\tpm.environment.set(\"get_users_attributs\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_users_filter\")) == \"undefined\")",
															"\tpm.environment.set(\"get_users_filter\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_users_distinct\")) == \"undefined\")",
															"\tpm.environment.set(\"get_users_distinct\", \"\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users/?token={{simple_user_token}}&order_by={{get_users_order_by}}&sort_order={{get_users_sort_order}}&limit={{get_users_limit}}&offset={{get_users_offset}}&attributs={{get_users_attributs}}&filter={{get_users_filter}}&distinct={{get_users_distinct}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users",
														""
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														},
														{
															"key": "order_by",
															"value": "{{get_users_order_by}}",
															"equals": true
														},
														{
															"key": "sort_order",
															"value": "{{get_users_sort_order}}",
															"equals": true
														},
														{
															"key": "limit",
															"value": "{{get_users_limit}}",
															"equals": true
														},
														{
															"key": "offset",
															"value": "{{get_users_offset}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{get_users_attributs}}",
															"equals": true
														},
														{
															"key": "filter",
															"value": "{{get_users_filter}}",
															"equals": true
														},
														{
															"key": "distinct",
															"value": "{{get_users_distinct}}",
															"equals": true
														}
													]
												},
												"description": "Test: vérifie le précédent PUT"
											},
											"response": []
										},
										{
											"name": "Update User (without rights)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7311d720-0253-4ed5-a1f8-a38fc0b51ccb",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"error_test\", true);",
															"pm.environment.set(\"test_user_name\", \"test main user edited\");",
															"pm.environment.set(\"test_user_email\",\"test_test_user_edited@test.com\");",
															"pm.environment.set(\"test_user_company\",\"test company edited\");",
															"pm.environment.set(\"test_user_department\",\"test departement edited\");",
															"// pm.environment.set(\"test_user_groups\", \"\");",
															"// pm.environment.set(\"test_user_action\", \"\");",
															"pm.environment.set(\"test_user_ip_constraint\", \"\");",
															"pm.environment.set(\"test_user_restriction\", \"%\");",
															"pm.environment.set(\"test_user_privileges\",\"vitis_user|vitis_admin\");",
															"",
															"",
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "60a77984-e09a-4fed-90b6-2f9c71f7bd8b",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false",
															"    return null;",
															"}",
															"pm.environment.set(\"error_test\", false);"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{test_user_token}}&name={{test_user_name}}&email={{test_user_email}}&company={{test_user_company}}&department={{test_user_department}}&groups={{test_user_groups}}&privileges={{test_user_privileges}}&ip_constraint={{test_user_ip_constraint}}&restriction={{test_user_restriction}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users",
														":user_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{test_user_token}}",
															"equals": true
														},
														{
															"equals": true,
															"key": "login",
															"value": "{{login}}",
															"disabled": true
														},
														{
															"key": "name",
															"value": "{{test_user_name}}",
															"equals": true
														},
														{
															"key": "email",
															"value": "{{test_user_email}}",
															"equals": true
														},
														{
															"key": "company",
															"value": "{{test_user_company}}",
															"equals": true
														},
														{
															"key": "department",
															"value": "{{test_user_department}}",
															"equals": true
														},
														{
															"key": "groups",
															"value": "{{test_user_groups}}",
															"equals": true
														},
														{
															"key": "privileges",
															"value": "{{test_user_privileges}}",
															"equals": true
														},
														{
															"key": "ip_constraint",
															"value": "{{test_user_ip_constraint}}",
															"equals": true
														},
														{
															"equals": true,
															"key": "password",
															"value": "{{password}}",
															"disabled": true
														},
														{
															"equals": true,
															"key": "password_confirm",
															"value": "{{password_confirm}}",
															"disabled": true
														},
														{
															"key": "restriction",
															"value": "{{test_user_restriction}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "{{test_user_id}}"
														}
													]
												},
												"description": "Request to update User"
											},
											"response": []
										},
										{
											"name": "Delete User (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3f490ec1-7bff-462b-a95b-69eddb69e456",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false",
															"    return null;",
															"}",
															"pm.environment.set(\"error_test\", false);"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5fd7d5e1-44b5-49c7-a9ae-bac03b2d8260",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"error_test\", true);"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{test_user_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users",
														":user_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{test_user_token}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "{{test_user_id}}"
														}
													]
												},
												"description": "Request to delete User"
											},
											"response": []
										},
										{
											"name": "Delete Users (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b161caa7-dc62-479d-ae9d-7350d550cf68",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false",
															"    return null;",
															"}",
															"pm.environment.set(\"error_test\", false);"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "c923cb12-612f-498b-be10-763aa7653c97",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"error_test\", true);"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users?token={{test_user_token}}&idList={{test_user_id_1}}|{{test_user_id_2}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users"
													],
													"query": [
														{
															"key": "token",
															"value": "{{test_user_token}}",
															"equals": true
														},
														{
															"key": "idList",
															"value": "{{test_user_id_1}}|{{test_user_id_2}}",
															"equals": true
														}
													]
												},
												"description": "Request to delete User"
											},
											"response": []
										},
										{
											"name": "Delete User",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "8d155bf4-6601-4e62-8134-d68da7f69041",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"users is ok\"] = jsonData.users instanceof Array",
															"tests[\"users get is ok\"] = jsonData.users.length === 1;",
															"tests[\"user_id is ok\"] = parseInt(jsonData.users[0].user_id) === parseInt(pm.environment.get(\"test_user_id\"));"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "0ecd1b2c-a4fd-4eea-914c-ca7139dc36de",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"error_test\", false);"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users",
														":user_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "{{test_user_id}}"
														}
													]
												},
												"description": "Request to delete User"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "End",
									"item": [
										{
											"name": "Clear variables",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "389d9eba-f674-4158-a810-2fa8928a74fd",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false",
															"    return null;",
															"}",
															"",
															"// Nettoyage variables ",
															"pm.environment.unset(\"test_user_attributes\");",
															"pm.environment.unset(\"test_user_login\");",
															"pm.environment.unset(\"test_user_name\");",
															"pm.environment.unset(\"test_user_password\");",
															"pm.environment.unset(\"test_user_password_confirm\");",
															"pm.environment.unset(\"test_user_email\");",
															"pm.environment.unset(\"test_user_company\");",
															"pm.environment.unset(\"test_user_department\");",
															"pm.environment.unset(\"test_user_groups\");",
															"pm.environment.unset(\"test_user_action\");",
															"pm.environment.unset(\"test_user_ip_constraint\");",
															"pm.environment.unset(\"test_user_restriction\");",
															"pm.environment.unset(\"test_user_privileges\");",
															"pm.environment.unset(\"test_user_id\");",
															"pm.environment.unset(\"test_user_id_1\");",
															"pm.environment.unset(\"test_user_id_2\");",
															""
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "d59d8802-00a7-4a9e-83ff-79b93b2a19d4",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_user_attributes\", \"\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&attributs={{test_user_attributes}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users",
														":user_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{test_user_attributes}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "{{test_user_id}}"
														}
													]
												},
												"description": "Test: vérifie le précédent PUT"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"id": "5cce1bb7-dc93-4144-bd78-17082902d721",
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"id": "b445141b-bdfe-4a0d-9a2e-609a7fec9d32",
										"type": "text/javascript"
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Groups",
							"item": [
								{
									"name": "Add Group",
									"item": [
										{
											"name": "Add Group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4d3f28aa-1b06-4b30-84c2-14665597ed65",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"group_id is ok\"] = typeof(jsonData.group_id) === \"number\";",
															"",
															"// Variables d'environnement",
															"pm.environment.set(\"test_group_id\", jsonData.group_id);"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5fb5526c-6ef6-4120-947a-cff95f29b014",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_group_name\", \"test_test_group\");",
															"pm.environment.set(\"test_group_users\", pm.environment.get(\"main_admin_id\"));",
															""
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"type": "text"
														},
														{
															"key": "name",
															"value": "{{test_group_name}}",
															"type": "text"
														},
														{
															"key": "users",
															"value": "{{test_group_users}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups"
													]
												},
												"description": "Request to add group"
											},
											"response": []
										},
										{
											"name": "Test Add Group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7498ec22-5a64-45cb-b097-800243e75692",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"group is ok\"] = jsonData.groups instanceof Array;",
															"tests[\"group get is ok\"] = jsonData.groups.length === 1;",
															"tests[\"nb_members is ok\"] = jsonData.groups[0].nb_members === 1;",
															"tests[\"group_id is ok\"] = jsonData.groups[0].group_id === parseInt(pm.environment.get(\"test_group_id\"));",
															"tests[\"name is ok\"] = jsonData.groups[0].name === pm.environment.get(\"test_group_name\");",
															"tests[\"group users is ok\"] = jsonData.groups[0].users === parseInt(pm.environment.get(\"main_admin_id\"));",
															"tests[\"groups users_label is ok\"] = jsonData.groups[0].users_label === pm.environment.get(\"admin_user\");",
															"",
															"// Nettoyage variables ",
															"pm.environment.unset(\"test_group_attributes\");"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "60d69516-4c23-4f99-b52b-4e2bb84bd529",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_group_attributes\", \"\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}&attributs={{test_group_attributes}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups",
														":group_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{test_group_attributes}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "group_id",
															"value": "{{test_group_id}}"
														}
													]
												},
												"description": "Request to get Group by id"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Group",
									"item": [
										{
											"name": "Get Groups",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "7f0e0c15-dad8-42b9-8a30-214a871a1ea0",
														"type": "text/javascript",
														"exec": [
															"if(typeof(pm.environment.get(\"get_groups_order_by\")) == \"undefined\")",
															"\tpm.environment.set(\"get_groups_order_by\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_groups_sort_order\")) == \"undefined\")",
															"\tpm.environment.set(\"get_groups_sort_order\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_groups_limit\")) == \"undefined\")",
															"\tpm.environment.set(\"get_groups_limit\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_groups_offset\")) == \"undefined\")",
															"\tpm.environment.set(\"get_groups_offset\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_groups_attributs\")) == \"undefined\")",
															"\tpm.environment.set(\"get_groups_attributs\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_groups_filter\")) == \"undefined\")",
															"\tpm.environment.set(\"get_groups_filter\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_groups_distinct\")) == \"undefined\")",
															"\tpm.environment.set(\"get_groups_distinct\", \"\");"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "845800b1-edff-441a-82b8-a170ccf1b847",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"groups is ok\"] = jsonData.groups instanceof Array;",
															"",
															"//Get parameters name for later tests",
															"var order_by;",
															"var filter;",
															"    for(var param in jsonData.groups[0]){",
															"        order_by = param;",
															"        filter = jsonData.groups[0][param];",
															"        if(jsonData.groups[0][param] !== null){",
															"            break;",
															"        }",
															"    }",
															"",
															"//Tests order_by and sort_order",
															"var sort = true;",
															"var varA, varB = null;",
															"var ordsortjsonData;",
															"",
															"//Send request with order_by variable name in ASC order",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/groups?token=\"+pm.environment.get(\"main_token\")+\"&order_by=\"+order_by+\"&sort_order=asc\", function (err, ordsortResponse) {",
															"    ordsortjsonData = ordsortResponse.json();",
															"    ",
															"//Check sort",
															"    for(var parameter in ordsortjsonData.groups){",
															"        varB = ordsortjsonData.groups[parameter][order_by];",
															"        if(varB !== null && varA !== null){",
															"            if(varA > varB){ ",
															"                sort = false;",
															"                break;",
															"            }",
															"        }",
															"        varA = varB;",
															"    }",
															"    pm.test(\"order_by and sort_order is ok\", function () {pm.expect(sort).to.be.true});",
															"});",
															"",
															"//Tests limit and offset",
															"var maxListCount, firstparamName, lastparamName, paramName, limoffjsonData;",
															"var lim = true, off = true;",
															"",
															"//Setup limit and offset check parameters",
															"if(jsonData.list_count > 1){",
															"    maxListCount = parseInt(jsonData.list_count) - 1 ;",
															"    firstparamName = jsonData.groups[0][order_by];",
															"    lastparamName = jsonData.groups[parseInt(maxListCount)][order_by];",
															"    maxListCount--;",
															"    ",
															"//Send request with limit at maxListCount -1 and offset at 1",
															"    pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/groups?token=\"+pm.environment.get(\"main_token\")+\"&limit=\"+ parseInt(maxListCount) +\"&offset=1\", function (err, limoffResponse) {",
															"        limoffjsonData = limoffResponse.json();",
															"    ",
															"//Check limit and offset result",
															"        for(var parameter in limoffjsonData.attjsonData){",
															"            paramName = limoffjsonData.groups[parameter][order_by];",
															"            if(paramName === firstparamName){",
															"                off = false;",
															"            }",
															"            if(paramName === lastparamName){",
															"                lim = false;",
															"            }",
															"        }",
															"        pm.test(\"offset is ok\", function () {pm.expect(off).to.be.true});",
															"        pm.test(\"limit is ok\", function () {pm.expect(lim).to.be.true});",
															"    });",
															"}",
															"",
															"//Test attributes",
															"var attjsonData;",
															"var att = true;",
															"",
															"//Send request to get only the order_by variable name attribute",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/groups?token=\"+pm.environment.get(\"main_token\")+\"&attributs=\"+order_by, function (err, attResponse) {",
															"    attjsonData = attResponse.json();",
															"",
															"//Check attribute ",
															"    for(var parameter in attjsonData.groups){",
															"        for(var attparam in attjsonData.groups[parameter]){",
															"            if(attparam !== order_by){",
															"                att = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"attribute is ok\", function () {pm.expect(att).to.be.true});",
															"});",
															"",
															"//Test filter",
															"var fltrjson = JSON.stringify({'column': order_by, 'compare_operator': '=', 'value': filter});",
															"var fltrjsonData;",
															"var fltr = true;",
															"",
															"//Send request with filter argument",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/groups?token=\"+pm.environment.get(\"main_token\")+\"&filter=\"+fltrjson, function (err, fltrResponse) {",
															"    fltrjsonData = fltrResponse.json();",
															"",
															"//Check filter",
															"    for(var parameter in fltrjsonData.groups){",
															"        for(var fltrparam in fltrjsonData.groups[parameter]){",
															"            var tmp = fltrjsonData.groups[parameter][fltrparam];",
															"            if(fltrparam === order_by && tmp !== filter){",
															"                fltr = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"filter is ok\", function () {pm.expect(fltr).to.be.true});",
															"});",
															"",
															"//Save variable for without 's' next test",
															"for(var param in jsonData.groups[0]){",
															"    var variable = \"get_groups_\" + param;",
															"    pm.environment.set(variable,jsonData.groups[0][param]);",
															"}",
															"",
															"//Clean variables",
															"pm.environment.unset(\"get_groups_order_by\");",
															"pm.environment.unset(\"get_groups_sort_order\");",
															"pm.environment.unset(\"get_groups_limit\");",
															"pm.environment.unset(\"get_groups_offset\");",
															"pm.environment.unset(\"get_groups_attributs\");",
															"pm.environment.unset(\"get_groups_filter\");",
															"pm.environment.unset(\"get_groups_distinct\");",
															"",
															"",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups?token={{main_token}}&order_by={{get_groups_order_by}}&sort_order={{get_groups_sort_order}}&limit={{get_groups_limit}}&offset={{get_groups_offset}}&attributs={{get_groups_attributs}}&filter={{get_groups_filter}}&distinct={{get_groups_distinct}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "order_by",
															"value": "{{get_groups_order_by}}",
															"equals": true
														},
														{
															"key": "sort_order",
															"value": "{{get_groups_sort_order}}",
															"equals": true
														},
														{
															"key": "limit",
															"value": "{{get_groups_limit}}",
															"equals": true
														},
														{
															"key": "offset",
															"value": "{{get_groups_offset}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{get_groups_attributs}}",
															"equals": true
														},
														{
															"key": "filter",
															"value": "{{get_groups_filter}}",
															"equals": true
														},
														{
															"key": "distinct",
															"value": "{{get_groups_distinct}}",
															"equals": true
														}
													]
												},
												"description": "Request to get Groups"
											},
											"response": []
										},
										{
											"name": "Get Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ce205b89-230c-4eae-81de-d4e1f00a3ab0",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_group_attributes\", \"\");"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "ed8ea7ce-0cb2-4878-be87-4e90b1aab816",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"tests[\"group is ok\"] = jsonData.groups instanceof Array;",
															"",
															"var variable;",
															"for(var param in jsonData.groups[0]){",
															"    variable = \"get_groups_\" + param;",
															"    if(jsonData.groups[0][param] != null){",
															"        if(pm.environment.get(variable) != null){",
															"            tests[param+ \" is ok\"] = jsonData.groups[0][param] == pm.environment.get(variable);",
															"        }else{",
															"            tests[param+ \" parameter was returned too with a : \" + typeof(jsonData.groups[0][param])] = true;",
															"        }",
															"    }else if(jsonData.groups[0][param] == null && pm.environment.get(variable) == (\"\" || null)){",
															"        tests[param+ \" is supposed ok (return filled with null argument)\"] = true;",
															"    }else{",
															"        tests[\"! Warning ! \"+ param + \" isn't ok\" ] = false;",
															"    }",
															"    pm.environment.unset(variable);",
															"}",
															"",
															"// Nettoyage variables",
															"pm.environment.unset(\"test_group_attributes\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}&attributs={{test_group_attributes}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups",
														":group_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{test_group_attributes}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "group_id",
															"value": "{{get_groups_group_id}}"
														}
													]
												},
												"description": "Request to get Group by id"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Edit Group",
									"item": [
										{
											"name": "Name",
											"item": [
												{
													"name": "Update Group Name",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "c30e9619-d9b4-49dd-bec7-bbd830137c97",
																"type": "text/javascript",
																"exec": [
																	"// Test la présence de réponse",
																	"if(pm.response.responseSize === 0){",
																	"    tests['No response'] = false;",
																	"    return null;",
																	"}",
																	"",
																	"// Tests contenu",
																	"var jsonData = pm.response.json();",
																	"tests[\"group_id is ok\"] = typeof(jsonData.group_id) === \"string\";"
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "4a16edea-1f50-48ec-8208-77cfdc2c82a5",
																"type": "text/javascript",
																"exec": [
																	"pm.environment.set(\"test_group_name\", \"test_test_group_edited\");",
																	"pm.environment.set(\"test_group_users\", pm.environment.get(\"main_admin_id\"));"
																]
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}&name={{test_group_name}}&users={{test_group_users}}",
															"protocol": "https",
															"host": [
																"{{host}}"
															],
															"path": [
																"rest",
																"vitis",
																"groups",
																":group_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{main_token}}",
																	"equals": true
																},
																{
																	"key": "name",
																	"value": "{{test_group_name}}",
																	"equals": true
																},
																{
																	"key": "users",
																	"value": "{{test_group_users}}",
																	"equals": true
																}
															],
															"variable": [
																{
																	"key": "group_id",
																	"value": "{{test_group_id}}"
																}
															]
														},
														"description": "Request to update Group"
													},
													"response": []
												},
												{
													"name": "Test Edit Group Name",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "acc4999d-35be-4923-b6b4-c67d38cc1402",
																"type": "text/javascript",
																"exec": [
																	"// Test la présence de réponse",
																	"if(pm.response.responseSize === 0){",
																	"    tests['No response'] = false;",
																	"    return null;",
																	"}",
																	"",
																	"// Tests contenu",
																	"var jsonData = pm.response.json();",
																	"tests[\"group is ok\"] = jsonData.groups instanceof Array;",
																	"tests[\"group get is ok\"] = jsonData.groups.length === 1;",
																	"tests[\"nb_members is ok\"] = jsonData.groups[0].nb_members === 1;",
																	"tests[\"group_id is ok\"] = jsonData.groups[0].group_id === parseInt(pm.environment.get(\"test_group_id\"));",
																	"tests[\"name is ok\"] = jsonData.groups[0].name === pm.environment.get(\"test_group_name\");",
																	"tests[\"group users is ok\"] = jsonData.groups[0].users === parseInt(pm.environment.get(\"main_admin_id\"));",
																	"tests[\"groups users_label is ok\"] = jsonData.groups[0].users_label === pm.environment.get(\"admin_user\");",
																	"",
																	"// Nettoyage variables ",
																	"pm.environment.unset(\"test_group_attributes\");"
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "60d69516-4c23-4f99-b52b-4e2bb84bd529",
																"type": "text/javascript",
																"exec": [
																	"pm.environment.set(\"test_group_attributes\", \"\");"
																]
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": ""
														},
														"url": {
															"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}&attributs={{test_group_attributes}}",
															"protocol": "https",
															"host": [
																"{{host}}"
															],
															"path": [
																"rest",
																"vitis",
																"groups",
																":group_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{main_token}}",
																	"equals": true
																},
																{
																	"key": "attributs",
																	"value": "{{test_group_attributes}}",
																	"equals": true
																}
															],
															"variable": [
																{
																	"key": "group_id",
																	"value": "{{test_group_id}}"
																}
															]
														},
														"description": "Request to get Group by id"
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "Users",
											"item": [
												{
													"name": "Get private token (User)",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "4d3702a7-8148-4ebb-a5c5-869ac555d44d",
																"type": "text/javascript",
																"exec": [
																	"// Test la présence de réponse",
																	"if(pm.response.responseSize === 0){",
																	"    tests['No response'] = false",
																	"    return null;",
																	"}",
																	"",
																	"// Tests contenu",
																	"var jsonData = pm.response.json();",
																	"tests[\"token is ok\"] = typeof(jsonData.token) === \"string\";",
																	"tests[\"user is ok\"] = typeof(jsonData.user) === \"string\";",
																	"tests[\"validity_date is ok\"] = typeof(jsonData.validity_date) === \"string\";",
																	"tests[\"user_id is ok\"] = typeof(jsonData.user_id) === \"number\";",
																	"tests[\"privileges is ok\"] = jsonData.privileges instanceof Array",
																	"",
																	"// Variables",
																	"pm.environment.set(\"test_user_token\", jsonData.token);",
																	"pm.environment.set(\"test_user_id\",jsonData.user_id);",
																	"",
																	"// Passe directement à la requête Get token",
																	"// postman.setNextRequest(\"Get token\");"
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "6bd8e739-8151-4208-97aa-a70ed4f78467",
																"type": "text/javascript",
																"exec": [
																	"pm.environment.set(\"error_test\", false);"
																]
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "formdata",
															"formdata": [
																{
																	"key": "user",
																	"type": "text",
																	"value": "{{user_user}}"
																},
																{
																	"key": "password",
																	"type": "text",
																	"value": "{{user_password}}"
																},
																{
																	"key": "duration",
																	"type": "text",
																	"value": "600"
																}
															]
														},
														"url": {
															"raw": "https://{{host}}/rest/vitis/privatetoken",
															"protocol": "https",
															"host": [
																"{{host}}"
															],
															"path": [
																"rest",
																"vitis",
																"privatetoken"
															]
														},
														"description": "Request to get a token"
													},
													"response": []
												},
												{
													"name": "Update Group Users",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.environment.set(\"test_group_name\", \"test_test_group_edited\");"
																],
																"id": "ffbad6a8-2286-4a24-b9f0-fc734c6cc943",
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"// Test la présence de réponse",
																	"if(pm.response.responseSize === 0){",
																	"    tests['No response'] = false;",
																	"    return null;",
																	"}",
																	"",
																	"// Tests contenu",
																	"var jsonData = pm.response.json();",
																	"tests[\"group_id is ok\"] = typeof(jsonData.group_id) === \"string\";"
																],
																"id": "190ecc55-a4d6-4223-9fc6-c9d3ede899a8",
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {},
														"url": {
															"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}&name={{test_group_name}}&users={{main_admin_id}}|{{simple_user_id}}",
															"protocol": "https",
															"host": [
																"{{host}}"
															],
															"path": [
																"rest",
																"vitis",
																"groups",
																":group_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{main_token}}",
																	"equals": true
																},
																{
																	"key": "name",
																	"value": "{{test_group_name}}",
																	"equals": true
																},
																{
																	"key": "users",
																	"value": "{{main_admin_id}}|{{simple_user_id}}",
																	"equals": true
																}
															],
															"variable": [
																{
																	"key": "group_id",
																	"value": "{{test_group_id}}"
																}
															]
														},
														"description": "Request to update Group"
													},
													"response": []
												},
												{
													"name": "Test Edit Group Users",
													"event": [
														{
															"listen": "test",
															"script": {
																"id": "91643505-1d55-44ef-8122-90e5a52f15ad",
																"type": "text/javascript",
																"exec": [
																	"// Test la présence de réponse",
																	"if(pm.response.responseSize === 0){",
																	"    tests['No response'] = false;",
																	"    return null;",
																	"}",
																	"",
																	"// Tests contenu",
																	"var jsonData = pm.response.json();",
																	"tests[\"group is ok\"] = jsonData.groups instanceof Array;",
																	"tests[\"group get is ok\"] = jsonData.groups.length === 1;",
																	"tests[\"nb_members is ok\"] = jsonData.groups[0].nb_members === 2;",
																	"tests[\"group_id is ok\"] = jsonData.groups[0].group_id === parseInt(pm.environment.get(\"test_group_id\"));",
																	"tests[\"name is ok\"] = jsonData.groups[0].name === pm.environment.get(\"test_group_name\");",
																	"var usr = jsonData.groups[0].users.split('|').sort();",
																	"tests[\"users_1 is ok\"] = parseInt(usr[0]) === parseInt(pm.environment.get(\"main_admin_id\"));",
																	"tests[\"users_2 is ok\"] = parseInt(usr[1]) === parseInt(pm.environment.get(\"simple_user_id\"));",
																	"var usr_label = jsonData.groups[0].users_label.split(',').sort();",
																	"tests[\"users_label_1 is ok\"] = usr_label[0] === pm.environment.get(\"admin_user\");",
																	"tests[\"users_label_2 is ok\"] = usr_label[1] === pm.environment.get(\"user_user\");",
																	"",
																	"// Nettoyage variables ",
																	"pm.environment.unset(\"test_user_attributes\");"
																]
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"id": "60d69516-4c23-4f99-b52b-4e2bb84bd529",
																"type": "text/javascript",
																"exec": [
																	"pm.environment.set(\"test_group_attributes\", \"\");"
																]
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [
															{
																"key": "Accept",
																"value": "application/xml, application/json"
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {},
														"url": {
															"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}&attributs={{test_group_attributes}}",
															"protocol": "https",
															"host": [
																"{{host}}"
															],
															"path": [
																"rest",
																"vitis",
																"groups",
																":group_id"
															],
															"query": [
																{
																	"key": "token",
																	"value": "{{main_token}}",
																	"equals": true
																},
																{
																	"key": "attributs",
																	"value": "{{test_group_attributes}}",
																	"equals": true
																}
															],
															"variable": [
																{
																	"key": "group_id",
																	"value": "{{test_group_id}}"
																}
															]
														},
														"description": "Request to get Group by id"
													},
													"response": []
												}
											],
											"_postman_isSubFolder": true
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete Group",
									"item": [
										{
											"name": "Delete Group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "5c89d0f9-a92d-4b83-9907-ff8603b6d5cc",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"group is ok\"] = jsonData.groups instanceof Array;",
															"tests[\"groups get is ok\"] = jsonData.groups.length === 1;",
															"tests[\"grout_id is ok\"] = parseInt(jsonData.groups[0].group_id) === parseInt(pm.environment.get(\"test_group_id\"));"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups",
														":group_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "group_id",
															"value": "{{test_group_id}}"
														}
													]
												},
												"description": "Request to delete Group"
											},
											"response": []
										},
										{
											"name": "Test Delete group",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "77e48fd0-5063-4fa6-af48-b2e3ffd03fdc",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"groups is ok\"] = jsonData.groups instanceof Array;",
															"tests[\"groups get is ok\"] = jsonData.groups.length === 1;",
															"tests[\"groupe_id is ok\"] = typeof(jsonData.groups[0].group_id) === \"undefined\";",
															"tests[\"login is ok\"] = typeof(jsonData.groups[0].login) === \"undefined\";",
															"tests[\"name is ok\"] = typeof(jsonData.groups[0].name) === \"undefined\";",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}&attributs={{test_group_attributes}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups",
														":group_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{test_group_attributes}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "group_id",
															"value": "{{test_group_id}}"
														}
													]
												},
												"description": "Request to get Group by id"
											},
											"response": []
										},
										{
											"name": "Add Group 1",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "800fc2fd-b8fd-4dcd-a5d2-179f626c8e0e",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_group_name\", \"test_test_group_1\");",
															"pm.environment.set(\"test_group_users\", pm.environment.get(\"main_admin_id\"));",
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "56f65c03-d1e3-48bb-823e-2020452d156f",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"group_id is ok\"] = typeof(jsonData.group_id) === \"number\";",
															"",
															"// Variables d'environnement",
															"pm.environment.set(\"test_group_id_1\", jsonData.group_id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"type": "text"
														},
														{
															"key": "name",
															"value": "{{test_group_name}}",
															"type": "text"
														},
														{
															"key": "users",
															"value": "{{test_group_users}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups"
													]
												},
												"description": "Request to add group"
											},
											"response": []
										},
										{
											"name": "Test Add Group 1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "449b174b-8108-49ce-8eda-8e4f6e453541",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"group is ok\"] = jsonData.groups instanceof Array;",
															"tests[\"group get is ok\"] = jsonData.groups.length === 1;",
															"tests[\"nb_members is ok\"] = jsonData.groups[0].nb_members === 1;",
															"tests[\"group_id is ok\"] = jsonData.groups[0].group_id === parseInt(pm.environment.get(\"test_group_id_1\"));",
															"tests[\"name is ok\"] = jsonData.groups[0].name === pm.environment.get(\"test_group_name\");",
															"tests[\"group users is ok\"] = jsonData.groups[0].users === parseInt(pm.environment.get(\"main_admin_id\"));",
															"tests[\"groups users_label is ok\"] = jsonData.groups[0].users_label === pm.environment.get(\"admin_user\");",
															"",
															"// Nettoyage variables ",
															"pm.environment.unset(\"test_group_attributes\");"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "95bd7292-c3db-4d91-b54f-1fb8b89c4614",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_group_attributes\", \"\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}&attributs={{test_group_attributes}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups",
														":group_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{test_group_attributes}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "group_id",
															"value": "{{test_group_id_1}}"
														}
													]
												},
												"description": "Request to get Group by id"
											},
											"response": []
										},
										{
											"name": "Add Group 2",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "86d5ec18-91db-40e4-9629-66c661dd03d1",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_group_name\", \"test_test_group_2\");",
															"pm.environment.set(\"test_group_users\", pm.environment.get(\"main_admin_id\"));",
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "5743171f-6729-4772-bfa2-29b45bf04d00",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"group_id is ok\"] = typeof(jsonData.group_id) === \"number\";",
															"",
															"// Variables d'environnement",
															"pm.environment.set(\"test_group_id_2\", jsonData.group_id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"type": "text"
														},
														{
															"key": "name",
															"value": "{{test_group_name}}",
															"type": "text"
														},
														{
															"key": "users",
															"value": "{{test_group_users}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups"
													]
												},
												"description": "Request to add group"
											},
											"response": []
										},
										{
											"name": "Test Add Group 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "50799549-8852-4f0a-9142-7516450bf89f",
														"type": "text/javascript",
														"exec": [
															"",
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"group is ok\"] = jsonData.groups instanceof Array;",
															"tests[\"group get is ok\"] = jsonData.groups.length === 1;",
															"tests[\"nb_members is ok\"] = jsonData.groups[0].nb_members === 1;",
															"tests[\"group_id is ok\"] = jsonData.groups[0].group_id === parseInt(pm.environment.get(\"test_group_id_2\"));",
															"tests[\"name is ok\"] = jsonData.groups[0].name === pm.environment.get(\"test_group_name\");",
															"tests[\"group users is ok\"] = jsonData.groups[0].users === parseInt(pm.environment.get(\"main_admin_id\"));",
															"tests[\"groups users_label is ok\"] = jsonData.groups[0].users_label === pm.environment.get(\"admin_user\");",
															"",
															"// Nettoyage variables ",
															"pm.environment.unset(\"test_group_attributes\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}&attributs={{test_group_attributes}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups",
														":group_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{test_group_attributes}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "group_id",
															"value": "{{test_group_id_2}}"
														}
													]
												},
												"description": "Request to get Group by id"
											},
											"response": []
										},
										{
											"name": "Delete Groups",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "17b67430-4c58-4543-aca8-59f8ab10ad9d",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"groups is ok\"] = jsonData.groups instanceof Array;",
															"tests[\"groups get is ok\"] = jsonData.groups.length === 2;",
															"tests[\"group_id is ok\"] = parseInt(jsonData.groups[0].group_id) === parseInt(pm.environment.get(\"test_group_id_1\"));",
															"tests[\"group_id is ok\"] = parseInt(jsonData.groups[1].group_id) === parseInt(pm.environment.get(\"test_group_id_2\"));"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups/?token={{main_token}}&idList={{test_group_id_1}}|{{test_group_id_2}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups",
														""
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "idList",
															"value": "{{test_group_id_1}}|{{test_group_id_2}}",
															"equals": true
														}
													]
												},
												"description": "Request to delete Group"
											},
											"response": []
										},
										{
											"name": "Test Delete Groups",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "503bd751-6995-4dc4-9acb-801615256aa9",
														"type": "text/javascript",
														"exec": [
															"if(typeof(pm.environment.get(\"get_groups_order_by\")) == \"undefined\")",
															"\tpm.environment.set(\"get_groups_order_by\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_groups_sort_order\")) == \"undefined\")",
															"\tpm.environment.set(\"get_groups_sort_order\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_groups_limit\")) == \"undefined\")",
															"\tpm.environment.set(\"get_groups_limit\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_groups_offset\")) == \"undefined\")",
															"\tpm.environment.set(\"get_groups_offset\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_groups_attributs\")) == \"undefined\")",
															"\tpm.environment.set(\"get_groups_attributs\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_groups_filter\")) == \"undefined\")",
															"\tpm.environment.set(\"get_groups_filter\", \"\");",
															"",
															"if(typeof(pm.environment.get(\"get_groups_distinct\")) == \"undefined\")",
															"\tpm.environment.set(\"get_groups_distinct\", \"\");"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "79758380-cfc6-4fdf-8653-dcc82cb25545",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"groups is ok\"] = jsonData.groups instanceof Array;",
															"",
															"",
															"var iTest = pm.environment.get(\"get_groups_test_number\");",
															"iTest = typeof(iTest) !== \"undefined\" ? parseInt(iTest) : 0;",
															"",
															"// Nettoyage variables ",
															"pm.environment.unset(\"get_groups_order_by\");",
															"pm.environment.unset(\"get_groups_sort_order\");",
															"pm.environment.unset(\"get_groups_limit\");",
															"pm.environment.unset(\"get_groups_offset\");",
															"pm.environment.unset(\"get_groups_attributs\");",
															"pm.environment.unset(\"get_groups_filter\");",
															"pm.environment.unset(\"get_groups_distinct\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups?token={{main_token}}&order_by={{get_groups_order_by}}&sort_order={{get_groups_sort_order}}&limit={{get_groups_limit}}&offset={{get_groups_offset}}&attributs={{get_groups_attributs}}&filter={{get_groups_filter}}&distinct={{get_groups_distinct}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "order_by",
															"value": "{{get_groups_order_by}}",
															"equals": true
														},
														{
															"key": "sort_order",
															"value": "{{get_groups_sort_order}}",
															"equals": true
														},
														{
															"key": "limit",
															"value": "{{get_groups_limit}}",
															"equals": true
														},
														{
															"key": "offset",
															"value": "{{get_groups_offset}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{get_groups_attributs}}",
															"equals": true
														},
														{
															"key": "filter",
															"value": "{{get_groups_filter}}",
															"equals": true
														},
														{
															"key": "distinct",
															"value": "{{get_groups_distinct}}",
															"equals": true
														}
													]
												},
												"description": "Request to get Groups"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Without rights",
									"item": [
										{
											"name": "Add Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "464146c6-d41b-45a4-95eb-32262cf91d8a",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_group_name\", \"test_test_group\");",
															"pm.environment.set(\"test_group_users\", pm.environment.get(\"main_admin_id\"));",
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "edc231d8-5db4-49be-9420-1c971f1c7576",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"group_id is ok\"] = typeof(jsonData.group_id) === \"number\";",
															"",
															"// Variables d'environnement",
															"pm.environment.set(\"test_group_id\", jsonData.group_id);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"type": "text"
														},
														{
															"key": "name",
															"value": "{{test_group_name}}",
															"type": "text"
														},
														{
															"key": "users",
															"value": "{{test_group_users}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups"
													]
												},
												"description": "Request to add group"
											},
											"response": []
										},
										{
											"name": "Add Group (without rights)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "363230a2-97ab-4c98-b741-0c9cbe2dbeca",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"error_test\", true);",
															"pm.environment.set(\"test_group_name\", \"test_test_group\");",
															"pm.environment.set(\"test_group_users\", pm.environment.get(\"main_admin_id\"));"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2b29a642-cf24-4326-8f04-d41853fa172c",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false",
															"    return null;",
															"}",
															"pm.environment.set(\"error_test\", false);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "token",
															"value": "{{test_user_token}}",
															"type": "text"
														},
														{
															"key": "name",
															"value": "{{test_group_name}}",
															"type": "text"
														},
														{
															"key": "users",
															"value": "{{test_group_users}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups"
													]
												},
												"description": "Request to add group"
											},
											"response": []
										},
										{
											"name": "Update Group (without rights)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ab7e273f-023e-4fc8-8ea6-f4923210f057",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"error_test\", true);",
															"pm.environment.set(\"test_group_name\", \"test_test_group_edited\");",
															"pm.environment.set(\"test_group_users\", pm.environment.get(\"main_admin_id\"));"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "29bd1c21-efb6-425c-8e62-eb898ab5f333",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"pm.environment.set(\"error_test\", false);"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{test_user_token}}&name={{test_group_name}}&users={{test_group_users}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups",
														":group_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{test_user_token}}",
															"equals": true
														},
														{
															"key": "name",
															"value": "{{test_group_name}}",
															"equals": true
														},
														{
															"key": "users",
															"value": "{{test_group_users}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "group_id",
															"value": "{{test_group_id}}"
														}
													]
												},
												"description": "Request to update Group"
											},
											"response": []
										},
										{
											"name": "Delete Group (without rights)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "d3cf9235-a81d-4f16-bfce-cbe78e378f37",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"error_test\", true);"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "79da46c5-c354-407d-86f4-a586613d1b12",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"pm.environment.set(\"error_test\", false);"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{test_user_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups",
														":group_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{test_user_token}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "group_id",
															"value": "{{test_group_id}}"
														}
													]
												},
												"description": "Request to delete Group"
											},
											"response": []
										},
										{
											"name": "Delete Groups (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "b7c11674-5c7e-45d8-b098-72787a4f8a0f",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"pm.environment.set(\"error_test\", false);"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6ae340a5-b24e-48e8-a89b-1b148d60a9ba",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"error_test\", true);"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups/?token={{test_user_token}}&idList={{test_group_id}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups",
														""
													],
													"query": [
														{
															"key": "token",
															"value": "{{test_user_token}}",
															"equals": true
														},
														{
															"key": "idList",
															"value": "{{test_group_id}}",
															"equals": true
														}
													]
												},
												"description": "Request to delete Group"
											},
											"response": []
										},
										{
											"name": "Delete Group",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "92e748e0-34cb-4506-ad2f-ae68c28bbadf",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "34fe9d35-a02f-43bf-ab79-95206f36dd5c",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"groups is ok\"] = jsonData.groups instanceof Array;",
															"tests[\"groups get is ok\"] = jsonData.groups.length === 1;",
															"tests[\"group_id is ok\"] = parseInt(jsonData.groups[0].group_id) === parseInt(pm.environment.get(\"test_group_id\"));"
														]
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups",
														":group_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "group_id",
															"value": "{{test_group_id}}"
														}
													]
												},
												"description": "Request to delete Group"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "End",
									"item": [
										{
											"name": "Clear variables",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "353d7c2f-b228-4e7e-85de-02fe9e501281",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false",
															"    return null;",
															"}",
															"",
															"// Nettoyage variables ",
															"pm.environment.unset(\"test_group_name\");",
															"pm.environment.unset(\"test_group_id\");",
															"pm.environment.unset(\"test_group_id_1\");",
															"pm.environment.unset(\"test_group_id_2\");",
															"pm.environment.unset(\"test_group_users\");",
															"pm.environment.unset(\"test_group_attributes\");"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "31d23a01-0bad-48cb-a457-165b1251b24f",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&attributs={{test_user_attributes}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"users",
														":user_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{test_user_attributes}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "user_id",
															"value": "{{test_user_id}}"
														}
													]
												},
												"description": "Test: vérifie le précédent PUT"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Privileges - unfinished",
							"description": "Folder for privileges",
							"item": [
								{
									"name": "With rights",
									"item": [
										{
											"name": "Get Privileges",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "4b971e3c-a682-491a-82a6-a8bc3d80c648",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"get_privileges_order_by\", \"\");",
															"pm.environment.set(\"get_privileges_sort_order\", \"\");",
															"pm.environment.set(\"get_privileges_limit\", \"50\");",
															"pm.environment.set(\"get_privileges_offset\", \"\");",
															"pm.environment.set(\"get_privileges_attributs\", \"\");",
															"pm.environment.set(\"get_privileges_filter\", \"\");",
															"pm.environment.set(\"get_privileges_distinct\", \"\");"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "1d69319b-256e-4e1f-99ca-ed27249a4c41",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"privileges is ok\"] = jsonData.privileges instanceof Array;",
															"",
															"//Get parameters name for later tests",
															"var order_by;",
															"var filter;",
															"    for(var param in jsonData.privileges[0]){",
															"        order_by = param;",
															"        filter = jsonData.privileges[0][param];",
															"        if(jsonData.privileges[0][param] !== null){",
															"            break;",
															"        }",
															"    }",
															"",
															"//Tests order_by and sort_order",
															"var sort = true;",
															"var varA, varB = null;",
															"var ordsortjsonData;",
															"",
															"//Send request with order_by variable name in ASC order",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/privileges?token=\"+pm.environment.get(\"main_token\")+\"&order_by=\"+order_by+\"&sort_order=asc\", function (err, ordsortResponse) {",
															"    ordsortjsonData = ordsortResponse.json();",
															"    ",
															"//Check sort",
															"    for(var parameter in ordsortjsonData.privileges){",
															"        varB = ordsortjsonData.privileges[parameter][order_by];",
															"        if(varB !== null && varA !== null){",
															"            if(varA > varB){ ",
															"                sort = false;",
															"                break;",
															"            }",
															"        }",
															"        varA = varB;",
															"    }",
															"    pm.test(\"order_by and sort_order is ok\", function () {pm.expect(sort).to.be.true});",
															"});",
															"",
															"//Tests limit and offset",
															"var maxListCount, firstparamName, lastparamName, paramName, limoffjsonData;",
															"var lim = true, off = true;",
															"",
															"//Setup limit and offset check parameters",
															"if(jsonData.list_count > 1){",
															"    maxListCount = parseInt(jsonData.list_count) - 1 ;",
															"    firstparamName = jsonData.privileges[0][order_by];",
															"    lastparamName = jsonData.privileges[parseInt(maxListCount)][order_by];",
															"    maxListCount--;",
															"    ",
															"//Send request with limit at maxListCount -1 and offset at 1",
															"    pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/privileges?token=\"+pm.environment.get(\"main_token\")+\"&limit=\"+ parseInt(maxListCount) +\"&offset=1\", function (err, limoffResponse) {",
															"        limoffjsonData = limoffResponse.json();",
															"    ",
															"//Check limit and offset result",
															"        for(var parameter in limoffjsonData.attjsonData){",
															"            paramName = limoffjsonData.privileges[parameter][order_by];",
															"            if(paramName === firstparamName){",
															"                off = false;",
															"            }",
															"            if(paramName === lastparamName){",
															"                lim = false;",
															"            }",
															"        }",
															"        pm.test(\"offset is ok\", function () {pm.expect(off).to.be.true});",
															"        pm.test(\"limit is ok\", function () {pm.expect(lim).to.be.true});",
															"    });",
															"}",
															"",
															"//Test attributes",
															"var attjsonData;",
															"var att = true;",
															"",
															"//Send request to get only the order_by variable name attribute",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/privileges?token=\"+pm.environment.get(\"main_token\")+\"&attributs=\"+order_by, function (err, attResponse) {",
															"    attjsonData = attResponse.json();",
															"",
															"//Check attribute ",
															"    for(var parameter in attjsonData.privileges){",
															"        for(var attparam in attjsonData.privileges[parameter]){",
															"            if(attparam !== order_by){",
															"                att = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"attribute is ok\", function () {pm.expect(att).to.be.true});",
															"});",
															"",
															"//Test filter",
															"var fltrjson = JSON.stringify({'column': order_by, 'compare_operator': '=', 'value': filter});",
															"var fltrjsonData;",
															"var fltr = true;",
															"",
															"//Send request with filter argument",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/privileges?token=\"+pm.environment.get(\"main_token\")+\"&filter=\"+fltrjson, function (err, fltrResponse) {",
															"    fltrjsonData = fltrResponse.json();",
															"",
															"//Check filter",
															"    for(var parameter in fltrjsonData.privileges){",
															"        for(var fltrparam in fltrjsonData.privileges[parameter]){",
															"            var tmp = fltrjsonData.privileges[parameter][fltrparam];",
															"            if(fltrparam === order_by && tmp !== filter){",
															"                fltr = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"filter is ok\", function () {pm.expect(fltr).to.be.true});",
															"});",
															"",
															"//Save variable for without 's' next test",
															"for(var param in jsonData.privileges[0]){",
															"    var variable = \"get_privileges_\" + param;",
															"    pm.environment.set(variable,jsonData.privileges[0][param]);",
															"}",
															"",
															"//Clean variables",
															"pm.environment.unset(\"get_privileges_order_by\");",
															"pm.environment.unset(\"get_privileges_sort_order\");",
															"pm.environment.unset(\"get_privileges_limit\");",
															"pm.environment.unset(\"get_privileges_offset\");",
															"pm.environment.unset(\"get_privileges_attributs\");",
															"pm.environment.unset(\"get_privileges_filter\");",
															"pm.environment.unset(\"get_privileges_distinct\");",
															"",
															"",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/privileges?token={{main_token}}&order_by={{get_privileges_order_by}}&sort_order={{get_privileges_sort_order}}&limit={{get_privileges_limit}}&offset={{get_privileges_offset}}&attributs={{get_privileges_attributs}}&filter={{get_privileges_filter}}&distinct={{get_privileges_distinct}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"privileges"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "order_by",
															"value": "{{get_privileges_order_by}}",
															"equals": true
														},
														{
															"key": "sort_order",
															"value": "{{get_privileges_sort_order}}",
															"equals": true
														},
														{
															"key": "limit",
															"value": "{{get_privileges_limit}}",
															"equals": true
														},
														{
															"key": "offset",
															"value": "{{get_privileges_offset}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{get_privileges_attributs}}",
															"equals": true
														},
														{
															"key": "filter",
															"value": "{{get_privileges_filter}}",
															"equals": true
														},
														{
															"key": "distinct",
															"value": "{{get_privileges_distinct}}",
															"equals": true
														}
													]
												},
												"description": "Request to get Privileges"
											},
											"response": []
										},
										{
											"name": "Get Privilege",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bdc442f6-4a40-45a0-a1e1-1bf8b2434515",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"tests[\"tab is ok\"] = jsonData.privileges instanceof Array;",
															"",
															"var variable;",
															"for(var param in jsonData.privileges[0]){",
															"    variable = \"get_privileges_\" + param;",
															"    if(jsonData.privileges[0][param] != null){",
															"        if(pm.environment.get(variable) != null){",
															"            tests[param+ \" is ok\"] = jsonData.privileges[0][param] == pm.environment.get(variable);",
															"        }else{",
															"            tests[param+ \" parameter was returned too with a : \" + typeof(jsonData.privileges[0][param])] = true;",
															"        }",
															"    }else if(jsonData.privileges[0][param] == null && pm.environment.get(variable) == \"\"){",
															"        tests[param+ \" is supposed ok (return filled with null argument)\"] = true;",
															"    }else{",
															"        tests[\"! Warning ! \"+ param + \" isn't ok\" ] = false;",
															"    }",
															"    pm.environment.unset(variable);",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "5df770c7-af7e-469e-b7d9-23fd0984a8fd",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/privileges/:rolname?token={{main_token}}&description={{get_privileges_description}}&users={{main_admin_id}}|{{test_User_id}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"privileges",
														":rolname"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "description",
															"value": "{{get_privileges_description}}",
															"equals": true
														},
														{
															"key": "users",
															"value": "{{main_admin_id}}|{{test_User_id}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "rolname",
															"value": "{{get_privileges_rolname}}"
														}
													]
												},
												"description": "Request to get Privilege by rolname"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"id": "935d835b-c1d8-4a6b-a412-d4dc6f48f84d",
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"id": "1417d0e5-129f-4736-99bb-abca0e33c568",
												"type": "text/javascript"
											}
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Without rights",
									"item": [
										{
											"name": "Get Privileges (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d660d389-5dd3-48f3-a5b7-fed958c97531",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"privileges is ok\"] = jsonData.privileges instanceof Array;",
															"",
															"//Get parameters name for later tests",
															"var order_by;",
															"var filter;",
															"    for(var param in jsonData.privileges[0]){",
															"        order_by = param;",
															"        filter = jsonData.privileges[0][param];",
															"        if(jsonData.privileges[0][param] !== null){",
															"            break;",
															"        }",
															"    }",
															"",
															"//Tests order_by and sort_order",
															"var sort = true;",
															"var varA, varB = null;",
															"var ordsortjsonData;",
															"",
															"//Send request with order_by variable name in ASC order",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/privileges?token=\"+pm.environment.get(\"main_token\")+\"&order_by=\"+order_by+\"&sort_order=asc\", function (err, ordsortResponse) {",
															"    ordsortjsonData = ordsortResponse.json();",
															"    ",
															"//Check sort",
															"    for(var parameter in ordsortjsonData.privileges){",
															"        varB = ordsortjsonData.privileges[parameter][order_by];",
															"        if(varB !== null && varA !== null){",
															"            if(varA > varB){ ",
															"                sort = false;",
															"                break;",
															"            }",
															"        }",
															"        varA = varB;",
															"    }",
															"    pm.test(\"order_by and sort_order is ok\", function () {pm.expect(sort).to.be.true});",
															"});",
															"",
															"//Tests limit and offset",
															"var maxListCount, firstparamName, lastparamName, paramName, limoffjsonData;",
															"var lim = true, off = true;",
															"",
															"//Setup limit and offset check parameters",
															"if(jsonData.list_count > 1){",
															"    maxListCount = parseInt(jsonData.list_count) - 1 ;",
															"    firstparamName = jsonData.privileges[0][order_by];",
															"    lastparamName = jsonData.privileges[parseInt(maxListCount)][order_by];",
															"    maxListCount--;",
															"    ",
															"//Send request with limit at maxListCount -1 and offset at 1",
															"    pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/privileges?token=\"+pm.environment.get(\"main_token\")+\"&limit=\"+ parseInt(maxListCount) +\"&offset=1\", function (err, limoffResponse) {",
															"        limoffjsonData = limoffResponse.json();",
															"    ",
															"//Check limit and offset result",
															"        for(var parameter in limoffjsonData.attjsonData){",
															"            paramName = limoffjsonData.privileges[parameter][order_by];",
															"            if(paramName === firstparamName){",
															"                off = false;",
															"            }",
															"            if(paramName === lastparamName){",
															"                lim = false;",
															"            }",
															"        }",
															"        pm.test(\"offset is ok\", function () {pm.expect(off).to.be.true});",
															"        pm.test(\"limit is ok\", function () {pm.expect(lim).to.be.true});",
															"    });",
															"}",
															"",
															"//Test attributes",
															"var attjsonData;",
															"var att = true;",
															"",
															"//Send request to get only the order_by variable name attribute",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/privileges?token=\"+pm.environment.get(\"main_token\")+\"&attributs=\"+order_by, function (err, attResponse) {",
															"    attjsonData = attResponse.json();",
															"",
															"//Check attribute ",
															"    for(var parameter in attjsonData.privileges){",
															"        for(var attparam in attjsonData.privileges[parameter]){",
															"            if(attparam !== order_by){",
															"                att = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"attribute is ok\", function () {pm.expect(att).to.be.true});",
															"});",
															"",
															"//Test filter",
															"var fltrjson = JSON.stringify({'column': order_by, 'compare_operator': '=', 'value': filter});",
															"var fltrjsonData;",
															"var fltr = true;",
															"",
															"//Send request with filter argument",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/privileges?token=\"+pm.environment.get(\"main_token\")+\"&filter=\"+fltrjson, function (err, fltrResponse) {",
															"    fltrjsonData = fltrResponse.json();",
															"",
															"//Check filter",
															"    for(var parameter in fltrjsonData.privileges){",
															"        for(var fltrparam in fltrjsonData.privileges[parameter]){",
															"            var tmp = fltrjsonData.privileges[parameter][fltrparam];",
															"            if(fltrparam === order_by && tmp !== filter){",
															"                fltr = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"filter is ok\", function () {pm.expect(fltr).to.be.true});",
															"});",
															"",
															"//Save variable for without 's' next test",
															"for(var param in jsonData.privileges[0]){",
															"    var variable = \"get_privileges_\" + param;",
															"    pm.environment.set(variable,jsonData.privileges[0][param]);",
															"}",
															"",
															"//Clean variables",
															"pm.environment.unset(\"get_privileges_order_by\");",
															"pm.environment.unset(\"get_privileges_sort_order\");",
															"pm.environment.unset(\"get_privileges_limit\");",
															"pm.environment.unset(\"get_privileges_offset\");",
															"pm.environment.unset(\"get_privileges_attributs\");",
															"pm.environment.unset(\"get_privileges_filter\");",
															"pm.environment.unset(\"get_privileges_distinct\");",
															"",
															"",
															""
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "90db27cf-d181-4018-91c4-1172a1372c08",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"get_privileges_order_by\", \"\");",
															"pm.environment.set(\"get_privileges_sort_order\", \"\");",
															"pm.environment.set(\"get_privileges_limit\", \"50\");",
															"pm.environment.set(\"get_privileges_offset\", \"\");",
															"pm.environment.set(\"get_privileges_attributs\", \"\");",
															"pm.environment.set(\"get_privileges_filter\", \"\");",
															"pm.environment.set(\"get_privileges_distinct\", \"\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/privileges?token={{test_user_token}}&order_by={{get_privileges_order_by}}&sort_order={{get_privileges_sort_order}}&limit={{get_privileges_limit}}&offset={{get_privileges_offset}}&attributs={{get_privileges_attributs}}&filter={{get_privileges_filter}}&distinct={{get_privileges_distinct}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"privileges"
													],
													"query": [
														{
															"key": "token",
															"value": "{{test_user_token}}",
															"equals": true
														},
														{
															"key": "order_by",
															"value": "{{get_privileges_order_by}}",
															"equals": true
														},
														{
															"key": "sort_order",
															"value": "{{get_privileges_sort_order}}",
															"equals": true
														},
														{
															"key": "limit",
															"value": "{{get_privileges_limit}}",
															"equals": true
														},
														{
															"key": "offset",
															"value": "{{get_privileges_offset}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{get_privileges_attributs}}",
															"equals": true
														},
														{
															"key": "filter",
															"value": "{{get_privileges_filter}}",
															"equals": true
														},
														{
															"key": "distinct",
															"value": "{{get_privileges_distinct}}",
															"equals": true
														}
													]
												},
												"description": "Request to get Privileges"
											},
											"response": []
										},
										{
											"name": "Get Privilege (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "97024be1-de50-4f09-b88f-1e76f62ea039",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"tests[\"tab is ok\"] = jsonData.privileges instanceof Array;",
															"",
															"var variable;",
															"for(var param in jsonData.privileges[0]){",
															"    variable = \"get_privileges_\" + param;",
															"    if(jsonData.privileges[0][param] != null){",
															"        if(pm.environment.get(variable) != null){",
															"            tests[param+ \" is ok\"] = jsonData.privileges[0][param] == pm.environment.get(variable);",
															"        }else{",
															"            tests[param+ \" parameter was returned too with a : \" + typeof(jsonData.privileges[0][param])] = true;",
															"        }",
															"    }else if(jsonData.privileges[0][param] == null && pm.environment.get(variable) == \"\"){",
															"        tests[param+ \" is supposed ok (return filled with null argument)\"] = true;",
															"    }else{",
															"        tests[\"! Warning ! \"+ param + \" isn't ok\" ] = false;",
															"    }",
															"    pm.environment.unset(variable);",
															"}"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "ea019af9-5f8a-4f03-94ae-9bd4d9163f66",
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/privileges/:rolname?token={{test_user_token}}&description={{get_privileges_description}}&users={{main_admin_id}}|{{test_User_id}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"privileges",
														":rolname"
													],
													"query": [
														{
															"key": "token",
															"value": "{{test_user_token}}",
															"equals": true
														},
														{
															"key": "description",
															"value": "{{get_privileges_description}}",
															"equals": true
														},
														{
															"key": "users",
															"value": "{{main_admin_id}}|{{test_User_id}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "rolname",
															"value": "{{get_privileges_rolname}}"
														}
													]
												},
												"description": "Request to get Privilege by rolname"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"id": "71bbeba9-5cc8-488d-bcfb-004982bb79ae",
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"id": "9498abeb-9514-4296-b4a7-8eecb8dbd4a7",
										"type": "text/javascript"
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Phpinfo",
							"description": "Folder for phpinfo",
							"item": [
								{
									"name": "With rights",
									"item": [
										{
											"name": "Get phpinfo",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4d307c4c-ebd5-485d-8a4f-3af8328c8f51",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/phpinfo?token={{main_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"phpinfo"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														}
													]
												},
												"description": "Request to get phpinfo"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Without rights",
									"item": [
										{
											"name": "Get phpinfo (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "211b0f8d-42e3-48b2-a98b-56c6f7166807",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"pm.environment.set(\"error_test\", false);"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "276e14fe-0c2b-4739-8b2e-6e9cc936c8f9",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"error_test\", true);"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {},
												"url": {
													"raw": "https://{{host}}/rest/vitis/phpinfo?token={{simple_user_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"phpinfo"
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														}
													]
												},
												"description": "Request to get phpinfo"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"id": "dbf42ffc-c471-4183-b0b3-a09ba8e75bb6",
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"id": "9845cf64-cb61-4f4a-954f-c4987d1048ff",
										"type": "text/javascript"
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Vitissections",
							"description": "Folder for vitissections",
							"item": [
								{
									"name": "With rights",
									"description": "",
									"item": [
										{
											"name": "Get VitisSections",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"get_vitissections_order_by\", \"\");",
															"pm.environment.set(\"get_vitissections_sort_order\", \"\");",
															"pm.environment.set(\"get_vitissections_limit\", \"50\");",
															"pm.environment.set(\"get_vitissections_offset\", \"\");",
															"pm.environment.set(\"get_vitissections_attributs\", \"\");",
															"pm.environment.set(\"get_vitissections_filter\", \"\");",
															"pm.environment.set(\"get_vitissections_distinct\", \"\");"
														],
														"id": "b7f72eaf-96ff-4735-b5d6-a1a0cd35bf0d",
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"vitissections is ok\"] = jsonData.vitissections instanceof Array;",
															"",
															"//Get parameters name for later tests",
															"var order_by;",
															"",
															"var filter;",
															"    for(var param in jsonData.vitissections[0]){",
															"        order_by = param;",
															"        filter = jsonData.vitissections[0][param];",
															"        if(jsonData.vitissections[0][param] !== null){",
															"            break;",
															"        }",
															"    }",
															"",
															"//Tests order_by and sort_order",
															"var sort = true;",
															"var varA, varB = null;",
															"var ordsortjsonData;",
															"",
															"//Send request with order_by variable name in ASC order",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/vitissections?token=\"+pm.environment.get(\"main_token\")+\"&order_by=\"+order_by+\"&sort_order=asc\", function (err, ordsortResponse) {",
															"    ordsortjsonData = ordsortResponse.json();",
															"    ",
															"//Check sort",
															"    for(var parameter in ordsortjsonData.vitissections){",
															"        varB = ordsortjsonData.vitissections[parameter][order_by];",
															"        if(varB !== null && varA !== null){",
															"            if(varA > varB){ ",
															"                sort = false;",
															"                break;",
															"            }",
															"        }",
															"        varA = varB;",
															"    }",
															"    pm.test(\"order_by and sort_order is ok\", function () {pm.expect(sort).to.be.true});",
															"});",
															"",
															"//Tests limit and offset",
															"var maxListCount, firstparamName, lastparamName, paramName, limoffjsonData;",
															"var lim = true, off = true;",
															"",
															"//Setup limit and offset check parameters",
															"if(jsonData.list_count > 1){",
															"    maxListCount = parseInt(jsonData.list_count) - 1 ;",
															"    firstparamName = jsonData.vitissections[0][order_by];",
															"    lastparamName = jsonData.vitissections[parseInt(maxListCount)][order_by];",
															"    maxListCount--;",
															"    ",
															"//Send request with limit at maxListCount -1 and offset at 1",
															"    pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/vitissections?token=\"+pm.environment.get(\"main_token\")+\"&limit=\"+ parseInt(maxListCount) +\"&offset=1\", function (err, limoffResponse) {",
															"        limoffjsonData = limoffResponse.json();",
															"    ",
															"//Check limit and offset result",
															"        for(var parameter in limoffjsonData.attjsonData){",
															"            paramName = limoffjsonData.vitissections[parameter][order_by];",
															"            if(paramName === firstparamName){",
															"                off = false;",
															"            }",
															"            if(paramName === lastparamName){",
															"                lim = false;",
															"            }",
															"        }",
															"        pm.test(\"offset is ok\", function () {pm.expect(off).to.be.true});",
															"        pm.test(\"limit is ok\", function () {pm.expect(lim).to.be.true});",
															"    });",
															"}",
															"",
															"//Test attributes",
															"var attjsonData;",
															"var att = true;",
															"",
															"//Send request to get only the order_by variable name attribute",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/vitissections?token=\"+pm.environment.get(\"main_token\")+\"&attributs=\"+order_by, function (err, attResponse) {",
															"    attjsonData = attResponse.json();",
															"",
															"//Check attribute ",
															"    for(var parameter in attjsonData.vitissections){",
															"        for(var attparam in attjsonData.vitissections[parameter]){",
															"            if(attparam !== order_by){",
															"                att = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"attribute is ok\", function () {pm.expect(att).to.be.true});",
															"});",
															"",
															"//Test filter",
															"var fltrjson = JSON.stringify({'column': order_by, 'compare_operator': '=', 'value': filter});",
															"var fltrjsonData;",
															"var fltr = true;",
															"",
															"//Send request with filter argument",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/vitissections?token=\"+pm.environment.get(\"main_token\")+\"&filter=\"+fltrjson, function (err, fltrResponse) {",
															"    fltrjsonData = fltrResponse.json();",
															"",
															"//Check filter",
															"    for(var parameter in fltrjsonData.vitissections){",
															"        for(var fltrparam in fltrjsonData.vitissections[parameter]){",
															"            var tmp = fltrjsonData.vitissections[parameter][fltrparam];",
															"            if(fltrparam === order_by && tmp !== filter){",
															"                fltr = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"filter is ok\", function () {pm.expect(fltr).to.be.true});",
															"});",
															"",
															"for(var param in jsonData.vitissections[0]){",
															"    var variable, path;",
															"    if(jsonData.vitissections[0][param] !== null){",
															"        varaible = jsonData.vitissections[0][param];",
															"        path = \"get_vitissection_\" + param;",
															"        pm.environment.set(path,variable);",
															"    }",
															"}",
															"",
															"//Save variable for without 's' next test",
															"for(var param in jsonData.vitissections[0]){",
															"    var variable = \"get_vitissections_\" + param;",
															"    pm.environment.set(variable,jsonData.vitissections[0][param]);",
															"}",
															"",
															"//Clean variables",
															"pm.environment.unset(\"get_vitissections_order_by\");",
															"pm.environment.unset(\"get_vitissections_sort_order\");",
															"pm.environment.unset(\"get_vitissections_limit\");",
															"pm.environment.unset(\"get_vitissections_offset\");",
															"pm.environment.unset(\"get_vitissections_attributs\");",
															"pm.environment.unset(\"get_vitissections_filter\");",
															"pm.environment.unset(\"get_vitissections_distinct\");",
															"",
															"",
															""
														],
														"id": "d34af2e8-726e-4239-886a-a4466940b035",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {},
												"url": {
													"raw": "https://{{host}}/rest/vitis/vitissections?token={{main_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"vitissections"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"equals": true,
															"key": "order_by",
															"value": "{{get_vitissections_order_by}}",
															"disabled": true
														},
														{
															"equals": true,
															"key": "sort_order",
															"value": "{{get_vitissections_sort_order}}",
															"disabled": true
														},
														{
															"equals": true,
															"key": "limit",
															"value": "{{get_vitissections_limit}}",
															"disabled": true
														},
														{
															"equals": true,
															"key": "offset",
															"value": "{{get_vitissections_offset}}",
															"disabled": true
														},
														{
															"equals": true,
															"key": "attributs",
															"value": "{{get_vitissections_attributs}}",
															"disabled": true
														},
														{
															"equals": true,
															"key": "filter",
															"value": "{{get_vitissections_filter}}",
															"disabled": true
														},
														{
															"equals": true,
															"key": "distinct",
															"value": "{{get_vitissections_distinct}}",
															"disabled": true
														}
													]
												},
												"description": "Request to get VitisSections"
											},
											"response": []
										},
										{
											"name": "Get VitisSection",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"pm.environment.set(\"get_vitissection_attributs\",\"\");"
														],
														"id": "7a663ac6-7e08-428a-8313-bdfea563575b",
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"tests[\"vitissections is ok\"] = jsonData.vitissections instanceof Array;",
															"",
															"var variable;",
															"for(var param in jsonData.vitissections[0]){",
															"    variable = \"get_vitissections_\" + param;",
															"    if(jsonData.vitissections[0][param] != null){",
															"        if(pm.environment.get(variable) != null){",
															"            tests[param+ \" is ok\"] = jsonData.vitissections[0][param] == pm.environment.get(variable);",
															"        }else{",
															"            tests[param+ \" parameter was returned too with a : \" + typeof(jsonData.vitissections[0][param])] = true;",
															"        }",
															"    }else if(jsonData.vitissections[0][param] == null && pm.environment.get(variable) == (\"\" || null)){",
															"        tests[param+ \" is supposed ok (return filled with null argument)\"] = true;",
															"    }else{",
															"        tests[\"! Warning ! \"+ param + \" isn't ok\" ] = false;",
															"    }",
															"    pm.environment.unset(variable);",
															"}",
															"",
															"pm.environment.unset(\"get_vitissection_attributs\");"
														],
														"id": "99e294b0-0a5d-47be-bd0e-b65a9e9d492b",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {},
												"url": {
													"raw": "https://{{host}}/rest/vitis/vitissections/:section_id?token={{main_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"vitissections",
														":section_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"equals": true,
															"key": "attributs",
															"value": "{{get_vitissection_attributs}}",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "section_id",
															"value": "{{get_vitissections_section_id}}"
														}
													]
												},
												"description": "Request to get VitisSection by mode id"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Without rights",
									"description": "",
									"item": [
										{
											"name": "Get VitisSections (without rights)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"get_vitissections_order_by\", \"\");",
															"pm.environment.set(\"get_vitissections_sort_order\", \"\");",
															"pm.environment.set(\"get_vitissections_limit\", \"50\");",
															"pm.environment.set(\"get_vitissections_offset\", \"\");",
															"pm.environment.set(\"get_vitissections_attributs\", \"\");",
															"pm.environment.set(\"get_vitissections_filter\", \"\");",
															"pm.environment.set(\"get_vitissections_distinct\", \"\");"
														],
														"id": "b7f72eaf-96ff-4735-b5d6-a1a0cd35bf0d",
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"vitissections is ok\"] = jsonData.vitissections instanceof Array;",
															"",
															"//Get parameters name for later tests",
															"var order_by;",
															"",
															"var filter;",
															"    for(var param in jsonData.vitissections[0]){",
															"        order_by = param;",
															"        filter = jsonData.vitissections[0][param];",
															"        if(jsonData.vitissections[0][param] !== null){",
															"            break;",
															"        }",
															"    }",
															"",
															"//Tests order_by and sort_order",
															"var sort = true;",
															"var varA, varB = null;",
															"var ordsortjsonData;",
															"",
															"//Send request with order_by variable name in ASC order",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/vitissections?token=\"+pm.environment.get(\"main_token\")+\"&order_by=\"+order_by+\"&sort_order=asc\", function (err, ordsortResponse) {",
															"    ordsortjsonData = ordsortResponse.json();",
															"    ",
															"//Check sort",
															"    for(var parameter in ordsortjsonData.vitissections){",
															"        varB = ordsortjsonData.vitissections[parameter][order_by];",
															"        if(varB !== null && varA !== null){",
															"            if(varA > varB){ ",
															"                sort = false;",
															"                break;",
															"            }",
															"        }",
															"        varA = varB;",
															"    }",
															"    pm.test(\"order_by and sort_order is ok\", function () {pm.expect(sort).to.be.true});",
															"});",
															"",
															"//Tests limit and offset",
															"var maxListCount, firstparamName, lastparamName, paramName, limoffjsonData;",
															"var lim = true, off = true;",
															"",
															"//Setup limit and offset check parameters",
															"if(jsonData.list_count > 1){",
															"    maxListCount = parseInt(jsonData.list_count) - 1 ;",
															"    firstparamName = jsonData.vitissections[0][order_by];",
															"    lastparamName = jsonData.vitissections[parseInt(maxListCount)][order_by];",
															"    maxListCount--;",
															"    ",
															"//Send request with limit at maxListCount -1 and offset at 1",
															"    pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/vitissections?token=\"+pm.environment.get(\"main_token\")+\"&limit=\"+ parseInt(maxListCount) +\"&offset=1\", function (err, limoffResponse) {",
															"        limoffjsonData = limoffResponse.json();",
															"    ",
															"//Check limit and offset result",
															"        for(var parameter in limoffjsonData.attjsonData){",
															"            paramName = limoffjsonData.vitissections[parameter][order_by];",
															"            if(paramName === firstparamName){",
															"                off = false;",
															"            }",
															"            if(paramName === lastparamName){",
															"                lim = false;",
															"            }",
															"        }",
															"        pm.test(\"offset is ok\", function () {pm.expect(off).to.be.true});",
															"        pm.test(\"limit is ok\", function () {pm.expect(lim).to.be.true});",
															"    });",
															"}",
															"",
															"//Test attributes",
															"var attjsonData;",
															"var att = true;",
															"",
															"//Send request to get only the order_by variable name attribute",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/vitissections?token=\"+pm.environment.get(\"main_token\")+\"&attributs=\"+order_by, function (err, attResponse) {",
															"    attjsonData = attResponse.json();",
															"",
															"//Check attribute ",
															"    for(var parameter in attjsonData.vitissections){",
															"        for(var attparam in attjsonData.vitissections[parameter]){",
															"            if(attparam !== order_by){",
															"                att = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"attribute is ok\", function () {pm.expect(att).to.be.true});",
															"});",
															"",
															"//Test filter",
															"var fltrjson = JSON.stringify({'column': order_by, 'compare_operator': '=', 'value': filter});",
															"var fltrjsonData;",
															"var fltr = true;",
															"",
															"//Send request with filter argument",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/vitissections?token=\"+pm.environment.get(\"main_token\")+\"&filter=\"+fltrjson, function (err, fltrResponse) {",
															"    fltrjsonData = fltrResponse.json();",
															"",
															"//Check filter",
															"    for(var parameter in fltrjsonData.vitissections){",
															"        for(var fltrparam in fltrjsonData.vitissections[parameter]){",
															"            var tmp = fltrjsonData.vitissections[parameter][fltrparam];",
															"            if(fltrparam === order_by && tmp !== filter){",
															"                fltr = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"filter is ok\", function () {pm.expect(fltr).to.be.true});",
															"});",
															"",
															"for(var param in jsonData.vitissections[0]){",
															"    var variable, path;",
															"    if(jsonData.vitissections[0][param] !== null){",
															"        varaible = jsonData.vitissections[0][param];",
															"        path = \"get_vitissection_\" + param;",
															"        pm.environment.set(path,variable);",
															"    }",
															"}",
															"",
															"//Save variable for without 's' next test",
															"for(var param in jsonData.vitissections[0]){",
															"    var variable = \"get_vitissections_\" + param;",
															"    pm.environment.set(variable,jsonData.vitissections[0][param]);",
															"}",
															"",
															"//Clean variables",
															"pm.environment.unset(\"get_vitissections_order_by\");",
															"pm.environment.unset(\"get_vitissections_sort_order\");",
															"pm.environment.unset(\"get_vitissections_limit\");",
															"pm.environment.unset(\"get_vitissections_offset\");",
															"pm.environment.unset(\"get_vitissections_attributs\");",
															"pm.environment.unset(\"get_vitissections_filter\");",
															"pm.environment.unset(\"get_vitissections_distinct\");",
															"",
															"",
															""
														],
														"id": "d34af2e8-726e-4239-886a-a4466940b035",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {},
												"url": {
													"raw": "https://{{host}}/rest/vitis/vitissections?token={{simple_user_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"vitissections"
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														},
														{
															"equals": true,
															"key": "order_by",
															"value": "{{get_vitissections_order_by}}",
															"disabled": true
														},
														{
															"equals": true,
															"key": "sort_order",
															"value": "{{get_vitissections_sort_order}}",
															"disabled": true
														},
														{
															"equals": true,
															"key": "limit",
															"value": "{{get_vitissections_limit}}",
															"disabled": true
														},
														{
															"equals": true,
															"key": "offset",
															"value": "{{get_vitissections_offset}}",
															"disabled": true
														},
														{
															"equals": true,
															"key": "attributs",
															"value": "{{get_vitissections_attributs}}",
															"disabled": true
														},
														{
															"equals": true,
															"key": "filter",
															"value": "{{get_vitissections_filter}}",
															"disabled": true
														},
														{
															"equals": true,
															"key": "distinct",
															"value": "{{get_vitissections_distinct}}",
															"disabled": true
														}
													]
												},
												"description": "Request to get VitisSections"
											},
											"response": []
										},
										{
											"name": "Get VitisSection (without rights)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															"pm.environment.set(\"get_vitissection_attributs\",\"\");"
														],
														"id": "7a663ac6-7e08-428a-8313-bdfea563575b",
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"tests[\"vitissections is ok\"] = jsonData.vitissections instanceof Array;",
															"",
															"var variable;",
															"for(var param in jsonData.vitissections[0]){",
															"    variable = \"get_vitissections_\" + param;",
															"    if(jsonData.vitissections[0][param] != null){",
															"        if(pm.environment.get(variable) != null){",
															"            tests[param+ \" is ok\"] = jsonData.vitissections[0][param] == pm.environment.get(variable);",
															"        }else{",
															"            tests[param+ \" parameter was returned too with a : \" + typeof(jsonData.vitissections[0][param])] = true;",
															"        }",
															"    }else if(jsonData.vitissections[0][param] == null && pm.environment.get(variable) == (\"\" || null)){",
															"        tests[param+ \" is supposed ok (return filled with null argument)\"] = true;",
															"    }else{",
															"        tests[\"! Warning ! \"+ param + \" isn't ok\" ] = false;",
															"    }",
															"    pm.environment.unset(variable);",
															"}",
															"",
															"pm.environment.unset(\"get_vitissection_attributs\");"
														],
														"id": "99e294b0-0a5d-47be-bd0e-b65a9e9d492b",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {},
												"url": {
													"raw": "https://{{host}}/rest/vitis/vitissections/:section_id?token={{simple_user_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"vitissections",
														":section_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														},
														{
															"equals": true,
															"key": "attributs",
															"value": "{{get_vitissection_attributs}}",
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "section_id",
															"value": "{{get_vitissections_section_id}}"
														}
													]
												},
												"description": "Request to get VitisSection by mode id"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"id": "1760fcfc-6695-49e0-8f53-a1b40c80a9e2",
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"id": "543f4508-10aa-4655-8c47-9d78daac2247",
										"type": "text/javascript"
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Tabs",
							"description": "Folder for tabs",
							"item": [
								{
									"name": "With rights",
									"description": "",
									"item": [
										{
											"name": "Get Tabs",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"get_tabs_order_by\", \"\");",
															"pm.environment.set(\"get_tabs_sort_order\", \"\");",
															"pm.environment.set(\"get_tabs_limit\", \"50\");",
															"pm.environment.set(\"get_tabs_offset\", \"\");",
															"pm.environment.set(\"get_tabs_attributs\", \"\");",
															"pm.environment.set(\"get_tabs_filter\", \"\");",
															"pm.environment.set(\"get_tabs_distinct\", \"\");"
														],
														"id": "32a17c20-a312-411f-a790-6e743db96658",
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"tabs is ok\"] = jsonData.tabs instanceof Array;",
															"",
															"//Get parameters name for later tests",
															"var order_by;",
															"",
															"var filter;",
															"    for(var param in jsonData.tabs[0]){",
															"        order_by = param;",
															"        filter = jsonData.tabs[0][param];",
															"        if(jsonData.tabs[0][param] !== null){",
															"            break;",
															"        }",
															"    }",
															"",
															"//Tests order_by and sort_order",
															"var sort = true;",
															"var varA, varB = null;",
															"var ordsortjsonData;",
															"",
															"//Send request with order_by variable name in ASC order",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/tabs?token=\"+pm.environment.get(\"main_token\")+\"&order_by=\"+order_by+\"&sort_order=asc\", function (err, ordsortResponse) {",
															"    ordsortjsonData = ordsortResponse.json();",
															"    ",
															"//Check sort",
															"    for(var parameter in ordsortjsonData.tabs){",
															"        varB = ordsortjsonData.tabs[parameter][order_by];",
															"        if(varB !== null && varA !== null){",
															"            if(varA > varB){ ",
															"                sort = false;",
															"                break;",
															"            }",
															"        }",
															"        varA = varB;",
															"    }",
															"    pm.test(\"order_by and sort_order is ok\", function () {pm.expect(sort).to.be.true});",
															"});",
															"",
															"//Tests limit and offset",
															"var maxListCount, firstparamName, lastparamName, paramName, limoffjsonData;",
															"var lim = true, off = true;",
															"",
															"//Setup limit and offset check parameters",
															"if(jsonData.list_count > 1){",
															"    maxListCount = parseInt(jsonData.list_count) - 1 ;",
															"    firstparamName = jsonData.tabs[0][order_by];",
															"    lastparamName = jsonData.tabs[parseInt(maxListCount)][order_by];",
															"    maxListCount--;",
															"    ",
															"//Send request with limit at maxListCount -1 and offset at 1",
															"    pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/tabs?token=\"+pm.environment.get(\"main_token\")+\"&limit=\"+ parseInt(maxListCount) +\"&offset=1\", function (err, limoffResponse) {",
															"        limoffjsonData = limoffResponse.json();",
															"    ",
															"//Check limit and offset result",
															"        for(var parameter in limoffjsonData.attjsonData){",
															"            paramName = limoffjsonData.tabs[parameter][order_by];",
															"            if(paramName === firstparamName){",
															"                off = false;",
															"            }",
															"            if(paramName === lastparamName){",
															"                lim = false;",
															"            }",
															"        }",
															"        pm.test(\"offset is ok\", function () {pm.expect(off).to.be.true});",
															"        pm.test(\"limit is ok\", function () {pm.expect(lim).to.be.true});",
															"    });",
															"}",
															"",
															"//Test attributes",
															"var attjsonData;",
															"var att = true;",
															"",
															"//Send request to get only the order_by variable name attribute",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/tabs?token=\"+pm.environment.get(\"main_token\")+\"&attributs=\"+order_by, function (err, attResponse) {",
															"    attjsonData = attResponse.json();",
															"",
															"//Check attribute ",
															"    for(var parameter in attjsonData.tabs){",
															"        for(var attparam in attjsonData.tabs[parameter]){",
															"            if(attparam !== order_by){",
															"                att = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"attribute is ok\", function () {pm.expect(att).to.be.true});",
															"});",
															"",
															"//Test filter",
															"var fltrjson = JSON.stringify({'column': order_by, 'compare_operator': '=', 'value': filter});",
															"var fltrjsonData;",
															"var fltr = true;",
															"",
															"//Send request with filter argument",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/tabs?token=\"+pm.environment.get(\"main_token\")+\"&filter=\"+fltrjson, function (err, fltrResponse) {",
															"    fltrjsonData = fltrResponse.json();",
															"",
															"//Check filter",
															"    for(var parameter in fltrjsonData.tabs){",
															"        for(var fltrparam in fltrjsonData.tabs[parameter]){",
															"            var tmp = fltrjsonData.tabs[parameter][fltrparam];",
															"            if(fltrparam === order_by && tmp !== filter){",
															"                fltr = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"filter is ok\", function () {pm.expect(fltr).to.be.true});",
															"});",
															"",
															"//Save variable for without 's' next test",
															"for(var param in jsonData.tabs[0]){",
															"    var variable = \"get_tabs_\" + param;",
															"    pm.environment.set(variable,jsonData.tabs[0][param]);",
															"}",
															"",
															"//Clean variables",
															"pm.environment.unset(\"get_tabs_order_by\");",
															"pm.environment.unset(\"get_tabs_sort_order\");",
															"pm.environment.unset(\"get_tabs_limit\");",
															"pm.environment.unset(\"get_tabs_offset\");",
															"pm.environment.unset(\"get_tabs_attributs\");",
															"pm.environment.unset(\"get_tabs_filter\");",
															"pm.environment.unset(\"get_tabs_distinct\");",
															"",
															"",
															""
														],
														"id": "0f1ce1a2-0dbb-4c8c-814d-bd067f043d2d",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/tabs?token={{main_token}}&order_by={{get_tabs_order_by}}&sort_order={{get_tabs_sort_order}}&limit={{get_tabs_limit}}&offset={{get_tabs_offset}}&attributs={{get_tabs_attributs}}&filter={{get_tabs_filter}}&distinct={{get_tabs_distinct}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"tabs"
													],
													"query": [
														{
															"equals": true,
															"key": "token",
															"value": "{{main_token}}"
														},
														{
															"equals": true,
															"key": "order_by",
															"value": "{{get_tabs_order_by}}"
														},
														{
															"equals": true,
															"key": "sort_order",
															"value": "{{get_tabs_sort_order}}"
														},
														{
															"equals": true,
															"key": "limit",
															"value": "{{get_tabs_limit}}"
														},
														{
															"equals": true,
															"key": "offset",
															"value": "{{get_tabs_offset}}"
														},
														{
															"equals": true,
															"key": "attributs",
															"value": "{{get_tabs_attributs}}"
														},
														{
															"equals": true,
															"key": "filter",
															"value": "{{get_tabs_filter}}"
														},
														{
															"equals": true,
															"key": "distinct",
															"value": "{{get_tabs_distinct}}"
														}
													]
												},
												"description": "Request to get Tabs"
											},
											"response": []
										},
										{
											"name": "Get Tab",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"tests[\"tab is ok\"] = jsonData.tabs instanceof Array;",
															"",
															"var variable;",
															"for(var param in jsonData.tabs[0]){",
															"    variable = \"get_tabs_\" + param;",
															"    if(jsonData.tabs[0][param] != null){",
															"        if(pm.environment.get(variable) != null){",
															"            tests[param+ \" is ok\"] = jsonData.tabs[0][param] == pm.environment.get(variable);",
															"        }else{",
															"            tests[param+ \" parameter was returned too with a : \" + typeof(jsonData.tabs[0][param])] = true;",
															"        }",
															"    }else if(jsonData.tabs[0][param] == null && pm.environment.get(variable) == (\"\" || null)){",
															"        tests[param+ \" is supposed ok (return filled with null argument)\"] = true;",
															"    }else{",
															"        tests[\"! Warning ! \"+ param + \" isn't ok\" ] = false;",
															"    }",
															"    pm.environment.unset(variable);",
															"}",
															"",
															"pm.environment.unset(\"get_tab_attributs\");"
														],
														"id": "ec94d655-641d-44b2-a7a4-ca9535290b24",
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"get_tab_attributs\",\"\");"
														],
														"id": "288bdaef-db1c-4905-bcc8-a22bbf278333",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/tabs/:tab_id?token={{main_token}}&attributs={{get_tab_attributs}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"tabs",
														":tab_id"
													],
													"query": [
														{
															"equals": true,
															"key": "token",
															"value": "{{main_token}}"
														},
														{
															"equals": true,
															"key": "attributs",
															"value": "{{get_tab_attributs}}"
														}
													],
													"variable": [
														{
															"key": "tab_id",
															"value": "{{get_tabs_tab_id}}"
														}
													]
												},
												"description": "Request to get Tab by mode id"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Without rights",
									"description": "",
									"item": [
										{
											"name": "Get Tabs (without rights)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"get_tabs_order_by\", \"\");",
															"pm.environment.set(\"get_tabs_sort_order\", \"\");",
															"pm.environment.set(\"get_tabs_limit\", \"50\");",
															"pm.environment.set(\"get_tabs_offset\", \"\");",
															"pm.environment.set(\"get_tabs_attributs\", \"\");",
															"pm.environment.set(\"get_tabs_filter\", \"\");",
															"pm.environment.set(\"get_tabs_distinct\", \"\");"
														],
														"id": "32a17c20-a312-411f-a790-6e743db96658",
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"tabs is ok\"] = jsonData.tabs instanceof Array;",
															"",
															"//Get parameters name for later tests",
															"var order_by;",
															"",
															"var filter;",
															"    for(var param in jsonData.tabs[0]){",
															"        order_by = param;",
															"        filter = jsonData.tabs[0][param];",
															"        if(jsonData.tabs[0][param] !== null){",
															"            break;",
															"        }",
															"    }",
															"",
															"//Tests order_by and sort_order",
															"var sort = true;",
															"var varA, varB = null;",
															"var ordsortjsonData;",
															"",
															"//Send request with order_by variable name in ASC order",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/tabs?token=\"+pm.environment.get(\"main_token\")+\"&order_by=\"+order_by+\"&sort_order=asc\", function (err, ordsortResponse) {",
															"    ordsortjsonData = ordsortResponse.json();",
															"    ",
															"//Check sort",
															"    for(var parameter in ordsortjsonData.tabs){",
															"        varB = ordsortjsonData.tabs[parameter][order_by];",
															"        if(varB !== null && varA !== null){",
															"            if(varA > varB){ ",
															"                sort = false;",
															"                break;",
															"            }",
															"        }",
															"        varA = varB;",
															"    }",
															"    pm.test(\"order_by and sort_order is ok\", function () {pm.expect(sort).to.be.true});",
															"});",
															"",
															"//Tests limit and offset",
															"var maxListCount, firstparamName, lastparamName, paramName, limoffjsonData;",
															"var lim = true, off = true;",
															"",
															"//Setup limit and offset check parameters",
															"if(jsonData.list_count > 1){",
															"    maxListCount = parseInt(jsonData.list_count) - 1 ;",
															"    firstparamName = jsonData.tabs[0][order_by];",
															"    lastparamName = jsonData.tabs[parseInt(maxListCount)][order_by];",
															"    maxListCount--;",
															"    ",
															"//Send request with limit at maxListCount -1 and offset at 1",
															"    pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/tabs?token=\"+pm.environment.get(\"main_token\")+\"&limit=\"+ parseInt(maxListCount) +\"&offset=1\", function (err, limoffResponse) {",
															"        limoffjsonData = limoffResponse.json();",
															"    ",
															"//Check limit and offset result",
															"        for(var parameter in limoffjsonData.attjsonData){",
															"            paramName = limoffjsonData.tabs[parameter][order_by];",
															"            if(paramName === firstparamName){",
															"                off = false;",
															"            }",
															"            if(paramName === lastparamName){",
															"                lim = false;",
															"            }",
															"        }",
															"        pm.test(\"offset is ok\", function () {pm.expect(off).to.be.true});",
															"        pm.test(\"limit is ok\", function () {pm.expect(lim).to.be.true});",
															"    });",
															"}",
															"",
															"//Test attributes",
															"var attjsonData;",
															"var att = true;",
															"",
															"//Send request to get only the order_by variable name attribute",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/tabs?token=\"+pm.environment.get(\"main_token\")+\"&attributs=\"+order_by, function (err, attResponse) {",
															"    attjsonData = attResponse.json();",
															"",
															"//Check attribute ",
															"    for(var parameter in attjsonData.tabs){",
															"        for(var attparam in attjsonData.tabs[parameter]){",
															"            if(attparam !== order_by){",
															"                att = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"attribute is ok\", function () {pm.expect(att).to.be.true});",
															"});",
															"",
															"//Test filter",
															"var fltrjson = JSON.stringify({'column': order_by, 'compare_operator': '=', 'value': filter});",
															"var fltrjsonData;",
															"var fltr = true;",
															"",
															"//Send request with filter argument",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/tabs?token=\"+pm.environment.get(\"main_token\")+\"&filter=\"+fltrjson, function (err, fltrResponse) {",
															"    fltrjsonData = fltrResponse.json();",
															"",
															"//Check filter",
															"    for(var parameter in fltrjsonData.tabs){",
															"        for(var fltrparam in fltrjsonData.tabs[parameter]){",
															"            var tmp = fltrjsonData.tabs[parameter][fltrparam];",
															"            if(fltrparam === order_by && tmp !== filter){",
															"                fltr = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"filter is ok\", function () {pm.expect(fltr).to.be.true});",
															"});",
															"",
															"//Save variable for without 's' next test",
															"for(var param in jsonData.tabs[0]){",
															"    var variable = \"get_tabs_\" + param;",
															"    pm.environment.set(variable,jsonData.tabs[0][param]);",
															"}",
															"",
															"//Clean variables",
															"pm.environment.unset(\"get_tabs_order_by\");",
															"pm.environment.unset(\"get_tabs_sort_order\");",
															"pm.environment.unset(\"get_tabs_limit\");",
															"pm.environment.unset(\"get_tabs_offset\");",
															"pm.environment.unset(\"get_tabs_attributs\");",
															"pm.environment.unset(\"get_tabs_filter\");",
															"pm.environment.unset(\"get_tabs_distinct\");",
															"",
															"",
															""
														],
														"id": "0f1ce1a2-0dbb-4c8c-814d-bd067f043d2d",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {},
												"url": {
													"raw": "https://{{host}}/rest/vitis/tabs?token={{simple_user_token}}&order_by={{get_tabs_order_by}}&sort_order={{get_tabs_sort_order}}&limit={{get_tabs_limit}}&offset={{get_tabs_offset}}&attributs={{get_tabs_attributs}}&filter={{get_tabs_filter}}&distinct={{get_tabs_distinct}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"tabs"
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														},
														{
															"key": "order_by",
															"value": "{{get_tabs_order_by}}",
															"equals": true
														},
														{
															"key": "sort_order",
															"value": "{{get_tabs_sort_order}}",
															"equals": true
														},
														{
															"key": "limit",
															"value": "{{get_tabs_limit}}",
															"equals": true
														},
														{
															"key": "offset",
															"value": "{{get_tabs_offset}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{get_tabs_attributs}}",
															"equals": true
														},
														{
															"key": "filter",
															"value": "{{get_tabs_filter}}",
															"equals": true
														},
														{
															"key": "distinct",
															"value": "{{get_tabs_distinct}}",
															"equals": true
														}
													]
												},
												"description": "Request to get Tabs"
											},
											"response": []
										},
										{
											"name": "Get Tab (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"tests[\"tab is ok\"] = jsonData.tabs instanceof Array;",
															"",
															"var variable;",
															"for(var param in jsonData.tabs[0]){",
															"    variable = \"get_tabs_\" + param;",
															"    if(jsonData.tabs[0][param] != null){",
															"        if(pm.environment.get(variable) != null){",
															"            tests[param+ \" is ok\"] = jsonData.tabs[0][param] == pm.environment.get(variable);",
															"        }else{",
															"            tests[param+ \" parameter was returned too with a : \" + typeof(jsonData.tabs[0][param])] = true;",
															"        }",
															"    }else if(jsonData.tabs[0][param] == null && pm.environment.get(variable) == (\"\" || null)){",
															"        tests[param+ \" is supposed ok (return filled with null argument)\"] = true;",
															"    }else{",
															"        tests[\"! Warning ! \"+ param + \" isn't ok\" ] = false;",
															"    }",
															"    pm.environment.unset(variable);",
															"}",
															"",
															"pm.environment.unset(\"get_tab_attributs\");"
														],
														"id": "ec94d655-641d-44b2-a7a4-ca9535290b24",
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"get_tab_attributs\",\"\");"
														],
														"id": "288bdaef-db1c-4905-bcc8-a22bbf278333",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {},
												"url": {
													"raw": "https://{{host}}/rest/vitis/tabs/:tab_id?token={{simple_user_token}}&attributs={{get_tab_attributs}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"tabs",
														":tab_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{get_tab_attributs}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "tab_id",
															"value": "{{get_tabs_tab_id}}"
														}
													]
												},
												"description": "Request to get Tab by mode id"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"id": "8f4a710f-7a5c-43c1-8ca0-d5e925d77656",
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"id": "bc4b80af-246f-4701-a2b5-c36056a428ef",
										"type": "text/javascript"
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Webservices",
							"description": "Folder for webservices",
							"item": [
								{
									"name": "With rights",
									"item": [
										{
											"name": "Get WebServices",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "847d1a7a-c369-4f91-9bab-cc33f800ee22",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"get_webservices_attributs\",\"\");"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "4b81cb5f-63c1-4cf4-9561-18b2b4b13ede",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"tests[\"webservices is ok\"] = jsonData.webservices instanceof Array;",
															"",
															"//tests[\"user_id is ok\"] = jsonData.users[0].user_id === parseInt(pm.environment.get(\"test_user_id\"));",
															"//tests[\"login is ok\"] = jsonData.users[0].login === pm.environment.get(\"test_user_login\");",
															"",
															"for(var param in jsonData.webservices[0]){",
															"    var variable = \"get_webservices_\" + param;",
															"    pm.environment.set(variable,jsonData.webservices[0][param]);",
															"}",
															"",
															"//Clean variable",
															"pm.environment.unset(\"get_webservices_attributs\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x_vm_json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/webservices?token={{main_token}}&attributs={{get_webservices_attributs}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"webservices"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{get_webservices_attributs}}",
															"equals": true
														}
													]
												},
												"description": "Request to get webservices"
											},
											"response": []
										},
										{
											"name": "Get WebService",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a89187e2-323e-45d8-aec6-e19280388694",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"get_webservices_attributs\",\"\");",
															"pm.environment.set(\"get_webservices_web_service\",pm.environment.get(\"get_webservices_name\"));"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "2cfd3258-fb4c-43b0-b4e9-71d4f9c6871d",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"tests[\"webservices is ok\"] = jsonData.webservices instanceof Array;",
															"",
															"var variable;",
															"for(var param in jsonData.webservices[0]){",
															"    variable = \"get_webservices_\" + param;",
															"    if(jsonData.webservices[0][param] != null){",
															"        if(pm.environment.get(variable) != null){",
															"            tests[param+ \" is ok\"] = jsonData.webservices[0][param] == pm.environment.get(variable);",
															"            pm.environment.unset(variable);",
															"        }else{",
															"            tests[param+ \" parameter was returned too with a : \" + typeof(jsonData.webservices[0][param])] = true;",
															"        }",
															"    }else if(jsonData.webservices[0][param] == null && pm.environment.get(variable) == (\"\" || null)){",
															"        tests[param+ \" is supposed ok (return filled with null argument)\"] = true;",
															"    }else{",
															"        tests[\"! Warning ! \"+ param + \" isn't ok\" ] = false;",
															"    }",
															"}",
															"",
															"//Clean variable",
															"pm.environment.unset(\"get_webservices_attributs\");",
															"//pm.environment.unset(\"get_webservices_web_service\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x_vm_json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/webservices/:web_service?token={{main_token}}&attributs={{get_webservices_attributs}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"webservices",
														":web_service"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{get_webservices_attributs}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "web_service",
															"value": "{{get_webservices_web_service}}"
														}
													]
												},
												"description": "Request to get WebService by id"
											},
											"response": []
										},
										{
											"name": "Get ressources list",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "6aeb4219-fcee-408a-8d32-d813b1e1000a",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"get_webservices_attributs\",\"\");"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "0df8b5b8-b506-4e7d-92c5-eacf573746e4",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"//Clean variable",
															"pm.environment.unset(\"get_webservices_attributs\");",
															"pm.environment.unset(\"get_webservices_attributs\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json, application/x_vm_json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/webservices/:web_service/ressources?token={{main_token}}&attributs={{get_webservices_attributs}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"webservices",
														":web_service",
														"ressources"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{get_webservices_attributs}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "web_service",
															"value": "{{get_webservices_web_service}}"
														}
													]
												},
												"description": "Request to get ressources list"
											},
											"response": []
										},
										{
											"name": "Get ressources infos",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "901d577b-57bf-437e-9282-c74c0a0f2c60",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"get_webservices_attributs\",\"\");"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "18dadffd-21aa-4eef-9073-52404f9ccd17",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"//Clean variable",
															"pm.environment.unset(\"get_webservices_web_service\");",
															"pm.environment.unset(\"get_webservices_ressource\");",
															"pm.environment.unset(\"get_webservices_attributs\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json, application/x_vm_json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/webservices/:web_service/ressources/:ressource?token={{main_token}}&attributs={{get_webservices_attributs}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"webservices",
														":web_service",
														"ressources",
														":ressource"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{get_webservices_attributs}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "web_service",
															"value": "{{get_webservices_web_service}}"
														},
														{
															"key": "ressource",
															"value": "{{get_webservices_ressource}}"
														}
													]
												},
												"description": "Request to get ressources infos"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"id": "cdd93756-d371-4315-b425-062192201088",
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"id": "07ef0b5c-9e55-4d8f-9f02-a9eaa8840e38",
												"type": "text/javascript"
											}
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Without rights",
									"item": [
										{
											"name": "Get WebServices (without rights)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "847d1a7a-c369-4f91-9bab-cc33f800ee22",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"get_webservices_attributs\",\"\");"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "51dac57c-a194-475c-b4f4-c76bf34d2431",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"tests[\"webservices is ok\"] = jsonData.webservices instanceof Array;",
															"",
															"//tests[\"user_id is ok\"] = jsonData.users[0].user_id === parseInt(pm.environment.get(\"test_user_id\"));",
															"//tests[\"login is ok\"] = jsonData.users[0].login === pm.environment.get(\"test_user_login\");",
															"",
															"for(var param in jsonData.webservices[0]){",
															"    var variable = \"get_webservices_\" + param;",
															"    pm.environment.set(variable,jsonData.webservices[0][param]);",
															"}",
															"",
															"//Clean variable",
															"pm.environment.unset(\"get_webservices_attributs\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x_vm_json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/webservices?token={{test_user_token}}&attributs={{get_webservices_attributs}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"webservices"
													],
													"query": [
														{
															"key": "token",
															"value": "{{test_user_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{get_webservices_attributs}}",
															"equals": true
														}
													]
												},
												"description": "Request to get webservices"
											},
											"response": []
										},
										{
											"name": "Get WebService (without rights)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "a89187e2-323e-45d8-aec6-e19280388694",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"get_webservices_attributs\",\"\");",
															"pm.environment.set(\"get_webservices_web_service\",pm.environment.get(\"get_webservices_name\"));"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "9d5f4f77-d7ad-4179-8de1-18245b65c189",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"tests[\"webservices is ok\"] = jsonData.webservices instanceof Array;",
															"",
															"var variable;",
															"for(var param in jsonData.webservices[0]){",
															"    variable = \"get_webservices_\" + param;",
															"    if(jsonData.webservices[0][param] != null){",
															"        if(pm.environment.get(variable) != null){",
															"            tests[param+ \" is ok\"] = jsonData.webservices[0][param] == pm.environment.get(variable);",
															"            pm.environment.unset(variable);",
															"        }else{",
															"            tests[param+ \" parameter was returned too with a : \" + typeof(jsonData.webservices[0][param])] = true;",
															"        }",
															"    }else if(jsonData.webservices[0][param] == null && pm.environment.get(variable) == (\"\" || null)){",
															"        tests[param+ \" is supposed ok (return filled with null argument)\"] = true;",
															"    }else{",
															"        tests[\"! Warning ! \"+ param + \" isn't ok\" ] = false;",
															"    }",
															"}",
															"",
															"//Clean variable",
															"pm.environment.unset(\"get_webservices_attributs\");",
															"pm.environment.unset(\"get_webservices_web_service\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x_vm_json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/webservices/:web_service?token={{main_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"webservices",
														":web_service"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{get_webservices_attributs}}",
															"equals": true,
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "web_service",
															"value": "{{get_webservices_web_service}}"
														}
													]
												},
												"description": "Request to get WebService by id"
											},
											"response": []
										},
										{
											"name": "Get ressources list (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9751642c-9637-4079-b1ad-e6ac71aa5ecd",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"//Clean variable",
															"pm.environment.unset(\"get_webservices_attributs\");"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "60318173-3912-4170-ae0a-b00000400de1",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"get_webservices_attributs\",\"\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json, application/x_vm_json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {},
												"url": {
													"raw": "https://{{host}}/rest/vitis/webservices/:web_service/ressources?token={{simple_user_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"webservices",
														":web_service",
														"ressources"
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{get_webservices_attributs}}",
															"equals": true,
															"disabled": true
														}
													],
													"variable": [
														{
															"key": "web_service",
															"value": "{{get_webservices_web_service}}"
														}
													]
												},
												"description": "Request to get ressources list"
											},
											"response": []
										},
										{
											"name": "Get ressources infos (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "153c1296-ee0d-49f6-b233-59be737a7aaa",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"//Clean variable",
															"pm.environment.unset(\"get_webservices_web_service\");",
															"pm.environment.unset(\"get_webservices_ressource\");",
															"pm.environment.unset(\"get_webservices_attributs\");",
															""
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "9b9af8aa-77df-49a2-b340-2e886e680b02",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"get_webservices_attributs\",\"\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json, application/x_vm_json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {},
												"url": {
													"raw": "https://{{host}}/rest/vitis/webservices/:web_service/ressources/:ressource?token={{simple_user_token}}&attributs={{get_webservices_attributs}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"webservices",
														":web_service",
														"ressources",
														":ressource"
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{get_webservices_attributs}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "web_service",
															"value": "{{get_webservices_web_service}}"
														},
														{
															"key": "ressource",
															"value": "{{get_webservices_ressource}}"
														}
													]
												},
												"description": "Request to get ressources infos"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"id": "306c624b-f6a2-4edb-80c6-16826387154f",
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"id": "0bc7f9e4-f9b1-4b8d-97dd-64490eafa761",
										"type": "text/javascript"
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Versions",
							"description": "Folder for versions",
							"item": [
								{
									"name": "With rights",
									"description": "",
									"item": [
										{
											"name": "Get versions",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															""
														],
														"id": "2af2f144-6e64-4652-8a84-ae52f0a6ddc4",
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}"
														],
														"id": "20d2c65a-b90c-422d-a3d9-8cc1f46aa36d",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {},
												"url": {
													"raw": "https://{{host}}/rest/vitis/versions?token={{main_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"versions"
													],
													"query": [
														{
															"equals": true,
															"key": "token",
															"value": "{{main_token}}"
														}
													]
												},
												"description": "Request to get versions"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Without rights",
									"description": "",
									"item": [
										{
											"name": "Get versions (without rights)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"",
															""
														],
														"id": "2af2f144-6e64-4652-8a84-ae52f0a6ddc4",
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}"
														],
														"id": "20d2c65a-b90c-422d-a3d9-8cc1f46aa36d",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {},
												"url": {
													"raw": "https://{{host}}/rest/vitis/versions?token={{simple_user_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"versions"
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														}
													]
												},
												"description": "Request to get versions"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"id": "311c294c-b575-4933-9eff-ad49cce69b9a",
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"id": "da1aa257-22ca-4f00-9cb1-c55f52030513",
												"type": "text/javascript"
											}
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"id": "127f279d-800c-4856-99ff-177112fda876",
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"id": "84978b67-f5ca-4a59-8677-011673ec4223",
										"type": "text/javascript"
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Logs - Without user only",
							"description": "Folder for logs",
							"item": [
								{
									"name": "Without rights ",
									"description": "",
									"item": [
										{
											"name": "Get logs tree (without rights)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"error_test\", true);"
														],
														"id": "1090eb34-54a8-40d2-a2e1-8234a59e5c67",
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"pm.environment.set(\"error_test\", false);"
														],
														"id": "bcf12d46-0f9b-478f-8be1-c0f1ea6b0e4c",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {},
												"url": {
													"raw": "https://{{host}}/rest/vitis/logs?token={{simple_user_token}}&application_name={{application_name}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"logs"
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														},
														{
															"key": "application_name",
															"value": "{{application_name}}",
															"equals": true
														}
													]
												},
												"description": "Request to get the logs tree"
											},
											"response": []
										},
										{
											"name": "delete log files (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"pm.environment.set(\"error_test\", false);",
															"pm.environment.unset(\"min_days\");"
														],
														"id": "19b8cc2b-1dd9-4b97-8ce0-311547f58cbb",
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"error_test\", true);",
															"pm.environment.set(\"min_days\",\"0\");"
														],
														"id": "4adfec04-4351-4b9e-9ba7-5f407f7fb9f0",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/logs?token={{simple_user_token}}&min_days={{min_days}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"logs"
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														},
														{
															"key": "min_days",
															"value": "{{min_days}}",
															"equals": true
														}
													]
												},
												"description": "Request to delete log files from min_days"
											},
											"response": []
										},
										{
											"name": "Get log file content (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"pm.environment.set(\"error_test\", false);",
															"pm.environment.unset(\"log_directory\");",
															"pm.environment.unset(\"file_name\");",
															"pm.environment.unset(\"folder\");"
														],
														"id": "1cf7c502-8365-4c6c-8bd1-e1e50f169a7c",
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"error_test\", true);",
															"pm.environment.set(\"log_directory\",\"\");",
															"pm.environment.set(\"file_name\",\"\");",
															"pm.environment.set(\"folder\",\"\");"
														],
														"id": "169bd63a-edfe-45aa-a0ae-481c9ba0aa3f",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/logs/:log_directory/file/:file_name?token={{simple_user_token}}&folder={{folder}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"logs",
														":log_directory",
														"file",
														":file_name"
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														},
														{
															"key": "folder",
															"value": "{{folder}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "log_directory",
															"value": "{{log_directory}}"
														},
														{
															"key": "file_name",
															"value": "{{file_name}}"
														}
													]
												},
												"description": "Request to get the content of a log file"
											},
											"response": []
										},
										{
											"name": "delete log files (without rights)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"error_test\", true);",
															"pm.environment.set(\"log_directory\",\"\");",
															"pm.environment.set(\"file_name\",\"\");",
															"pm.environment.set(\"folder\",\"\");"
														],
														"id": "5eda3a0c-09df-452c-827c-3cbc360573e0",
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"pm.environment.set(\"error_test\", false);",
															"pm.environment.unset(\"log_directory\");",
															"pm.environment.unset(\"file_name\");",
															"pm.environment.unset(\"folder\");"
														],
														"id": "ac24b637-0643-4a88-a6e3-6dc22475b88e",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Accept",
														"value": "application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/logs/:log_directory/file/:file_name?token={{simple_user_token}}&folder={{folder}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"logs",
														":log_directory",
														"file",
														":file_name"
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														},
														{
															"key": "folder",
															"value": "{{folder}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "log_directory",
															"value": "{{log_directory}}"
														},
														{
															"key": "file_name",
															"value": "{{file_name}}"
														}
													]
												},
												"description": "Request to delete log files"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"id": "5df9b3b2-58a2-4e5f-9d9d-b8105c8f7718",
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"id": "f75c1d85-a6dd-4cdc-ad57-480c4156681a",
												"type": "text/javascript"
											}
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"id": "e7f7a4d5-f39f-4b97-a737-042de2395a11",
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"id": "83f56e75-f6bf-4bbd-b5d0-1bca94cd20f1",
										"type": "text/javascript"
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Properties",
							"description": "Folder for properties",
							"item": [
								{
									"name": "With rights",
									"description": "",
									"item": [
										{
											"name": "Get properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "48b6129a-60e8-45a9-8b5b-3d6a7bae187d",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"var response = JSON.stringify(jsonData);",
															"pm.environment.set(\"get_properties_response\",response);",
															""
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/properties?token={{main_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"properties"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														}
													]
												},
												"description": "Request to get properties"
											},
											"response": []
										},
										{
											"name": "Update properties",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "300260ce-6f5d-4eeb-9c78-dcd0de88af1c",
														"type": "text/javascript",
														"exec": [
															"var properties;",
															"properties = JSON.parse(pm.environment.get(\"get_properties_response\"));",
															"properties.language = 'en';",
															"pm.environment.set(\"properties\", properties);",
															"pm.environment.set(\"module_name\",\"vitis\");",
															"",
															"properties = JSON.stringify(properties);",
															"pm.environment.set(\"get_properties_response\",properties);"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "f49cfaff-797f-4a60-b2be-93471246ef6d",
														"type": "text/javascript",
														"exec": [
															"pm.environment.unset(\"properties\");",
															"pm.environment.unset(\"module_name\");"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "token",
															"type": "text",
															"value": "{{main_token}}"
														}
													]
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/:properties/:module_name",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														":properties",
														":module_name"
													],
													"variable": [
														{
															"key": "properties",
															"value": "{{properties}}"
														},
														{
															"key": "module_name",
															"value": "{{module_name}}"
														}
													]
												},
												"description": "Request to update the properties"
											},
											"response": []
										},
										{
											"name": "Test Update properties",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7ddda159-8020-48c6-af5c-3418cdddcd49",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"",
															"var properties;",
															"properties = JSON.parse(pm.environment.get(\"get_properties_response\"));",
															"for(var param in properties){",
															"    if(properties[param] != null && jsonData[param] != null){",
															"        if(typeof(properties[param]) == \"object\" && typeof(jsonData[param]) == \"object\"){",
															"            for(var param2 in properties[param]){",
															"                console.log(properties[param][param2] + \" : \"+ jsonData[param][param2]);",
															"                tests[param2+ \" is ok\"] = properties[param][param2] === jsonData[param][param2];",
															"            }",
															"        }else{",
															"            tests[param+ \" is ok\"] = properties[param] === jsonData[param];",
															"        }",
															"    }",
															"}",
															"pm.environment.unset(\"get_properties_response\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/properties?token={{main_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"properties"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														}
													]
												},
												"description": "Request to get properties"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Without rights",
									"description": "",
									"item": [
										{
											"name": "Get properties (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "670462a3-d7d3-47b6-9b8f-94da734d8def",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"var response = JSON.stringify(jsonData);",
															"pm.environment.set(\"get_properties_response\",response);"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/properties?token={{simple_user_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"properties"
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														}
													]
												},
												"description": "Request to get properties"
											},
											"response": []
										},
										{
											"name": "Update properties (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "fbf9087d-0a5c-4ca7-8ec6-4d541ddfa36e",
														"type": "text/javascript",
														"exec": [
															"pm.environment.unset(\"properties\");",
															"pm.environment.unset(\"module_name\");",
															"pm.environment.set(\"error_test\", false);"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a6d01138-6cd5-4f85-a849-9b75b2f77360",
														"type": "text/javascript",
														"exec": [
															"var properties;",
															"properties = JSON.parse(pm.environment.get(\"get_properties_response\"));",
															"properties.language = 'en';",
															"pm.environment.set(\"properties\", properties);",
															"pm.environment.set(\"module_name\",\"vitis\");",
															"",
															"properties = JSON.stringify(properties);",
															"pm.environment.set(\"get_properties_response\",properties);",
															"pm.environment.set(\"error_test\", true);"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "token",
															"type": "text",
															"value": "{{simple_user_token}}"
														}
													]
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/:properties/:module_name",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														":properties",
														":module_name"
													],
													"variable": [
														{
															"key": "properties",
															"value": "{{properties}}"
														},
														{
															"key": "module_name",
															"value": "{{module_name}}"
														}
													]
												},
												"description": "Request to update the properties"
											},
											"response": []
										},
										{
											"name": "Test Update properties (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "d8557a08-848e-4473-8e94-da0eb0bd0345",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"",
															"var properties;",
															"properties = JSON.parse(pm.environment.get(\"get_properties_response\"));",
															"for(var param in properties){",
															"    if(properties[param] != null && jsonData[param] != null){",
															"    tests[param+ \" is ok\"] = properties[param] === jsonData[param];",
															"    }",
															"}",
															"pm.environment.unset(\"get_properties_response\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/properties?token={{simple_user_token}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"properties"
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														}
													]
												},
												"description": "Request to get properties"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "7b87f66c-4f8c-488c-929a-898d8bfe4ad4",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "3c94ae36-1394-4de5-9066-5c7b20321ea9",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Modes - NTY (PUT & TEST)",
							"description": "Folder for modes",
							"item": [
								{
									"name": "With rights",
									"description": "",
									"item": [
										{
											"name": "Get Modes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"modes is ok\"] = jsonData.modes instanceof Array;",
															"",
															"//Get parameters name for later tests",
															"var order_by;",
															"var filter;",
															"    for(var param in jsonData.modes[0]){",
															"        order_by = param;",
															"        filter = jsonData.modes[0][param];",
															"        if(jsonData.modes[0][param] !== null){",
															"            break;",
															"        }",
															"    }",
															"",
															"//Tests order_by and sort_order",
															"var sort = true;",
															"var varA, varB = null;",
															"var ordsortjsonData;",
															"",
															"//Send request with order_by variable name in ASC order",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/modes?token=\"+pm.environment.get(\"main_token\")+\"&order_by=\"+order_by+\"&sort_order=asc\", function (err, ordsortResponse) {",
															"    ordsortjsonData = ordsortResponse.json();",
															"    ",
															"//Check sort",
															"    for(var parameter in ordsortjsonData.modes){",
															"        varB = ordsortjsonData.modes[parameter][order_by];",
															"        if(varB !== null && varA !== null){",
															"            if(varA > varB){ ",
															"                sort = false;",
															"                break;",
															"            }",
															"        }",
															"        varA = varB;",
															"    }",
															"    pm.test(\"order_by and sort_order is ok\", function () {pm.expect(sort).to.be.true});",
															"});",
															"",
															"//Tests limit and offset",
															"var maxListCount, firstparamName, lastparamName, paramName, limoffjsonData;",
															"var lim = true, off = true;",
															"",
															"//Setup limit and offset check parameters",
															"if(jsonData.list_count > 1){",
															"    maxListCount = parseInt(jsonData.list_count) - 1 ;",
															"    firstparamName = jsonData.modes[0][order_by];",
															"    lastparamName = jsonData.modes[parseInt(maxListCount)][order_by];",
															"    maxListCount--;",
															"    ",
															"//Send request with limit at maxListCount -1 and offset at 1",
															"    pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/modes?token=\"+pm.environment.get(\"main_token\")+\"&limit=\"+ parseInt(maxListCount) +\"&offset=1\", function (err, limoffResponse) {",
															"        limoffjsonData = limoffResponse.json();",
															"    ",
															"//Check limit and offset result",
															"        for(var parameter in limoffjsonData.attjsonData){",
															"            paramName = limoffjsonData.modes[parameter][order_by];",
															"            if(paramName === firstparamName){",
															"                off = false;",
															"            }",
															"            if(paramName === lastparamName){",
															"                lim = false;",
															"            }",
															"        }",
															"        pm.test(\"offset is ok\", function () {pm.expect(off).to.be.true});",
															"        pm.test(\"limit is ok\", function () {pm.expect(lim).to.be.true});",
															"    });",
															"}",
															"",
															"//Test attributes",
															"var attjsonData;",
															"var att = true;",
															"",
															"//Send request to get only the order_by variable name attribute",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/modes?token=\"+pm.environment.get(\"main_token\")+\"&attributs=\"+order_by, function (err, attResponse) {",
															"    attjsonData = attResponse.json();",
															"",
															"//Check attribute ",
															"    for(var parameter in attjsonData.modes){",
															"        for(var attparam in attjsonData.modes[parameter]){",
															"            if(attparam !== order_by){",
															"                att = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"attribute is ok\", function () {pm.expect(att).to.be.true});",
															"});",
															"",
															"//Test filter",
															"var fltrjson = JSON.stringify({'column': order_by, 'compare_operator': '=', 'value': filter});",
															"var fltrjsonData;",
															"var fltr = true;",
															"",
															"//Send request with filter argument",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/modes?token=\"+pm.environment.get(\"main_token\")+\"&filter=\"+fltrjson, function (err, fltrResponse) {",
															"    fltrjsonData = fltrResponse.json();",
															"",
															"//Check filter",
															"    for(var parameter in fltrjsonData.modes){",
															"        for(var fltrparam in fltrjsonData.modes[parameter]){",
															"            var tmp = fltrjsonData.modes[parameter][fltrparam];",
															"            if(fltrparam === order_by && tmp !== filter){",
															"                fltr = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"filter is ok\", function () {pm.expect(fltr).to.be.true});",
															"});",
															"",
															"//Save variable for without 's' next test",
															"var modes = [];",
															"for(var param in jsonData.modes[0]){",
															"    var variable = \"get_modes_\" + param;",
															"    pm.environment.set(variable,jsonData.modes[0][param]);",
															"}",
															"for(var param in jsonData.modes){",
															"    modes.push(jsonData.modes[param].mode_id);",
															"}",
															"modes = modes.reverse().join('|');",
															"console.log(modes);",
															"pm.environment.set(\"sort_modes_modes_id\",modes);",
															"",
															"",
															"",
															"//Clean variables",
															"pm.environment.unset(\"get_modes_order_by\");",
															"pm.environment.unset(\"get_modes_sort_order\");",
															"pm.environment.unset(\"get_modes_limit\");",
															"pm.environment.unset(\"get_modes_offset\");",
															"pm.environment.unset(\"get_modes_attributs\");",
															"pm.environment.unset(\"get_modes_filter\");",
															"pm.environment.unset(\"get_modes_distinct\");",
															"",
															"",
															""
														],
														"id": "6dc41edb-8b31-4210-aad0-1c2bd98de996",
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"get_modes_order_by\", \"\");",
															"pm.environment.set(\"get_modes_sort_order\", \"\");",
															"pm.environment.set(\"get_modes_limit\", \"50\");",
															"pm.environment.set(\"get_modes_offset\", \"\");",
															"pm.environment.set(\"get_modes_attributs\", \"\");",
															"pm.environment.set(\"get_modes_filter\", \"\");",
															"pm.environment.set(\"get_modes_distinct\", \"\");"
														],
														"id": "fb3b58b4-54f2-4831-abd1-a6c0c264e3ba",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/modes?token={{main_token}}&order_by={{get_modes_order_by}}&sort_order={{get_modes_sort_order}}&limit={{get_modes_limit}}&offset={{get_modes_offset}}&attributs={{get_modes_attributs}}&filter={{get_modes_filter}}&distinct={{get_modes_distinct}}&action={{get_modes_action}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"modes"
													],
													"query": [
														{
															"equals": true,
															"key": "token",
															"value": "{{main_token}}"
														},
														{
															"equals": true,
															"key": "order_by",
															"value": "{{get_modes_order_by}}"
														},
														{
															"equals": true,
															"key": "sort_order",
															"value": "{{get_modes_sort_order}}"
														},
														{
															"equals": true,
															"key": "limit",
															"value": "{{get_modes_limit}}"
														},
														{
															"equals": true,
															"key": "offset",
															"value": "{{get_modes_offset}}"
														},
														{
															"equals": true,
															"key": "attributs",
															"value": "{{get_modes_attributs}}"
														},
														{
															"equals": true,
															"key": "filter",
															"value": "{{get_modes_filter}}"
														},
														{
															"equals": true,
															"key": "distinct",
															"value": "{{get_modes_distinct}}"
														},
														{
															"equals": true,
															"key": "action",
															"value": "{{get_modes_action}}"
														}
													]
												},
												"description": "Request to get Modes"
											},
											"response": []
										},
										{
											"name": "Get Mode",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"get_mode_attributs\", \"\");",
															""
														],
														"id": "b2f1e576-d872-4d38-818e-270800c15981",
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"tests[\"mode is ok\"] = jsonData.modes instanceof Array;",
															"",
															"var variable;",
															"for(var param in jsonData.modes[0]){",
															"    variable = \"get_modes_\" + param;",
															"    if(jsonData.modes[0][param] != null){",
															"        if(pm.environment.get(variable) != null){",
															"            tests[param+ \" is ok\"] = jsonData.modes[0][param] == pm.environment.get(variable);",
															"            pm.environment.unset(variable);",
															"        }else{",
															"            tests[param+ \" parameter was returned too with a : \" + typeof(jsonData.modes[0][param])] = true;",
															"        }",
															"    }else if(jsonData.modes[0][param] == null && pm.environment.get(variable) == \"\"){",
															"        tests[param+ \" is supposed ok (return filled with null argument)\"] = true;",
															"    }else{",
															"        tests[\"! Warning ! \"+ param + \" isn't ok\" ] = false;",
															"    }",
															"}",
															"",
															"pm.environment.unset(\"get_mode_attributs\");"
														],
														"id": "a8990cea-afe1-45a6-997b-29c6b604b8d7",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/modes/:mode_id?token={{main_token}}&attributs={{get_mode_attributs}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"modes",
														":mode_id"
													],
													"query": [
														{
															"equals": true,
															"key": "token",
															"value": "{{main_token}}"
														},
														{
															"equals": true,
															"key": "attributs",
															"value": "{{get_mode_attributs}}"
														}
													],
													"variable": [
														{
															"key": "mode_id",
															"value": "{{get_modes_mode_id}}"
														}
													]
												},
												"description": "Request to get Mode by id"
											},
											"response": []
										},
										{
											"name": "Sort Modes",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"id": "da83e22d-5210-4586-8754-a0ca12156206",
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}"
														],
														"id": "6995df5c-97d8-41d4-ae95-d1b357d90a65",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/modes/sorting?token={{main_token}}&modes_id={{sort_modes_modes_id}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"modes",
														"sorting"
													],
													"query": [
														{
															"equals": true,
															"key": "token",
															"value": "{{main_token}}"
														},
														{
															"equals": true,
															"key": "modes_id",
															"value": "{{sort_modes_modes_id}}"
														}
													]
												},
												"description": "Request to sort the modes of the application"
											},
											"response": []
										},
										{
											"name": "Test Sort Modes",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"modes is ok\"] = jsonData.modes instanceof Array;",
															"",
															"var modes = [];",
															"for(var param in jsonData.modes){",
															"    modes.push(jsonData.modes[param].mode_id);",
															"}",
															"",
															"//Clean variables",
															"pm.environment.unset(\"sort_modes_modes_id\",modes);",
															"",
															"pm.environment.unset(\"get_modes_order_by\");",
															"pm.environment.unset(\"get_modes_sort_order\");",
															"pm.environment.unset(\"get_modes_limit\");",
															"pm.environment.unset(\"get_modes_offset\");",
															"pm.environment.unset(\"get_modes_attributs\");",
															"pm.environment.unset(\"get_modes_filter\");",
															"pm.environment.unset(\"get_modes_distinct\");",
															"",
															"",
															""
														],
														"id": "c525e99d-806a-4972-90e6-e576878d992c",
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"get_modes_order_by\", \"index\");",
															"pm.environment.set(\"get_modes_sort_order\", \"\");",
															"pm.environment.set(\"get_modes_limit\", \"50\");",
															"pm.environment.set(\"get_modes_offset\", \"\");",
															"pm.environment.set(\"get_modes_attributs\", \"\");",
															"pm.environment.set(\"get_modes_filter\", \"\");",
															"pm.environment.set(\"get_modes_distinct\", \"\");"
														],
														"id": "723a52dc-34c3-4aba-9c27-fac1122d6278",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {},
												"url": {
													"raw": "https://{{host}}/rest/vitis/modes?token={{main_token}}&order_by={{get_modes_order_by}}&sort_order={{get_modes_sort_order}}&limit={{get_modes_limit}}&offset={{get_modes_offset}}&attributs={{get_modes_attributs}}&filter={{get_modes_filter}}&distinct={{get_modes_distinct}}&action={{get_modes_action}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"modes"
													],
													"query": [
														{
															"equals": true,
															"key": "token",
															"value": "{{main_token}}"
														},
														{
															"equals": true,
															"key": "order_by",
															"value": "{{get_modes_order_by}}"
														},
														{
															"equals": true,
															"key": "sort_order",
															"value": "{{get_modes_sort_order}}"
														},
														{
															"equals": true,
															"key": "limit",
															"value": "{{get_modes_limit}}"
														},
														{
															"equals": true,
															"key": "offset",
															"value": "{{get_modes_offset}}"
														},
														{
															"equals": true,
															"key": "attributs",
															"value": "{{get_modes_attributs}}"
														},
														{
															"equals": true,
															"key": "filter",
															"value": "{{get_modes_filter}}"
														},
														{
															"equals": true,
															"key": "distinct",
															"value": "{{get_modes_distinct}}"
														},
														{
															"equals": true,
															"key": "action",
															"value": "{{get_modes_action}}"
														}
													]
												},
												"description": "Request to get Modes"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Without rights",
									"description": "",
									"item": [
										{
											"name": "Get Modes (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"modes is ok\"] = jsonData.modes instanceof Array;",
															"",
															"//Get parameters name for later tests",
															"var order_by;",
															"var filter;",
															"    for(var param in jsonData.modes[0]){",
															"        order_by = param;",
															"        filter = jsonData.modes[0][param];",
															"        if(jsonData.modes[0][param] !== null){",
															"            break;",
															"        }",
															"    }",
															"",
															"//Tests order_by and sort_order",
															"var sort = true;",
															"var varA, varB = null;",
															"var ordsortjsonData;",
															"",
															"//Send request with order_by variable name in ASC order",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/modes?token=\"+pm.environment.get(\"main_token\")+\"&order_by=\"+order_by+\"&sort_order=asc\", function (err, ordsortResponse) {",
															"    ordsortjsonData = ordsortResponse.json();",
															"    ",
															"//Check sort",
															"    for(var parameter in ordsortjsonData.modes){",
															"        varB = ordsortjsonData.modes[parameter][order_by];",
															"        if(varB !== null && varA !== null){",
															"            if(varA > varB){ ",
															"                sort = false;",
															"                break;",
															"            }",
															"        }",
															"        varA = varB;",
															"    }",
															"    pm.test(\"order_by and sort_order is ok\", function () {pm.expect(sort).to.be.true});",
															"});",
															"",
															"//Tests limit and offset",
															"var maxListCount, firstparamName, lastparamName, paramName, limoffjsonData;",
															"var lim = true, off = true;",
															"",
															"//Setup limit and offset check parameters",
															"if(jsonData.list_count > 1){",
															"    maxListCount = parseInt(jsonData.list_count) - 1 ;",
															"    firstparamName = jsonData.modes[0][order_by];",
															"    lastparamName = jsonData.modes[parseInt(maxListCount)][order_by];",
															"    maxListCount--;",
															"    ",
															"//Send request with limit at maxListCount -1 and offset at 1",
															"    pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/modes?token=\"+pm.environment.get(\"main_token\")+\"&limit=\"+ parseInt(maxListCount) +\"&offset=1\", function (err, limoffResponse) {",
															"        limoffjsonData = limoffResponse.json();",
															"    ",
															"//Check limit and offset result",
															"        for(var parameter in limoffjsonData.attjsonData){",
															"            paramName = limoffjsonData.modes[parameter][order_by];",
															"            if(paramName === firstparamName){",
															"                off = false;",
															"            }",
															"            if(paramName === lastparamName){",
															"                lim = false;",
															"            }",
															"        }",
															"        pm.test(\"offset is ok\", function () {pm.expect(off).to.be.true});",
															"        pm.test(\"limit is ok\", function () {pm.expect(lim).to.be.true});",
															"    });",
															"}",
															"",
															"//Test attributes",
															"var attjsonData;",
															"var att = true;",
															"",
															"//Send request to get only the order_by variable name attribute",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/modes?token=\"+pm.environment.get(\"main_token\")+\"&attributs=\"+order_by, function (err, attResponse) {",
															"    attjsonData = attResponse.json();",
															"",
															"//Check attribute ",
															"    for(var parameter in attjsonData.modes){",
															"        for(var attparam in attjsonData.modes[parameter]){",
															"            if(attparam !== order_by){",
															"                att = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"attribute is ok\", function () {pm.expect(att).to.be.true});",
															"});",
															"",
															"//Test filter",
															"var fltrjson = JSON.stringify({'column': order_by, 'compare_operator': '=', 'value': filter});",
															"var fltrjsonData;",
															"var fltr = true;",
															"",
															"//Send request with filter argument",
															"pm.sendRequest(\"https://\"+pm.environment.get(\"host\")+\"/rest/vitis/modes?token=\"+pm.environment.get(\"main_token\")+\"&filter=\"+fltrjson, function (err, fltrResponse) {",
															"    fltrjsonData = fltrResponse.json();",
															"",
															"//Check filter",
															"    for(var parameter in fltrjsonData.modes){",
															"        for(var fltrparam in fltrjsonData.modes[parameter]){",
															"            var tmp = fltrjsonData.modes[parameter][fltrparam];",
															"            if(fltrparam === order_by && tmp !== filter){",
															"                fltr = false;",
															"                break;",
															"            }",
															"        }",
															"    }",
															"pm.test(\"filter is ok\", function () {pm.expect(fltr).to.be.true});",
															"});",
															"",
															"//Save variable for without 's' next test",
															"var modes = [];",
															"for(var param in jsonData.modes[0]){",
															"    var variable = \"get_modes_\" + param;",
															"    pm.environment.set(variable,jsonData.modes[0][param]);",
															"}",
															"for(var param in jsonData.modes){",
															"    modes.push(jsonData.modes[param].mode_id);",
															"}",
															"modes = modes.reverse().join('|');",
															"console.log(modes);",
															"pm.environment.set(\"sort_modes_modes_id\",modes);",
															"",
															"",
															"",
															"//Clean variables",
															"pm.environment.unset(\"get_modes_order_by\");",
															"pm.environment.unset(\"get_modes_sort_order\");",
															"pm.environment.unset(\"get_modes_limit\");",
															"pm.environment.unset(\"get_modes_offset\");",
															"pm.environment.unset(\"get_modes_attributs\");",
															"pm.environment.unset(\"get_modes_filter\");",
															"pm.environment.unset(\"get_modes_distinct\");",
															"",
															"",
															""
														],
														"id": "6dc41edb-8b31-4210-aad0-1c2bd98de996",
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"get_modes_order_by\", \"\");",
															"pm.environment.set(\"get_modes_sort_order\", \"\");",
															"pm.environment.set(\"get_modes_limit\", \"50\");",
															"pm.environment.set(\"get_modes_offset\", \"\");",
															"pm.environment.set(\"get_modes_attributs\", \"\");",
															"pm.environment.set(\"get_modes_filter\", \"\");",
															"pm.environment.set(\"get_modes_distinct\", \"\");"
														],
														"id": "fb3b58b4-54f2-4831-abd1-a6c0c264e3ba",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {},
												"url": {
													"raw": "https://{{host}}/rest/vitis/modes?token={{simple_user_token}}&order_by={{get_modes_order_by}}&sort_order={{get_modes_sort_order}}&limit={{get_modes_limit}}&offset={{get_modes_offset}}&attributs={{get_modes_attributs}}&filter={{get_modes_filter}}&distinct={{get_modes_distinct}}&action={{get_modes_action}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"modes"
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														},
														{
															"key": "order_by",
															"value": "{{get_modes_order_by}}",
															"equals": true
														},
														{
															"key": "sort_order",
															"value": "{{get_modes_sort_order}}",
															"equals": true
														},
														{
															"key": "limit",
															"value": "{{get_modes_limit}}",
															"equals": true
														},
														{
															"key": "offset",
															"value": "{{get_modes_offset}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{get_modes_attributs}}",
															"equals": true
														},
														{
															"key": "filter",
															"value": "{{get_modes_filter}}",
															"equals": true
														},
														{
															"key": "distinct",
															"value": "{{get_modes_distinct}}",
															"equals": true
														},
														{
															"key": "action",
															"value": "{{get_modes_action}}",
															"equals": true
														}
													]
												},
												"description": "Request to get Modes"
											},
											"response": []
										},
										{
											"name": "Get Mode (without rights)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"get_mode_attributs\", \"\");",
															""
														],
														"id": "b2f1e576-d872-4d38-818e-270800c15981",
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"var jsonData = pm.response.json();",
															"tests[\"mode is ok\"] = jsonData.modes instanceof Array;",
															"",
															"var variable;",
															"for(var param in jsonData.modes[0]){",
															"    variable = \"get_modes_\" + param;",
															"    if(jsonData.modes[0][param] != null){",
															"        if(pm.environment.get(variable) != null){",
															"            tests[param+ \" is ok\"] = jsonData.modes[0][param] == pm.environment.get(variable);",
															"            pm.environment.unset(variable);",
															"        }else{",
															"            tests[param+ \" parameter was returned too with a : \" + typeof(jsonData.modes[0][param])] = true;",
															"        }",
															"    }else if(jsonData.modes[0][param] == null && pm.environment.get(variable) == \"\"){",
															"        tests[param+ \" is supposed ok (return filled with null argument)\"] = true;",
															"    }else{",
															"        tests[\"! Warning ! \"+ param + \" isn't ok\" ] = false;",
															"    }",
															"}",
															"",
															"pm.environment.unset(\"get_mode_attributs\");"
														],
														"id": "a8990cea-afe1-45a6-997b-29c6b604b8d7",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {},
												"url": {
													"raw": "https://{{host}}/rest/vitis/modes/:mode_id?token={{simple_user_token}}&attributs={{get_mode_attributs}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"modes",
														":mode_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{get_mode_attributs}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "mode_id",
															"value": "{{get_modes_mode_id}}"
														}
													]
												},
												"description": "Request to get Mode by id"
											},
											"response": []
										},
										{
											"name": "Sort Modes (without rights)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"id": "da83e22d-5210-4586-8754-a0ca12156206",
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}"
														],
														"id": "6995df5c-97d8-41d4-ae95-d1b357d90a65",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {},
												"url": {
													"raw": "https://{{host}}/rest/vitis/modes/sorting?token={{simple_user_token}}&modes_id={{sort_modes_modes_id}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"modes",
														"sorting"
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														},
														{
															"key": "modes_id",
															"value": "{{sort_modes_modes_id}}",
															"equals": true
														}
													]
												},
												"description": "Request to sort the modes of the application"
											},
											"response": []
										},
										{
											"name": "Test Sort Modes (without rights)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"modes is ok\"] = jsonData.modes instanceof Array;",
															"",
															"var modes = [];",
															"for(var param in jsonData.modes){",
															"    modes.push(jsonData.modes[param].mode_id);",
															"}",
															"",
															"//Clean variables",
															"pm.environment.unset(\"sort_modes_modes_id\",modes);",
															"",
															"pm.environment.unset(\"get_modes_order_by\");",
															"pm.environment.unset(\"get_modes_sort_order\");",
															"pm.environment.unset(\"get_modes_limit\");",
															"pm.environment.unset(\"get_modes_offset\");",
															"pm.environment.unset(\"get_modes_attributs\");",
															"pm.environment.unset(\"get_modes_filter\");",
															"pm.environment.unset(\"get_modes_distinct\");",
															"",
															"",
															""
														],
														"id": "c525e99d-806a-4972-90e6-e576878d992c",
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.environment.set(\"get_modes_order_by\", \"index\");",
															"pm.environment.set(\"get_modes_sort_order\", \"\");",
															"pm.environment.set(\"get_modes_limit\", \"50\");",
															"pm.environment.set(\"get_modes_offset\", \"\");",
															"pm.environment.set(\"get_modes_attributs\", \"\");",
															"pm.environment.set(\"get_modes_filter\", \"\");",
															"pm.environment.set(\"get_modes_distinct\", \"\");"
														],
														"id": "723a52dc-34c3-4aba-9c27-fac1122d6278",
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json, application/x-vm-json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {},
												"url": {
													"raw": "https://{{host}}/rest/vitis/modes?token={{simple_user_token}}&order_by={{get_modes_order_by}}&sort_order={{get_modes_sort_order}}&limit={{get_modes_limit}}&offset={{get_modes_offset}}&attributs={{get_modes_attributs}}&filter={{get_modes_filter}}&distinct={{get_modes_distinct}}&action={{get_modes_action}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"modes"
													],
													"query": [
														{
															"key": "token",
															"value": "{{simple_user_token}}",
															"equals": true
														},
														{
															"key": "order_by",
															"value": "{{get_modes_order_by}}",
															"equals": true
														},
														{
															"key": "sort_order",
															"value": "{{get_modes_sort_order}}",
															"equals": true
														},
														{
															"key": "limit",
															"value": "{{get_modes_limit}}",
															"equals": true
														},
														{
															"key": "offset",
															"value": "{{get_modes_offset}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{get_modes_attributs}}",
															"equals": true
														},
														{
															"key": "filter",
															"value": "{{get_modes_filter}}",
															"equals": true
														},
														{
															"key": "distinct",
															"value": "{{get_modes_distinct}}",
															"equals": true
														},
														{
															"key": "action",
															"value": "{{get_modes_action}}",
															"equals": true
														}
													]
												},
												"description": "Request to get Modes"
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"id": "08ee67ba-464b-42c3-b175-5a7e47388e8e",
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"id": "14720bc7-a36b-4acd-883d-795ba379c125",
												"type": "text/javascript"
											}
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"id": "a3614a31-2d5c-4f14-b8e0-7c1078351166",
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"id": "1d77acd7-645f-411d-b47e-d28fd8ccff36",
										"type": "text/javascript"
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "End",
							"item": [
								{
									"name": "Get token",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dadbc20b-bd82-4858-831e-abde0cc638e2",
												"type": "text/javascript",
												"exec": [
													"pm.environment.unset(\"main_token\");",
													"pm.environment.unset(\"main_admin_id\");",
													"pm.environment.unset(\"test_user_token\");",
													"pm.environment.unset(\"test_user_id\");",
													"pm.environment.unset(\"simple_user_token\");",
													"pm.environment.unset(\"simple_user_id\");",
													"pm.environment.unset(\"get_webservices_attributs\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {},
										"url": {
											"raw": "https://{{host}}/rest/vitis/privatetoken?token={{main_token}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"privatetoken"
											],
											"query": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"equals": true
												}
											]
										},
										"description": "Vide les variables d'environnement utilisées pendant le scénario"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"id": "75515896-47e6-47c6-b56f-8f793ca1c20e",
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"id": "5c7df45c-6925-4881-a22d-ffecac3c9bfd",
										"type": "text/javascript"
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "d5186e34-d5d9-445e-8f14-95de81ba351e",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"id": "5180ab8e-fb54-4fdf-b85a-44a8033da992",
								"type": "text/javascript"
							}
						}
					],
					"_postman_isSubFolder": true
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"id": "6e90210d-4e73-4fd5-a426-46f2e64831aa",
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"if(pm.response.responseSize === 0){",
							"    tests['No response'] = false;",
							"    return null;",
							"}",
							"",
							"/**",
							" * Si ce paramètre vaut true, cela veut dire que ",
							" * le test doit de générer une erreur ",
							" */",
							"var bErrorTest = pm.environment.get(\"error_test\");",
							"bErrorTest = (bErrorTest === false) || (bErrorTest === \"false\") ? false : true;",
							"",
							"var jsonData = pm.response.json();",
							"",
							"if(!bErrorTest){",
							"    ",
							"    pm.test(\"Status equal 1\", function () {",
							"        pm.expect(jsonData.status).to.eql(1);",
							"    });",
							"    pm.test(\"Status code is 200\", function () {",
							"        pm.response.to.have.status(200);",
							"    });",
							"",
							"    if(jsonData.status === 0){",
							"        if (jsonData.errorMessage !== null){",
							"            var ErrorMess = jsonData.errorMessage;",
							"            tests[ErrorMess]=false;",
							"        }",
							"        else{",
							"            var ErrorMess = jsonData.error;",
							"            tests[ErrorMess]=false;",
							"        }",
							"    }",
							"}else{",
							"    pm.test(\"Status equal 0\", function () {",
							"        pm.expect(jsonData.status).to.eql(0);",
							"    });",
							"    if(jsonData.status === 0){",
							"        if (jsonData.errorMessage !== null){",
							"            var ErrorMess = jsonData.errorMessage;",
							"            tests[ErrorMess]=true;",
							"        }",
							"        else{",
							"            var ErrorMess = jsonData.error;",
							"            tests[ErrorMess]=true;",
							"        }",
							"    }",
							"}",
							"",
							"// Repasse en mode normal",
							"pm.environment.set(\"error_test\", false);"
						],
						"id": "7f34ae6d-6d33-4184-802c-6a1795773b40",
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "ToDo Next",
			"item": [
				{
					"name": "Domain and AD - NTY",
					"item": [
						{
							"name": "ActiveDirectory",
							"description": "Folder for ActiveDirectory",
							"item": [
								{
									"name": "Test connection to active directory",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/ActiveDirectory/Test?token={{token}}&dotest_id={{dotest_id}}&login={{login}}&password={{password}}&object=person",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"ActiveDirectory",
												"Test"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "dotest_id",
													"value": "{{dotest_id}}"
												},
												{
													"key": "login",
													"value": "{{login}}"
												},
												{
													"key": "password",
													"value": "{{password}}"
												},
												{
													"key": "object",
													"value": "person"
												}
											]
										},
										"description": "Request to test connection to active directory"
									},
									"response": []
								},
								{
									"name": "Get Active Directory tree of domain",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/ActiveDirectory/Tree?token={{token}}&dotest_id={{dotest_id}}&login={{login}}&password={{password}}&object=person",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"ActiveDirectory",
												"Tree"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "dotest_id",
													"value": "{{dotest_id}}"
												},
												{
													"key": "login",
													"value": "{{login}}"
												},
												{
													"key": "password",
													"value": "{{password}}"
												},
												{
													"key": "object",
													"value": "person"
												}
											]
										},
										"description": "Request to get active Directory tree of domain by id"
									},
									"response": []
								},
								{
									"name": "Search Active Directory users",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/ActiveDirectory/Users?token={{token}}&dotest_id={{dotest_id}}&login={{login}}&password={{password}}&search_account={{search_account}}&search_groups={{search_groups}}&search_department={{search_department}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"ActiveDirectory",
												"Users"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "dotest_id",
													"value": "{{dotest_id}}"
												},
												{
													"key": "login",
													"value": "{{login}}"
												},
												{
													"key": "password",
													"value": "{{password}}"
												},
												{
													"key": "search_account",
													"value": "{{search_account}}"
												},
												{
													"key": "search_groups",
													"value": "{{search_groups}}"
												},
												{
													"key": "search_department",
													"value": "{{search_department}}"
												}
											]
										},
										"description": "Request to search active Directory users"
									},
									"response": []
								},
								{
									"name": "Get Active Directory users of branch",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/ActiveDirectory/Users/:branch?token={{token}}&dotest_id={{dotest_id}}&login={{login}}&password={{password}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"ActiveDirectory",
												"Users",
												":branch"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "dotest_id",
													"value": "{{dotest_id}}"
												},
												{
													"key": "login",
													"value": "{{login}}"
												},
												{
													"key": "password",
													"value": "{{password}}"
												}
											],
											"variable": [
												{
													"key": "branch",
													"value": "{{branch}}"
												}
											]
										},
										"description": "Request to get active Directory users of branch by id"
									},
									"response": []
								},
								{
									"name": "Search Active Directory groups",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/ActiveDirectory/Groups?token={{token}}&dotest_id={{dotest_id}}&login={{login}}&password={{password}}&search_group={{search_group}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"ActiveDirectory",
												"Groups"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "dotest_id",
													"value": "{{dotest_id}}"
												},
												{
													"key": "login",
													"value": "{{login}}"
												},
												{
													"key": "password",
													"value": "{{password}}"
												},
												{
													"key": "search_group",
													"value": "{{search_group}}"
												}
											]
										},
										"description": "Request to search active Directory groups"
									},
									"response": []
								},
								{
									"name": "Get Active Directory groups of branch",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/ActiveDirectory/Groups/:branch?token={{token}}&dotest_id={{dotest_id}}&login={{login}}&password={{password}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"ActiveDirectory",
												"Groups",
												":branch"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "dotest_id",
													"value": "{{dotest_id}}"
												},
												{
													"key": "login",
													"value": "{{login}}"
												},
												{
													"key": "password",
													"value": "{{password}}"
												}
											],
											"variable": [
												{
													"key": "branch",
													"value": "{{branch}}"
												}
											]
										},
										"description": "Request to get active Directory groups of branch by id"
									},
									"response": []
								},
								{
									"name": "Get groups of Active Directory user",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/ActiveDirectory/UserGroups/:user_id?token={{token}}&mixed_rights_management={{mixed_rights_management}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"ActiveDirectory",
												"UserGroups",
												":user_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "mixed_rights_management",
													"value": "{{mixed_rights_management}}"
												}
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{user_id}}"
												}
											]
										},
										"description": "Request to get the groupd of an active Directory user"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "domains",
							"description": "Folder for domains",
							"item": [
								{
									"name": "Get Domain",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains/:dotest_id?token={{token}}&attributs={{attributs}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains",
												":dotest_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "attributs",
													"value": "{{attributs}}"
												}
											],
											"variable": [
												{
													"key": "dotest_id",
													"value": "{{dotest_id}}"
												}
											]
										},
										"description": "Request to get Domain by id"
									},
									"response": []
								},
								{
									"name": "Update Domain",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains/:dotest_id?token={{token}}&domain={{domain}}&alias={{alias}}&server={{server}}&port={{port}}&dn_search_user={{dn_search_user}}&filter_user={{filter_user}}&dn_search_group={{dn_search_group}}&filter_group={{filter_group}}&login={{login}}&password={{password}}&type=AD&verify_rights={{verify_rights}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains",
												":dotest_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "domain",
													"value": "{{domain}}"
												},
												{
													"key": "alias",
													"value": "{{alias}}"
												},
												{
													"key": "server",
													"value": "{{server}}"
												},
												{
													"key": "port",
													"value": "{{port}}"
												},
												{
													"key": "dn_search_user",
													"value": "{{dn_search_user}}"
												},
												{
													"key": "filter_user",
													"value": "{{filter_user}}"
												},
												{
													"key": "dn_search_group",
													"value": "{{dn_search_group}}"
												},
												{
													"key": "filter_group",
													"value": "{{filter_group}}"
												},
												{
													"key": "login",
													"value": "{{login}}"
												},
												{
													"key": "password",
													"value": "{{password}}"
												},
												{
													"key": "type",
													"value": "AD"
												},
												{
													"key": "verify_rights",
													"value": "{{verify_rights}}"
												}
											],
											"variable": [
												{
													"key": "dotest_id",
													"value": "{{dotest_id}}"
												}
											]
										},
										"description": "Request to update domain"
									},
									"response": []
								},
								{
									"name": "delete Domain",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains/:dotest_id?token={{token}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains",
												":dotest_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												}
											],
											"variable": [
												{
													"key": "dotest_id",
													"value": "{{dotest_id}}"
												}
											]
										},
										"description": "Request to delete Domain"
									},
									"response": []
								},
								{
									"name": "Get Domains",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains?token={{token}}&order_by={{order_by}}&sort_order={{sort_order}}&limit={{limit}}&offset={{offset}}&attributs={{attributs}}&filter={{filter}}&distinct={{distinct}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "order_by",
													"value": "{{order_by}}"
												},
												{
													"key": "sort_order",
													"value": "{{sort_order}}"
												},
												{
													"key": "limit",
													"value": "{{limit}}"
												},
												{
													"key": "offset",
													"value": "{{offset}}"
												},
												{
													"key": "attributs",
													"value": "{{attributs}}"
												},
												{
													"key": "filter",
													"value": "{{filter}}"
												},
												{
													"key": "distinct",
													"value": "{{distinct}}"
												}
											]
										},
										"description": "Request to get Domains"
									},
									"response": []
								},
								{
									"name": "Add Domain",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "text"
												},
												{
													"key": "domain",
													"value": "{{domain}}",
													"type": "text"
												},
												{
													"key": "alias",
													"value": "{{alias}}",
													"type": "text"
												},
												{
													"key": "server",
													"value": "{{server}}",
													"type": "text"
												},
												{
													"key": "port",
													"value": "{{port}}",
													"type": "text"
												},
												{
													"key": "dn_search_user",
													"value": "{{dn_search_user}}",
													"type": "text"
												},
												{
													"key": "filter_user",
													"value": "{{filter_user}}",
													"type": "text"
												},
												{
													"key": "dn_search_group",
													"value": "{{dn_search_group}}",
													"type": "text"
												},
												{
													"key": "filter_group",
													"value": "{{filter_group}}",
													"type": "text"
												},
												{
													"key": "login",
													"value": "{{login}}",
													"type": "text"
												},
												{
													"key": "password",
													"value": "{{password}}",
													"type": "text"
												},
												{
													"key": "type",
													"value": "AD",
													"type": "text"
												},
												{
													"key": "verify_rights",
													"value": "{{verify_rights}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains"
											]
										},
										"description": "Request to add domain"
									},
									"response": []
								},
								{
									"name": "delete Domains",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains/?token={{token}}&idList={{idList}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains",
												""
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "idList",
													"value": "{{idList}}"
												}
											]
										},
										"description": "Request to delete Domain"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Add Domain",
							"item": [
								{
									"name": "Add Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d3f28aa-1b06-4b30-84c2-14665597ed65",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"// Tests contenu",
													"var jsonData = pm.response.json();",
													"tests[\"group_id is ok\"] = typeof(jsonData.group_id) === \"number\";",
													"",
													"// Variables d'environnement",
													"pm.environment.set(\"test_group_id\", jsonData.group_id);"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "5fb5526c-6ef6-4120-947a-cff95f29b014",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"test_group_name\", \"test_test_group\");",
													"pm.environment.set(\"test_group_users\", pm.environment.get(\"main_admin_id\"));",
													""
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"type": "text"
												},
												{
													"key": "name",
													"value": "{{test_group_name}}",
													"type": "text"
												},
												{
													"key": "users",
													"value": "{{test_group_users}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https:/{{host}}/rest/vitis/groups",
											"host": [
												"https:"
											],
											"port": "",
											"path": [
												"{{host}}",
												"rest",
												"vitis",
												"groups"
											]
										},
										"description": "Request to add group"
									},
									"response": []
								},
								{
									"name": "Test Add Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7498ec22-5a64-45cb-b097-800243e75692",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"// Tests contenu",
													"var jsonData = pm.response.json();",
													"tests[\"group is ok\"] = jsonData.groups instanceof Array;",
													"tests[\"group get is ok\"] = jsonData.groups.length === 1;",
													"tests[\"nb_members is ok\"] = jsonData.groups[0].nb_members === 1;",
													"tests[\"group_id is ok\"] = jsonData.groups[0].group_id === parseInt(pm.environment.get(\"test_group_id\"));",
													"tests[\"name is ok\"] = jsonData.groups[0].name === pm.environment.get(\"test_group_name\");",
													"tests[\"group users is ok\"] = jsonData.groups[0].users === parseInt(pm.environment.get(\"main_admin_id\"));",
													"tests[\"groups users_label is ok\"] = jsonData.groups[0].users_label === pm.environment.get(\"admin_user\");",
													"",
													"// Nettoyage variables ",
													"pm.environment.unset(\"test_group_attributes\");"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "60d69516-4c23-4f99-b52b-4e2bb84bd529",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"test_group_attributes\", \"\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}&attributs={{test_group_attributes}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"groups",
												":group_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"equals": true
												},
												{
													"key": "attributs",
													"value": "{{test_group_attributes}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "group_id",
													"value": "{{test_group_id}}"
												}
											]
										},
										"description": "Request to get Group by id"
									},
									"response": []
								},
								{
									"name": "Add Domain",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "9e21a620-0f9f-4f3f-9f5f-da63a9eba5b9",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"test_dotest_domain\", \"test_test_domain\");",
													"pm.environment.set(\"test_dotest_alias\", \"test_test_domain\");",
													"pm.environment.set(\"test_dotest_server\", pm.environment.get(\"host\"));",
													"pm.environment.set(\"test_dotest_port\", \"2222\");",
													"",
													"",
													"pm.environment.set(\"test_group_users\", pm.environment.get(\"main_admin_id\"));"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e66fe962-9538-492f-825a-dd87b0050996",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"// Tests contenu",
													"var jsonData = pm.response.json();",
													"//tests[\"group_id is ok\"] = typeof(jsonData.group_id) === \"number\";",
													"",
													"// Variables d'environnement",
													"//pm.environment.set(\"test_group_id\", jsonData.group_id);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "token",
													"type": "text",
													"value": "{{main_token}}"
												},
												{
													"key": "domain",
													"type": "text",
													"value": "{{test_dotest_domain}}"
												},
												{
													"key": "alias",
													"type": "text",
													"value": "{{test_dotest_alias}}"
												},
												{
													"key": "server",
													"type": "text",
													"value": "{{test_dotest_server}}"
												},
												{
													"key": "port",
													"type": "text",
													"value": "{{test_dotest_port}}"
												},
												{
													"key": "dn_search_user",
													"type": "text",
													"value": "{{test_dotest_dn_search_user}}",
													"disabled": true
												},
												{
													"key": "filter_user",
													"type": "text",
													"value": "{{test_dotest_filter_user}}",
													"disabled": true
												},
												{
													"key": "dn_search_group",
													"type": "text",
													"value": "{{test_dotest_dn_search_group}}",
													"disabled": true
												},
												{
													"key": "filter_group",
													"type": "text",
													"value": "{{test_dotest_filter_group}}",
													"disabled": true
												},
												{
													"key": "login",
													"type": "text",
													"value": "{{test_dotest_login}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{test_dotest_password}}"
												},
												{
													"key": "type",
													"type": "text",
													"value": "AD"
												},
												{
													"key": "verify_rights",
													"type": "text",
													"value": "{{test_dotest_verify_rights}}"
												}
											]
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains"
											]
										},
										"description": "Request to add domain"
									},
									"response": []
								},
								{
									"name": "Test Add Domain",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"// Tests contenu",
													"/*var jsonData = pm.response.json();",
													"tests[\"users is ok\"] = jsonData.users instanceof Array;",
													"tests[\"users get is ok\"] = jsonData.users.length === 1;",
													"tests[\"user_id is ok\"] = jsonData.users[0].user_id === parseInt(pm.environment.get(\"test_user_id\"));",
													"tests[\"login is ok\"] = jsonData.users[0].login === pm.environment.get(\"test_user_login\");",
													"tests[\"name is ok\"] = jsonData.users[0].name === pm.environment.get(\"test_user_name\");",
													"tests[\"email is ok\"] = jsonData.users[0].email === pm.environment.get(\"test_user_email\");   ",
													"tests[\"company is ok\"] = jsonData.users[0].company === pm.environment.get(\"test_user_company\");",
													"tests[\"department is ok\"] = jsonData.users[0].department === pm.environment.get(\"test_user_department\");",
													"tests[\"ip_constraint is ok\"] = jsonData.users[0].ip_constraint === pm.environment.get(\"test_user_ip_constraint\");",
													"tests[\"restriction is ok\"] = jsonData.users[0].restriction === pm.environment.get(\"test_user_restriction\");",
													"tests[\"groups is ok\"] = jsonData.users[0].groups === pm.environment.get(\"test_user_groups\");",
													"tests[\"privileges is ok\"] = jsonData.users[0].privileges === pm.environment.get(\"test_user_privileges\");",
													"*/",
													"// Nettoyage variables ",
													"pm.environment.unset(\"test_dotest_attributes\");"
												],
												"id": "3cb877a9-cced-4bc1-b019-ef2ec5ad9952",
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.environment.set(\"test_dotest_attributes\", \"\");"
												],
												"id": "82384f3e-d98c-4205-8732-c0bd87f14d08",
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains/:dotest_id?token={{main_token}}&attributs={{test_dotest_attributs}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains",
												":dotest_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"equals": true
												},
												{
													"key": "attributs",
													"value": "{{test_dotest_attributs}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "dotest_id",
													"value": "{{test_dotest_id}}"
												}
											]
										},
										"description": "Request to get Domain by id"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"id": "8658119d-05f6-4b22-9034-e8f1c8c8a705",
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"id": "9a882b3d-acae-4874-8e0b-3f12a9c0ec0e",
										"type": "text/javascript"
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Domain",
							"item": [
								{
									"name": "Get Group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ce205b89-230c-4eae-81de-d4e1f00a3ab0",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"test_group_attributes\", \"\");"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "47d56fb3-1faf-4777-b32a-dc7b58086759",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"// Tests contenu",
													"var jsonData = pm.response.json();",
													"tests[\"group is ok\"] = jsonData.groups instanceof Array;",
													"tests[\"group get is ok\"] = jsonData.groups.length === 1;",
													"tests[\"nb_members is ok\"] = jsonData.groups[0].nb_members === 1;",
													"tests[\"group_id is ok\"] = jsonData.groups[0].group_id === parseInt(pm.environment.get(\"test_group_id\"));",
													"tests[\"name is ok\"] = jsonData.groups[0].name === pm.environment.get(\"test_group_name\");",
													"tests[\"group users is ok\"] = jsonData.groups[0].users === parseInt(pm.environment.get(\"main_admin_id\"));",
													"tests[\"groups users_label is ok\"] = jsonData.groups[0].users_label === pm.environment.get(\"admin_user\");",
													"",
													"// Nettoyage variables ",
													"pm.environment.unset(\"test_group_attributes\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}&attributs={{test_group_attributes}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"groups",
												":group_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"equals": true
												},
												{
													"key": "attributs",
													"value": "{{test_group_attributes}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "group_id",
													"value": "{{test_group_id}}"
												}
											]
										},
										"description": "Request to get Group by id"
									},
									"response": []
								},
								{
									"name": "Get Groups",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "c6d5de65-7283-485b-a64d-e9d627132062",
												"type": "text/javascript",
												"exec": [
													"",
													"if(typeof(pm.environment.get(\"get_groups_order_by\")) == \"undefined\")",
													"\tpm.environment.set(\"get_groups_order_by\", \"\");",
													"",
													"if(typeof(pm.environment.get(\"get_groups_sort_order\")) == \"undefined\")",
													"\tpm.environment.set(\"get_groups_sort_order\", \"\");",
													"",
													"if(typeof(pm.environment.get(\"get_groups_limit\")) == \"undefined\")",
													"\tpm.environment.set(\"get_groups_limit\", \"\");",
													"",
													"if(typeof(pm.environment.get(\"get_groups_offset\")) == \"undefined\")",
													"\tpm.environment.set(\"get_groups_offset\", \"\");",
													"",
													"if(typeof(pm.environment.get(\"get_groups_attributs\")) == \"undefined\")",
													"\tpm.environment.set(\"get_groups_attributs\", \"\");",
													"",
													"if(typeof(pm.environment.get(\"get_groups_filter\")) == \"undefined\")",
													"\tpm.environment.set(\"get_groups_filter\", \"\");",
													"",
													"if(typeof(pm.environment.get(\"get_groups_distinct\")) == \"undefined\")",
													"\tpm.environment.set(\"get_groups_distinct\", \"\");"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c95b4dcd-67a2-4c52-adff-f8f63ec09726",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"// Tests contenu",
													"var jsonData = pm.response.json();",
													"tests[\"groups is ok\"] = jsonData.groups instanceof Array;",
													"",
													"",
													"var iTest = pm.environment.get(\"get_groups_test_number\");",
													"iTest = typeof(iTest) !== \"undefined\" ? parseInt(iTest) : 0;",
													"",
													"// Nettoyage variables ",
													"pm.environment.unset(\"get_groups_order_by\");",
													"pm.environment.unset(\"get_groups_sort_order\");",
													"pm.environment.unset(\"get_groups_limit\");",
													"pm.environment.unset(\"get_groups_offset\");",
													"pm.environment.unset(\"get_groups_attributs\");",
													"pm.environment.unset(\"get_groups_filter\");",
													"pm.environment.unset(\"get_groups_distinct\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/groups?token={{main_token}}&order_by={{get_groups_order_by}}&sort_order={{get_groups_sort_order}}&limit={{get_groups_limit}}&offset={{get_groups_offset}}&attributs={{get_groups_attributs}}&filter={{get_groups_filter}}&distinct={{get_groups_distinct}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"groups"
											],
											"query": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"equals": true
												},
												{
													"key": "order_by",
													"value": "{{get_groups_order_by}}",
													"equals": true
												},
												{
													"key": "sort_order",
													"value": "{{get_groups_sort_order}}",
													"equals": true
												},
												{
													"key": "limit",
													"value": "{{get_groups_limit}}",
													"equals": true
												},
												{
													"key": "offset",
													"value": "{{get_groups_offset}}",
													"equals": true
												},
												{
													"key": "attributs",
													"value": "{{get_groups_attributs}}",
													"equals": true
												},
												{
													"key": "filter",
													"value": "{{get_groups_filter}}",
													"equals": true
												},
												{
													"key": "distinct",
													"value": "{{get_groups_distinct}}",
													"equals": true
												}
											]
										},
										"description": "Request to get Groups"
									},
									"response": []
								},
								{
									"name": "Get Domain",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d33290ec-495d-49d8-8559-1e462d8879a1",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"test_dotest_attributs\", \"\");",
													"pm.environment.set(\"test_dotest_id\", \"1030\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains/:dotest_id?token={{main_token}}&attributs={{test_dotest_attributs}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains",
												":dotest_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"equals": true
												},
												{
													"key": "attributs",
													"value": "{{test_dotest_attributs}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "dotest_id",
													"value": "{{test_dotest_id}}"
												}
											]
										},
										"description": "Request to get Domain by id"
									},
									"response": []
								},
								{
									"name": "Get Domains",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains?token={{main_token}}&order_by={{get_dotest_order_by}}&sort_order={{get_dotest_sort_order}}&limit={{get_dotest_limit}}&offset={{get_dotest_offset}}&attributs={{get_dotest_attributs}}&filter={{get_dotest_filter}}&distinct={{get_dotest_distinct}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains"
											],
											"query": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"equals": true
												},
												{
													"key": "order_by",
													"value": "{{get_dotest_order_by}}",
													"equals": true
												},
												{
													"key": "sort_order",
													"value": "{{get_dotest_sort_order}}",
													"equals": true
												},
												{
													"key": "limit",
													"value": "{{get_dotest_limit}}",
													"equals": true
												},
												{
													"key": "offset",
													"value": "{{get_dotest_offset}}",
													"equals": true
												},
												{
													"key": "attributs",
													"value": "{{get_dotest_attributs}}",
													"equals": true
												},
												{
													"key": "filter",
													"value": "{{get_dotest_filter}}",
													"equals": true
												},
												{
													"key": "distinct",
													"value": "{{get_dotest_distinct}}",
													"equals": true
												}
											]
										},
										"description": "Request to get Domains"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"id": "7ac6b493-3d93-4b36-8d1e-5e1412c86493",
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"id": "df7078dd-4363-46d1-b8f2-3560d916cccd",
										"type": "text/javascript"
									}
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Edit Group",
							"item": [
								{
									"name": "Name",
									"item": [
										{
											"name": "Update Group Name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c30e9619-d9b4-49dd-bec7-bbd830137c97",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"group_id is ok\"] = typeof(jsonData.group_id) === \"string\";"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4a16edea-1f50-48ec-8208-77cfdc2c82a5",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_group_name\", \"test_test_group_edited\");",
															"pm.environment.set(\"test_group_users\", pm.environment.get(\"main_admin_id\"));"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}&name={{test_group_name}}&users={{test_group_users}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups",
														":group_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "name",
															"value": "{{test_group_name}}",
															"equals": true
														},
														{
															"key": "users",
															"value": "{{test_group_users}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "group_id",
															"value": "{{test_group_id}}"
														}
													]
												},
												"description": "Request to update Group"
											},
											"response": []
										},
										{
											"name": "Test Edit Group Name",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "acc4999d-35be-4923-b6b4-c67d38cc1402",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"group is ok\"] = jsonData.groups instanceof Array;",
															"tests[\"group get is ok\"] = jsonData.groups.length === 1;",
															"tests[\"nb_members is ok\"] = jsonData.groups[0].nb_members === 1;",
															"tests[\"group_id is ok\"] = jsonData.groups[0].group_id === parseInt(pm.environment.get(\"test_group_id\"));",
															"tests[\"name is ok\"] = jsonData.groups[0].name === pm.environment.get(\"test_group_name\");",
															"tests[\"group users is ok\"] = jsonData.groups[0].users === parseInt(pm.environment.get(\"main_admin_id\"));",
															"tests[\"groups users_label is ok\"] = jsonData.groups[0].users_label === pm.environment.get(\"admin_user\");",
															"",
															"// Nettoyage variables ",
															"pm.environment.unset(\"test_group_attributes\");"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "60d69516-4c23-4f99-b52b-4e2bb84bd529",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_group_attributes\", \"\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}&attributs={{test_group_attributes}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups",
														":group_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{test_group_attributes}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "group_id",
															"value": "{{test_group_id}}"
														}
													]
												},
												"description": "Request to get Group by id"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Users",
									"item": [
										{
											"name": "Get private token (User)",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4d3702a7-8148-4ebb-a5c5-869ac555d44d",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"token is ok\"] = typeof(jsonData.token) === \"string\";",
															"tests[\"user is ok\"] = typeof(jsonData.user) === \"string\";",
															"tests[\"validity_date is ok\"] = typeof(jsonData.validity_date) === \"string\";",
															"tests[\"user_id is ok\"] = typeof(jsonData.user_id) === \"number\";",
															"tests[\"privileges is ok\"] = jsonData.privileges instanceof Array",
															"",
															"// Variables",
															"pm.environment.set(\"test_user_token\", jsonData.token);",
															"pm.environment.set(\"test_user_id\",jsonData.user_id);",
															"",
															"// Passe directement à la requête Get token",
															"// postman.setNextRequest(\"Get token\");"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6bd8e739-8151-4208-97aa-a70ed4f78467",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"error_test\", false);"
														]
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "user",
															"type": "text",
															"value": "{{user_user}}"
														},
														{
															"key": "password",
															"type": "text",
															"value": "{{user_password}}"
														},
														{
															"key": "duration",
															"type": "text",
															"value": "600"
														}
													]
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/privatetoken",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"privatetoken"
													]
												},
												"description": "Request to get a token"
											},
											"response": []
										},
										{
											"name": "Update Group Users",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"id": "ffbad6a8-2286-4a24-b9f0-fc734c6cc943",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_group_name\", \"test_test_group_edited\");"
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"id": "190ecc55-a4d6-4223-9fc6-c9d3ede899a8",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"group_id is ok\"] = typeof(jsonData.group_id) === \"string\";"
														]
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}&name={{test_group_name}}&users={{main_admin_id}}|{{test_user_id}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups",
														":group_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "name",
															"value": "{{test_group_name}}",
															"equals": true
														},
														{
															"key": "users",
															"value": "{{main_admin_id}}|{{test_user_id}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "group_id",
															"value": "{{test_group_id}}"
														}
													]
												},
												"description": "Request to update Group"
											},
											"response": []
										},
										{
											"name": "Test Edit Group Users",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ae700ab6-cb3c-46c7-a409-af67069416a5",
														"type": "text/javascript",
														"exec": [
															"// Test la présence de réponse",
															"if(pm.response.responseSize === 0){",
															"    tests['No response'] = false;",
															"    return null;",
															"}",
															"",
															"// Tests contenu",
															"var jsonData = pm.response.json();",
															"tests[\"group is ok\"] = jsonData.groups instanceof Array;",
															"tests[\"group get is ok\"] = jsonData.groups.length === 1;",
															"tests[\"nb_members is ok\"] = jsonData.groups[0].nb_members === 2;",
															"tests[\"group_id is ok\"] = jsonData.groups[0].group_id === parseInt(pm.environment.get(\"test_group_id\"));",
															"tests[\"name is ok\"] = jsonData.groups[0].name === pm.environment.get(\"test_group_name\");",
															"var usr = jsonData.groups[0].users.split('|');",
															"tests[\"users_1 is ok\"] = parseInt(usr[0]) === parseInt(pm.environment.get(\"main_admin_id\"));",
															"tests[\"users_2 is ok\"] = parseInt(usr[1]) === parseInt(pm.environment.get(\"test_user_id\"));",
															"var usr_label = jsonData.groups[0].users_label.split(',');",
															"tests[\"users_label_1 is ok\"] = usr_label[0] === pm.environment.get(\"admin_user\");",
															"tests[\"users_label_2 is ok\"] = usr_label[1] === pm.environment.get(\"user_user\");",
															"",
															"// Nettoyage variables ",
															"pm.environment.unset(\"test_user_attributes\");"
														]
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "60d69516-4c23-4f99-b52b-4e2bb84bd529",
														"type": "text/javascript",
														"exec": [
															"pm.environment.set(\"test_group_attributes\", \"\");"
														]
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Accept",
														"value": "application/xml, application/json"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}&attributs={{test_group_attributes}}",
													"protocol": "https",
													"host": [
														"{{host}}"
													],
													"path": [
														"rest",
														"vitis",
														"groups",
														":group_id"
													],
													"query": [
														{
															"key": "token",
															"value": "{{main_token}}",
															"equals": true
														},
														{
															"key": "attributs",
															"value": "{{test_group_attributes}}",
															"equals": true
														}
													],
													"variable": [
														{
															"key": "group_id",
															"value": "{{test_group_id}}"
														}
													]
												},
												"description": "Request to get Group by id"
											},
											"response": []
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Update Domain",
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains/:dotest_id?token={{token}}&domain={{domain}}&alias={{alias}}&server={{server}}&port={{port}}&dn_search_user={{dn_search_user}}&filter_user={{filter_user}}&dn_search_group={{dn_search_group}}&filter_group={{filter_group}}&login={{login}}&password={{password}}&type=AD&verify_rights={{verify_rights}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains",
												":dotest_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "domain",
													"value": "{{domain}}"
												},
												{
													"key": "alias",
													"value": "{{alias}}"
												},
												{
													"key": "server",
													"value": "{{server}}"
												},
												{
													"key": "port",
													"value": "{{port}}"
												},
												{
													"key": "dn_search_user",
													"value": "{{dn_search_user}}"
												},
												{
													"key": "filter_user",
													"value": "{{filter_user}}"
												},
												{
													"key": "dn_search_group",
													"value": "{{dn_search_group}}"
												},
												{
													"key": "filter_group",
													"value": "{{filter_group}}"
												},
												{
													"key": "login",
													"value": "{{login}}"
												},
												{
													"key": "password",
													"value": "{{password}}"
												},
												{
													"key": "type",
													"value": "AD"
												},
												{
													"key": "verify_rights",
													"value": "{{verify_rights}}"
												}
											],
											"variable": [
												{
													"key": "dotest_id",
													"value": "{{dotest_id}}"
												}
											]
										},
										"description": "Request to update domain"
									},
									"response": []
								},
								{
									"name": "Get Domain",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains/:dotest_id?token={{token}}&attributs={{attributs}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains",
												":dotest_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "attributs",
													"value": "{{attributs}}"
												}
											],
											"variable": [
												{
													"key": "dotest_id",
													"value": "{{dotest_id}}"
												}
											]
										},
										"description": "Request to get Domain by id"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Delete Group",
							"item": [
								{
									"name": "Delete Group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c89d0f9-a92d-4b83-9907-ff8603b6d5cc",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"// Tests contenu",
													"var jsonData = pm.response.json();",
													"tests[\"group is ok\"] = jsonData.groups instanceof Array;",
													"tests[\"groups get is ok\"] = jsonData.groups.length === 1;",
													"tests[\"grout_id is ok\"] = parseInt(jsonData.groups[0].group_id) === parseInt(pm.environment.get(\"test_group_id\"));"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"groups",
												":group_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "group_id",
													"value": "{{test_group_id}}"
												}
											]
										},
										"description": "Request to delete Group"
									},
									"response": []
								},
								{
									"name": "Test Delete group",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77e48fd0-5063-4fa6-af48-b2e3ffd03fdc",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"// Tests contenu",
													"var jsonData = pm.response.json();",
													"tests[\"groups is ok\"] = jsonData.groups instanceof Array;",
													"tests[\"groups get is ok\"] = jsonData.groups.length === 1;",
													"tests[\"groupe_id is ok\"] = typeof(jsonData.groups[0].group_id) === \"undefined\";",
													"tests[\"login is ok\"] = typeof(jsonData.groups[0].login) === \"undefined\";",
													"tests[\"name is ok\"] = typeof(jsonData.groups[0].name) === \"undefined\";",
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}&attributs={{test_group_attributes}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"groups",
												":group_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"equals": true
												},
												{
													"key": "attributs",
													"value": "{{test_group_attributes}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "group_id",
													"value": "{{test_group_id}}"
												}
											]
										},
										"description": "Request to get Group by id"
									},
									"response": []
								},
								{
									"name": "Add Group 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "800fc2fd-b8fd-4dcd-a5d2-179f626c8e0e",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"test_group_name\", \"test_test_group_1\");",
													"pm.environment.set(\"test_group_users\", pm.environment.get(\"main_admin_id\"));",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "56f65c03-d1e3-48bb-823e-2020452d156f",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"// Tests contenu",
													"var jsonData = pm.response.json();",
													"tests[\"group_id is ok\"] = typeof(jsonData.group_id) === \"number\";",
													"",
													"// Variables d'environnement",
													"pm.environment.set(\"test_group_id_1\", jsonData.group_id);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"type": "text"
												},
												{
													"key": "name",
													"value": "{{test_group_name}}",
													"type": "text"
												},
												{
													"key": "users",
													"value": "{{test_group_users}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/groups",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"groups"
											]
										},
										"description": "Request to add group"
									},
									"response": []
								},
								{
									"name": "Test Add Group 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "449b174b-8108-49ce-8eda-8e4f6e453541",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"// Tests contenu",
													"var jsonData = pm.response.json();",
													"tests[\"group is ok\"] = jsonData.groups instanceof Array;",
													"tests[\"group get is ok\"] = jsonData.groups.length === 1;",
													"tests[\"nb_members is ok\"] = jsonData.groups[0].nb_members === 1;",
													"tests[\"group_id is ok\"] = jsonData.groups[0].group_id === parseInt(pm.environment.get(\"test_group_id_1\"));",
													"tests[\"name is ok\"] = jsonData.groups[0].name === pm.environment.get(\"test_group_name\");",
													"tests[\"group users is ok\"] = jsonData.groups[0].users === parseInt(pm.environment.get(\"main_admin_id\"));",
													"tests[\"groups users_label is ok\"] = jsonData.groups[0].users_label === pm.environment.get(\"admin_user\");",
													"",
													"// Nettoyage variables ",
													"pm.environment.unset(\"test_group_attributes\");"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "95bd7292-c3db-4d91-b54f-1fb8b89c4614",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"test_group_attributes\", \"\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}&attributs={{test_group_attributes}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"groups",
												":group_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"equals": true
												},
												{
													"key": "attributs",
													"value": "{{test_group_attributes}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "group_id",
													"value": "{{test_group_id_1}}"
												}
											]
										},
										"description": "Request to get Group by id"
									},
									"response": []
								},
								{
									"name": "Add Group 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "86d5ec18-91db-40e4-9629-66c661dd03d1",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"test_group_name\", \"test_test_group_2\");",
													"pm.environment.set(\"test_group_users\", pm.environment.get(\"main_admin_id\"));",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5743171f-6729-4772-bfa2-29b45bf04d00",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"// Tests contenu",
													"var jsonData = pm.response.json();",
													"tests[\"group_id is ok\"] = typeof(jsonData.group_id) === \"number\";",
													"",
													"// Variables d'environnement",
													"pm.environment.set(\"test_group_id_2\", jsonData.group_id);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"type": "text"
												},
												{
													"key": "name",
													"value": "{{test_group_name}}",
													"type": "text"
												},
												{
													"key": "users",
													"value": "{{test_group_users}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/groups",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"groups"
											]
										},
										"description": "Request to add group"
									},
									"response": []
								},
								{
									"name": "Test Add Group 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50799549-8852-4f0a-9142-7516450bf89f",
												"type": "text/javascript",
												"exec": [
													"",
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"// Tests contenu",
													"var jsonData = pm.response.json();",
													"tests[\"group is ok\"] = jsonData.groups instanceof Array;",
													"tests[\"group get is ok\"] = jsonData.groups.length === 1;",
													"tests[\"nb_members is ok\"] = jsonData.groups[0].nb_members === 1;",
													"tests[\"group_id is ok\"] = jsonData.groups[0].group_id === parseInt(pm.environment.get(\"test_group_id_2\"));",
													"tests[\"name is ok\"] = jsonData.groups[0].name === pm.environment.get(\"test_group_name\");",
													"tests[\"group users is ok\"] = jsonData.groups[0].users === parseInt(pm.environment.get(\"main_admin_id\"));",
													"tests[\"groups users_label is ok\"] = jsonData.groups[0].users_label === pm.environment.get(\"admin_user\");",
													"",
													"// Nettoyage variables ",
													"pm.environment.unset(\"test_group_attributes\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}&attributs={{test_group_attributes}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"groups",
												":group_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"equals": true
												},
												{
													"key": "attributs",
													"value": "{{test_group_attributes}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "group_id",
													"value": "{{test_group_id_2}}"
												}
											]
										},
										"description": "Request to get Group by id"
									},
									"response": []
								},
								{
									"name": "Delete Groups",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17b67430-4c58-4543-aca8-59f8ab10ad9d",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"// Tests contenu",
													"var jsonData = pm.response.json();",
													"tests[\"groups is ok\"] = jsonData.groups instanceof Array;",
													"tests[\"groups get is ok\"] = jsonData.groups.length === 2;",
													"tests[\"group_id is ok\"] = parseInt(jsonData.groups[0].group_id) === parseInt(pm.environment.get(\"test_group_id_1\"));",
													"tests[\"group_id is ok\"] = parseInt(jsonData.groups[1].group_id) === parseInt(pm.environment.get(\"test_group_id_2\"));"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/groups/?token={{main_token}}&idList={{test_group_id_1}}|{{test_group_id_2}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"groups",
												""
											],
											"query": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"equals": true
												},
												{
													"key": "idList",
													"value": "{{test_group_id_1}}|{{test_group_id_2}}",
													"equals": true
												}
											]
										},
										"description": "Request to delete Group"
									},
									"response": []
								},
								{
									"name": "Test Delete Groups",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "503bd751-6995-4dc4-9acb-801615256aa9",
												"type": "text/javascript",
												"exec": [
													"if(typeof(pm.environment.get(\"get_groups_order_by\")) == \"undefined\")",
													"\tpm.environment.set(\"get_groups_order_by\", \"\");",
													"",
													"if(typeof(pm.environment.get(\"get_groups_sort_order\")) == \"undefined\")",
													"\tpm.environment.set(\"get_groups_sort_order\", \"\");",
													"",
													"if(typeof(pm.environment.get(\"get_groups_limit\")) == \"undefined\")",
													"\tpm.environment.set(\"get_groups_limit\", \"\");",
													"",
													"if(typeof(pm.environment.get(\"get_groups_offset\")) == \"undefined\")",
													"\tpm.environment.set(\"get_groups_offset\", \"\");",
													"",
													"if(typeof(pm.environment.get(\"get_groups_attributs\")) == \"undefined\")",
													"\tpm.environment.set(\"get_groups_attributs\", \"\");",
													"",
													"if(typeof(pm.environment.get(\"get_groups_filter\")) == \"undefined\")",
													"\tpm.environment.set(\"get_groups_filter\", \"\");",
													"",
													"if(typeof(pm.environment.get(\"get_groups_distinct\")) == \"undefined\")",
													"\tpm.environment.set(\"get_groups_distinct\", \"\");"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "79758380-cfc6-4fdf-8653-dcc82cb25545",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"// Tests contenu",
													"var jsonData = pm.response.json();",
													"tests[\"groups is ok\"] = jsonData.groups instanceof Array;",
													"",
													"",
													"var iTest = pm.environment.get(\"get_groups_test_number\");",
													"iTest = typeof(iTest) !== \"undefined\" ? parseInt(iTest) : 0;",
													"",
													"// Nettoyage variables ",
													"pm.environment.unset(\"get_groups_order_by\");",
													"pm.environment.unset(\"get_groups_sort_order\");",
													"pm.environment.unset(\"get_groups_limit\");",
													"pm.environment.unset(\"get_groups_offset\");",
													"pm.environment.unset(\"get_groups_attributs\");",
													"pm.environment.unset(\"get_groups_filter\");",
													"pm.environment.unset(\"get_groups_distinct\");"
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/groups?token={{main_token}}&order_by={{get_groups_order_by}}&sort_order={{get_groups_sort_order}}&limit={{get_groups_limit}}&offset={{get_groups_offset}}&attributs={{get_groups_attributs}}&filter={{get_groups_filter}}&distinct={{get_groups_distinct}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"groups"
											],
											"query": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"equals": true
												},
												{
													"key": "order_by",
													"value": "{{get_groups_order_by}}",
													"equals": true
												},
												{
													"key": "sort_order",
													"value": "{{get_groups_sort_order}}",
													"equals": true
												},
												{
													"key": "limit",
													"value": "{{get_groups_limit}}",
													"equals": true
												},
												{
													"key": "offset",
													"value": "{{get_groups_offset}}",
													"equals": true
												},
												{
													"key": "attributs",
													"value": "{{get_groups_attributs}}",
													"equals": true
												},
												{
													"key": "filter",
													"value": "{{get_groups_filter}}",
													"equals": true
												},
												{
													"key": "distinct",
													"value": "{{get_groups_distinct}}",
													"equals": true
												}
											]
										},
										"description": "Request to get Groups"
									},
									"response": []
								},
								{
									"name": "Delete Domain",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains/:dotest_id?token={{token}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains",
												":dotest_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												}
											],
											"variable": [
												{
													"key": "dotest_id",
													"value": "{{dotest_id}}"
												}
											]
										},
										"description": "Request to delete Domain"
									},
									"response": []
								},
								{
									"name": "Test Delete Domain",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains/:dotest_id?token={{token}}&attributs={{attributs}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains",
												":dotest_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "attributs",
													"value": "{{attributs}}"
												}
											],
											"variable": [
												{
													"key": "dotest_id",
													"value": "{{dotest_id}}"
												}
											]
										},
										"description": "Request to get Domain by id"
									},
									"response": []
								},
								{
									"name": "Add Domain 1",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "token",
													"type": "text",
													"value": "{{token}}"
												},
												{
													"key": "domain",
													"type": "text",
													"value": "{{domain}}"
												},
												{
													"key": "alias",
													"type": "text",
													"value": "{{alias}}"
												},
												{
													"key": "server",
													"type": "text",
													"value": "{{server}}"
												},
												{
													"key": "port",
													"type": "text",
													"value": "{{port}}"
												},
												{
													"key": "dn_search_user",
													"type": "text",
													"value": "{{dn_search_user}}"
												},
												{
													"key": "filter_user",
													"type": "text",
													"value": "{{filter_user}}"
												},
												{
													"key": "dn_search_group",
													"type": "text",
													"value": "{{dn_search_group}}"
												},
												{
													"key": "filter_group",
													"type": "text",
													"value": "{{filter_group}}"
												},
												{
													"key": "login",
													"type": "text",
													"value": "{{login}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "type",
													"type": "text",
													"value": "AD"
												},
												{
													"key": "verify_rights",
													"type": "text",
													"value": "{{verify_rights}}"
												}
											]
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains"
											]
										},
										"description": "Request to add domain"
									},
									"response": []
								},
								{
									"name": "Test Add Domain 1",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains/:dotest_id?token={{token}}&attributs={{attributs}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains",
												":dotest_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "attributs",
													"value": "{{attributs}}"
												}
											],
											"variable": [
												{
													"key": "dotest_id",
													"value": "{{dotest_id}}"
												}
											]
										},
										"description": "Request to get Domain by id"
									},
									"response": []
								},
								{
									"name": "Add Domain 2",
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "token",
													"type": "text",
													"value": "{{token}}"
												},
												{
													"key": "domain",
													"type": "text",
													"value": "{{domain}}"
												},
												{
													"key": "alias",
													"type": "text",
													"value": "{{alias}}"
												},
												{
													"key": "server",
													"type": "text",
													"value": "{{server}}"
												},
												{
													"key": "port",
													"type": "text",
													"value": "{{port}}"
												},
												{
													"key": "dn_search_user",
													"type": "text",
													"value": "{{dn_search_user}}"
												},
												{
													"key": "filter_user",
													"type": "text",
													"value": "{{filter_user}}"
												},
												{
													"key": "dn_search_group",
													"type": "text",
													"value": "{{dn_search_group}}"
												},
												{
													"key": "filter_group",
													"type": "text",
													"value": "{{filter_group}}"
												},
												{
													"key": "login",
													"type": "text",
													"value": "{{login}}"
												},
												{
													"key": "password",
													"type": "text",
													"value": "{{password}}"
												},
												{
													"key": "type",
													"type": "text",
													"value": "AD"
												},
												{
													"key": "verify_rights",
													"type": "text",
													"value": "{{verify_rights}}"
												}
											]
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains"
											]
										},
										"description": "Request to add domain"
									},
									"response": []
								},
								{
									"name": "Test Add Domain 2",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains/:dotest_id?token={{token}}&attributs={{attributs}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains",
												":dotest_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "attributs",
													"value": "{{attributs}}"
												}
											],
											"variable": [
												{
													"key": "dotest_id",
													"value": "{{dotest_id}}"
												}
											]
										},
										"description": "Request to get Domain by id"
									},
									"response": []
								},
								{
									"name": "Test Delete Domains",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains/?token={{token}}&idList={{idList}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains",
												""
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "idList",
													"value": "{{idList}}"
												}
											]
										},
										"description": "Request to delete Domain"
									},
									"response": []
								},
								{
									"name": "Test Delete Domains",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/domains?token={{token}}&order_by={{order_by}}&sort_order={{sort_order}}&limit={{limit}}&offset={{offset}}&attributs={{attributs}}&filter={{filter}}&distinct={{distinct}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"domains"
											],
											"query": [
												{
													"key": "token",
													"value": "{{token}}"
												},
												{
													"key": "order_by",
													"value": "{{order_by}}"
												},
												{
													"key": "sort_order",
													"value": "{{sort_order}}"
												},
												{
													"key": "limit",
													"value": "{{limit}}"
												},
												{
													"key": "offset",
													"value": "{{offset}}"
												},
												{
													"key": "attributs",
													"value": "{{attributs}}"
												},
												{
													"key": "filter",
													"value": "{{filter}}"
												},
												{
													"key": "distinct",
													"value": "{{distinct}}"
												}
											]
										},
										"description": "Request to get Domains"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Without rights",
							"item": [
								{
									"name": "Add Group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "464146c6-d41b-45a4-95eb-32262cf91d8a",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"test_group_name\", \"test_test_group\");",
													"pm.environment.set(\"test_group_users\", pm.environment.get(\"main_admin_id\"));",
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "edc231d8-5db4-49be-9420-1c971f1c7576",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"// Tests contenu",
													"var jsonData = pm.response.json();",
													"tests[\"group_id is ok\"] = typeof(jsonData.group_id) === \"number\";",
													"",
													"// Variables d'environnement",
													"pm.environment.set(\"test_group_id\", jsonData.group_id);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"type": "text"
												},
												{
													"key": "name",
													"value": "{{test_group_name}}",
													"type": "text"
												},
												{
													"key": "users",
													"value": "{{test_group_users}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/groups",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"groups"
											]
										},
										"description": "Request to add group"
									},
									"response": []
								},
								{
									"name": "Add Group (without rights)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "363230a2-97ab-4c98-b741-0c9cbe2dbeca",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"error_test\", true);",
													"pm.environment.set(\"test_group_name\", \"test_test_group\");",
													"pm.environment.set(\"test_group_users\", pm.environment.get(\"main_admin_id\"));"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2b29a642-cf24-4326-8f04-d41853fa172c",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false",
													"    return null;",
													"}",
													"pm.environment.set(\"error_test\", false);"
												]
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "token",
													"value": "{{test_user_token}}",
													"type": "text"
												},
												{
													"key": "name",
													"value": "{{test_group_name}}",
													"type": "text"
												},
												{
													"key": "users",
													"value": "{{test_group_users}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/groups",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"groups"
											]
										},
										"description": "Request to add group"
									},
									"response": []
								},
								{
									"name": "Update Group (without rights)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "ab7e273f-023e-4fc8-8ea6-f4923210f057",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"error_test\", true);",
													"pm.environment.set(\"test_group_name\", \"test_test_group_edited\");",
													"pm.environment.set(\"test_group_users\", pm.environment.get(\"main_admin_id\"));"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "29bd1c21-efb6-425c-8e62-eb898ab5f333",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"pm.environment.set(\"error_test\", false);"
												]
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{test_user_token}}&name={{test_group_name}}&users={{test_group_users}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"groups",
												":group_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{test_user_token}}",
													"equals": true
												},
												{
													"key": "name",
													"value": "{{test_group_name}}",
													"equals": true
												},
												{
													"key": "users",
													"value": "{{test_group_users}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "group_id",
													"value": "{{test_group_id}}"
												}
											]
										},
										"description": "Request to update Group"
									},
									"response": []
								},
								{
									"name": "Delete Group (without rights)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "d3cf9235-a81d-4f16-bfce-cbe78e378f37",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"error_test\", true);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "79da46c5-c354-407d-86f4-a586613d1b12",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"pm.environment.set(\"error_test\", false);"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{test_user_token}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"groups",
												":group_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{test_user_token}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "group_id",
													"value": "{{test_group_id}}"
												}
											]
										},
										"description": "Request to delete Group"
									},
									"response": []
								},
								{
									"name": "Delete Groups (without rights)",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7c11674-5c7e-45d8-b098-72787a4f8a0f",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"pm.environment.set(\"error_test\", false);"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "6ae340a5-b24e-48e8-a89b-1b148d60a9ba",
												"type": "text/javascript",
												"exec": [
													"pm.environment.set(\"error_test\", true);"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/groups/?token={{test_user_token}}&idList={{test_group_id}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"groups",
												""
											],
											"query": [
												{
													"key": "token",
													"value": "{{test_user_token}}",
													"equals": true
												},
												{
													"key": "idList",
													"value": "{{test_group_id}}",
													"equals": true
												}
											]
										},
										"description": "Request to delete Group"
									},
									"response": []
								},
								{
									"name": "Delete Group",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "92e748e0-34cb-4506-ad2f-ae68c28bbadf",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "34fe9d35-a02f-43bf-ab79-95206f36dd5c",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"// Tests contenu",
													"var jsonData = pm.response.json();",
													"tests[\"groups is ok\"] = jsonData.groups instanceof Array;",
													"tests[\"groups get is ok\"] = jsonData.groups.length === 1;",
													"tests[\"group_id is ok\"] = parseInt(jsonData.groups[0].group_id) === parseInt(pm.environment.get(\"test_group_id\"));"
												]
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/groups/:group_id?token={{main_token}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"groups",
												":group_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "group_id",
													"value": "{{test_group_id}}"
												}
											]
										},
										"description": "Request to delete Group"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "End",
							"item": [
								{
									"name": "Clear variables",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "353d7c2f-b228-4e7e-85de-02fe9e501281",
												"type": "text/javascript",
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false",
													"    return null;",
													"}",
													"",
													"// Nettoyage variables ",
													"pm.environment.unset(\"test_group_name\");",
													"pm.environment.unset(\"test_group_id\");",
													"pm.environment.unset(\"test_group_id_1\");",
													"pm.environment.unset(\"test_group_id_2\");",
													"pm.environment.unset(\"test_group_users\");",
													"pm.environment.unset(\"test_group_attributes\");"
												]
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "31d23a01-0bad-48cb-a457-165b1251b24f",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/users/:user_id?token={{main_token}}&attributs={{test_user_attributes}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"users",
												":user_id"
											],
											"query": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"equals": true
												},
												{
													"key": "attributs",
													"value": "{{test_user_attributes}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "user_id",
													"value": "{{test_user_id}}"
												}
											]
										},
										"description": "Test: vérifie le précédent PUT"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "3c0d69c0-e95a-4422-80b0-c9898e123e91",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"id": "3dda0821-4496-484f-88b9-929c16366843",
								"type": "text/javascript"
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Accounts - NTY",
					"description": "Folder for accounts",
					"item": [
						{
							"name": "Send a mail to ask admin confirmation",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "text"
										},
										{
											"key": "fullname",
											"value": "{{fullname}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://medoc/rest/vitis/accounts/:operation_id/:command",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"accounts",
										":operation_id",
										":command"
									],
									"variable": [
										{
											"key": "operation_id",
											"value": "{{operation_id}}"
										},
										{
											"key": "command",
											"value": "{{command}}"
										}
									]
								},
								"description": "Send a mail to ask admin confirmation"
							},
							"response": []
						},
						{
							"name": "Send a mail to ask admin confirmation",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/xml, application/json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "text"
										},
										{
											"key": "username",
											"value": "{{username}}",
											"type": "text"
										},
										{
											"key": "fullname",
											"value": "{{fullname}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{password}}",
											"type": "text"
										},
										{
											"key": "mail",
											"value": "{{mail}}",
											"type": "text"
										},
										{
											"key": "company",
											"value": "{{company}}",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "https://medoc/rest/vitis/accounts/:operation_id",
									"protocol": "https",
									"host": [
										"medoc"
									],
									"path": [
										"rest",
										"vitis",
										"accounts",
										":operation_id"
									],
									"variable": [
										{
											"key": "operation_id",
											"value": "{{operation_id}}"
										}
									]
								},
								"description": "Send a mail to ask admin confirmation"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "087b19e4-7eee-4e89-8a38-d77256315f25",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"id": "8959d61e-4460-4544-8608-e20834c3196a",
								"type": "text/javascript"
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Genericquerys - NTY",
					"description": "Folder for genericquerys",
					"item": [
						{
							"name": "With rights",
							"description": "",
							"item": [
								{
									"name": "Get Querys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"get_querys_database\",jsonData.genericquerys[0].database);",
													""
												],
												"id": "7cc21c10-175b-4d57-bcf1-94536c8c8dcc",
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/genericquerys/databases?token={{main_token}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"genericquerys",
												"databases"
											],
											"query": [
												{
													"equals": true,
													"key": "token",
													"value": "{{main_token}}"
												}
											]
										},
										"description": "Get the dtabases list"
									},
									"response": []
								},
								{
									"name": "Get Querys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"get_querys_schema\",jsonData.genericquerys[0].schema_name);",
													""
												],
												"id": "f85bb565-700a-48a2-8f0e-7f45eda11605",
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"id": "df09e061-675e-4524-9946-3e5f7d317e0e",
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/genericquerys/:database/schemas?token={{main_token}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"genericquerys",
												":database",
												"schemas"
											],
											"query": [
												{
													"equals": true,
													"key": "token",
													"value": "{{main_token}}"
												}
											],
											"variable": [
												{
													"key": "database",
													"value": "{{get_querys_database}}"
												}
											]
										},
										"description": "Get the database schemas"
									},
									"response": []
								},
								{
									"name": "Get Querys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}"
												],
												"id": "d1b9737f-c687-44fb-9680-727f3fb65e62",
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/genericquerys?token={{main_token}}&login={{get_querys_login}}&password={{get_querys_password}}&server={{get_querys_server}}&port={{get_querys_port}}&database={{get_querys_database}}&schema={{get_querys_schema}}&table={{get_querys_table}}&filter={{get_querys_filter}}&limit={{get_querys_limit}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"genericquerys"
											],
											"query": [
												{
													"equals": true,
													"key": "token",
													"value": "{{main_token}}"
												},
												{
													"equals": true,
													"key": "login",
													"value": "{{get_querys_login}}"
												},
												{
													"equals": true,
													"key": "password",
													"value": "{{get_querys_password}}"
												},
												{
													"equals": true,
													"key": "server",
													"value": "{{get_querys_server}}"
												},
												{
													"equals": true,
													"key": "port",
													"value": "{{get_querys_port}}"
												},
												{
													"equals": true,
													"key": "sgbd",
													"value": "{{get_querys_sgbd}}",
													"disabled": true
												},
												{
													"equals": true,
													"key": "database",
													"value": "{{get_querys_database}}"
												},
												{
													"equals": true,
													"key": "schema",
													"value": "{{get_querys_schema}}"
												},
												{
													"equals": true,
													"key": "table",
													"value": "{{get_querys_table}}"
												},
												{
													"equals": true,
													"key": "filter",
													"value": "{{get_querys_filter}}"
												},
												{
													"equals": true,
													"key": "limit",
													"value": "{{get_querys_limit}}"
												}
											]
										},
										"description": "Request to query a schema. There is two ways to use this service: with the token witch will use the current server/port/sgbd, with login/password witch can query distant servers"
									},
									"response": []
								},
								{
									"name": "Get Querys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}"
												],
												"id": "70bb3fe1-3ba9-44f3-bb72-3caa6c62dbb9",
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/genericquerys/:table_name?token={{main_token}}&login={{get_querys_login}}&password={{get_querys_password}}&server={{get_querys_server}}&port={{get_querys_port}}&sgbd={{get_querys_sgbd}}&database={{get_querys_database}}&schema={{get_querys_schema}}&encoding={{get_querys_encoding}}&order_by={{get_querys_order_by}}&sort_order={{get_querys_sort_order}}&limit={{get_querys_limit}}&offset={{get_querys_offset}}&attributs={{get_querys_attributs}}&filter={{get_querys_filter}}&distinct={{get_querys_distinct}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"genericquerys",
												":table_name"
											],
											"query": [
												{
													"equals": true,
													"key": "token",
													"value": "{{main_token}}"
												},
												{
													"equals": true,
													"key": "login",
													"value": "{{get_querys_login}}"
												},
												{
													"equals": true,
													"key": "password",
													"value": "{{get_querys_password}}"
												},
												{
													"equals": true,
													"key": "server",
													"value": "{{get_querys_server}}"
												},
												{
													"equals": true,
													"key": "port",
													"value": "{{get_querys_port}}"
												},
												{
													"equals": true,
													"key": "sgbd",
													"value": "{{get_querys_sgbd}}"
												},
												{
													"equals": true,
													"key": "database",
													"value": "{{get_querys_database}}"
												},
												{
													"equals": true,
													"key": "schema",
													"value": "{{get_querys_schema}}"
												},
												{
													"equals": true,
													"key": "encoding",
													"value": "{{get_querys_encoding}}"
												},
												{
													"equals": true,
													"key": "order_by",
													"value": "{{get_querys_order_by}}"
												},
												{
													"equals": true,
													"key": "sort_order",
													"value": "{{get_querys_sort_order}}"
												},
												{
													"equals": true,
													"key": "limit",
													"value": "{{get_querys_limit}}"
												},
												{
													"equals": true,
													"key": "offset",
													"value": "{{get_querys_offset}}"
												},
												{
													"equals": true,
													"key": "attributs",
													"value": "{{get_querys_attributs}}"
												},
												{
													"equals": true,
													"key": "filter",
													"value": "{{get_querys_filter}}"
												},
												{
													"equals": true,
													"key": "distinct",
													"value": "{{get_querys_distinct}}"
												}
											],
											"variable": [
												{
													"key": "table_name",
													"value": "{{get_querys_table_name}}"
												}
											]
										},
										"description": "Request to query a table. There is two ways to use this service: with the token witch will use the current server/port/sgbd, with login/password witch can query distant servers"
									},
									"response": []
								},
								{
									"name": "Get Querys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}"
												],
												"id": "086bdc2d-f727-4adf-a602-2c0cb53a66c6",
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/genericquerys/:table_name/columns?token={{main_token}}&login={{get_querys_login}}&password={{get_querys_password}}&server={{get_querys_server}}&port={{get_querys_port}}&sgbd={{get_querys_sgbd}}&database={{get_querys_database}}&schema={{get_querys_schema}}&encoding={{get_querys_encoding}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"genericquerys",
												":table_name",
												"columns"
											],
											"query": [
												{
													"equals": true,
													"key": "token",
													"value": "{{main_token}}"
												},
												{
													"equals": true,
													"key": "login",
													"value": "{{get_querys_login}}"
												},
												{
													"equals": true,
													"key": "password",
													"value": "{{get_querys_password}}"
												},
												{
													"equals": true,
													"key": "server",
													"value": "{{get_querys_server}}"
												},
												{
													"equals": true,
													"key": "port",
													"value": "{{get_querys_port}}"
												},
												{
													"equals": true,
													"key": "sgbd",
													"value": "{{get_querys_sgbd}}"
												},
												{
													"equals": true,
													"key": "database",
													"value": "{{get_querys_database}}"
												},
												{
													"equals": true,
													"key": "schema",
													"value": "{{get_querys_schema}}"
												},
												{
													"equals": true,
													"key": "encoding",
													"value": "{{get_querys_encoding}}"
												}
											],
											"variable": [
												{
													"key": "table_name",
													"value": "{{table_name}}"
												}
											]
										},
										"description": "Request to query. There is two ways to use this service: with the token witch will use the current server/port/sgbd, with login/password witch can query distant servers"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "With rights",
							"description": "",
							"item": [
								{
									"name": "Get Querys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test la présence de réponse",
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"get_querys_database\",jsonData.genericquerys[0].database);",
													""
												],
												"id": "7cc21c10-175b-4d57-bcf1-94536c8c8dcc",
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/genericquerys/databases?token={{main_token}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"genericquerys",
												"databases"
											],
											"query": [
												{
													"equals": true,
													"key": "token",
													"value": "{{main_token}}"
												}
											]
										},
										"description": "Get the dtabases list"
									},
									"response": []
								},
								{
									"name": "Get Querys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}",
													"",
													"var jsonData = pm.response.json();",
													"pm.environment.set(\"get_querys_schema\",jsonData.genericquerys[0].schema_name);",
													""
												],
												"id": "f85bb565-700a-48a2-8f0e-7f45eda11605",
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"id": "df09e061-675e-4524-9946-3e5f7d317e0e",
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://{{host}}/rest/vitis/genericquerys/:database/schemas?token={{main_token}}",
											"protocol": "https",
											"host": [
												"{{host}}"
											],
											"path": [
												"rest",
												"vitis",
												"genericquerys",
												":database",
												"schemas"
											],
											"query": [
												{
													"equals": true,
													"key": "token",
													"value": "{{main_token}}"
												}
											],
											"variable": [
												{
													"key": "database",
													"value": "{{get_querys_database}}"
												}
											]
										},
										"description": "Get the database schemas"
									},
									"response": []
								},
								{
									"name": "Get Querys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}"
												],
												"id": "d1b9737f-c687-44fb-9680-727f3fb65e62",
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/genericquerys?token={{main_token}}&login={{get_querys_login}}&password={{get_querys_password}}&server={{get_querys_server}}&port={{get_querys_port}}&database={{get_querys_database}}&schema={{get_querys_schema}}&table={{get_querys_table}}&filter={{get_querys_filter}}&limit={{get_querys_limit}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"genericquerys"
											],
											"query": [
												{
													"equals": true,
													"key": "token",
													"value": "{{main_token}}"
												},
												{
													"equals": true,
													"key": "login",
													"value": "{{get_querys_login}}"
												},
												{
													"equals": true,
													"key": "password",
													"value": "{{get_querys_password}}"
												},
												{
													"equals": true,
													"key": "server",
													"value": "{{get_querys_server}}"
												},
												{
													"equals": true,
													"key": "port",
													"value": "{{get_querys_port}}"
												},
												{
													"equals": true,
													"key": "sgbd",
													"value": "{{get_querys_sgbd}}",
													"disabled": true
												},
												{
													"equals": true,
													"key": "database",
													"value": "{{get_querys_database}}"
												},
												{
													"equals": true,
													"key": "schema",
													"value": "{{get_querys_schema}}"
												},
												{
													"equals": true,
													"key": "table",
													"value": "{{get_querys_table}}"
												},
												{
													"equals": true,
													"key": "filter",
													"value": "{{get_querys_filter}}"
												},
												{
													"equals": true,
													"key": "limit",
													"value": "{{get_querys_limit}}"
												}
											]
										},
										"description": "Request to query a schema. There is two ways to use this service: with the token witch will use the current server/port/sgbd, with login/password witch can query distant servers"
									},
									"response": []
								},
								{
									"name": "Get Querys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}"
												],
												"id": "70bb3fe1-3ba9-44f3-bb72-3caa6c62dbb9",
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/genericquerys/:table_name?token={{main_token}}&login={{get_querys_login}}&password={{get_querys_password}}&server={{get_querys_server}}&port={{get_querys_port}}&sgbd={{get_querys_sgbd}}&database={{get_querys_database}}&schema={{get_querys_schema}}&encoding={{get_querys_encoding}}&order_by={{get_querys_order_by}}&sort_order={{get_querys_sort_order}}&limit={{get_querys_limit}}&offset={{get_querys_offset}}&attributs={{get_querys_attributs}}&filter={{get_querys_filter}}&distinct={{get_querys_distinct}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"genericquerys",
												":table_name"
											],
											"query": [
												{
													"equals": true,
													"key": "token",
													"value": "{{main_token}}"
												},
												{
													"equals": true,
													"key": "login",
													"value": "{{get_querys_login}}"
												},
												{
													"equals": true,
													"key": "password",
													"value": "{{get_querys_password}}"
												},
												{
													"equals": true,
													"key": "server",
													"value": "{{get_querys_server}}"
												},
												{
													"equals": true,
													"key": "port",
													"value": "{{get_querys_port}}"
												},
												{
													"equals": true,
													"key": "sgbd",
													"value": "{{get_querys_sgbd}}"
												},
												{
													"equals": true,
													"key": "database",
													"value": "{{get_querys_database}}"
												},
												{
													"equals": true,
													"key": "schema",
													"value": "{{get_querys_schema}}"
												},
												{
													"equals": true,
													"key": "encoding",
													"value": "{{get_querys_encoding}}"
												},
												{
													"equals": true,
													"key": "order_by",
													"value": "{{get_querys_order_by}}"
												},
												{
													"equals": true,
													"key": "sort_order",
													"value": "{{get_querys_sort_order}}"
												},
												{
													"equals": true,
													"key": "limit",
													"value": "{{get_querys_limit}}"
												},
												{
													"equals": true,
													"key": "offset",
													"value": "{{get_querys_offset}}"
												},
												{
													"equals": true,
													"key": "attributs",
													"value": "{{get_querys_attributs}}"
												},
												{
													"equals": true,
													"key": "filter",
													"value": "{{get_querys_filter}}"
												},
												{
													"equals": true,
													"key": "distinct",
													"value": "{{get_querys_distinct}}"
												}
											],
											"variable": [
												{
													"key": "table_name",
													"value": "{{get_querys_table_name}}"
												}
											]
										},
										"description": "Request to query a table. There is two ways to use this service: with the token witch will use the current server/port/sgbd, with login/password witch can query distant servers"
									},
									"response": []
								},
								{
									"name": "Get Querys",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"if(pm.response.responseSize === 0){",
													"    tests['No response'] = false;",
													"    return null;",
													"}"
												],
												"id": "086bdc2d-f727-4adf-a602-2c0cb53a66c6",
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/xml, application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/genericquerys/:table_name/columns?token={{main_token}}&login={{get_querys_login}}&password={{get_querys_password}}&server={{get_querys_server}}&port={{get_querys_port}}&sgbd={{get_querys_sgbd}}&database={{get_querys_database}}&schema={{get_querys_schema}}&encoding={{get_querys_encoding}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"genericquerys",
												":table_name",
												"columns"
											],
											"query": [
												{
													"equals": true,
													"key": "token",
													"value": "{{main_token}}"
												},
												{
													"equals": true,
													"key": "login",
													"value": "{{get_querys_login}}"
												},
												{
													"equals": true,
													"key": "password",
													"value": "{{get_querys_password}}"
												},
												{
													"equals": true,
													"key": "server",
													"value": "{{get_querys_server}}"
												},
												{
													"equals": true,
													"key": "port",
													"value": "{{get_querys_port}}"
												},
												{
													"equals": true,
													"key": "sgbd",
													"value": "{{get_querys_sgbd}}"
												},
												{
													"equals": true,
													"key": "database",
													"value": "{{get_querys_database}}"
												},
												{
													"equals": true,
													"key": "schema",
													"value": "{{get_querys_schema}}"
												},
												{
													"equals": true,
													"key": "encoding",
													"value": "{{get_querys_encoding}}"
												}
											],
											"variable": [
												{
													"key": "table_name",
													"value": "{{table_name}}"
												}
											]
										},
										"description": "Request to query. There is two ways to use this service: with the token witch will use the current server/port/sgbd, with login/password witch can query distant servers"
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "50a1ed97-44a1-4fac-b568-3d5c863615ab",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "309f7b3e-d78e-4f5a-8ee7-01f19889cd72",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "80fe1934-e470-453a-ac94-1189916331fc",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"id": "0c0abdf6-b52f-4321-b881-c557c5ff5488",
								"type": "text/javascript"
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Logs",
					"description": "Folder for logs",
					"item": [
						{
							"name": "With rights",
							"description": "",
							"item": [
								{
									"name": "Get logs tree",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/logs?token={{main_token}}&application_name={{application_name}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"logs"
											],
											"query": [
												{
													"equals": true,
													"key": "token",
													"value": "{{main_token}}"
												},
												{
													"equals": true,
													"key": "application_name",
													"value": "{{application_name}}"
												}
											]
										},
										"description": "Request to get the logs tree"
									},
									"response": []
								},
								{
									"name": "delete log files",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/logs?token={{main_token}}&min_days={{min_days}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"logs"
											],
											"query": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"equals": true
												},
												{
													"key": "min_days",
													"value": "{{min_days}}",
													"equals": true
												}
											]
										},
										"description": "Request to delete log files from min_days"
									},
									"response": []
								},
								{
									"name": "Get log file content",
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/logs/:log_directory/file/:file_name?token={{main_token}}&folder={{folder}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"logs",
												":log_directory",
												"file",
												":file_name"
											],
											"query": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"equals": true
												},
												{
													"key": "folder",
													"value": "{{folder}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "log_directory",
													"value": "{{log_directory}}"
												},
												{
													"key": "file_name",
													"value": "{{file_name}}"
												}
											]
										},
										"description": "Request to get the content of a log file"
									},
									"response": []
								},
								{
									"name": "delete log files",
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, application/x-vm-json"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "https://medoc/rest/vitis/logs/:log_directory/file/:file_name?token={{main_token}}&folder={{folder}}",
											"protocol": "https",
											"host": [
												"medoc"
											],
											"path": [
												"rest",
												"vitis",
												"logs",
												":log_directory",
												"file",
												":file_name"
											],
											"query": [
												{
													"key": "token",
													"value": "{{main_token}}",
													"equals": true
												},
												{
													"key": "folder",
													"value": "{{folder}}",
													"equals": true
												}
											],
											"variable": [
												{
													"key": "log_directory",
													"value": "{{log_directory}}"
												},
												{
													"key": "file_name",
													"value": "{{file_name}}"
												}
											]
										},
										"description": "Request to delete log files"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"id": "e7f7a4d5-f39f-4b97-a737-042de2395a11",
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"id": "83f56e75-f6bf-4bbd-b5d0-1bca94cd20f1",
								"type": "text/javascript"
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Update Privilege",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml, application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{host}}/rest/vitis/privileges/:rolname?token={{test_user_token}}&description={{get_privilege_description}}&users={{get_privilege_users}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"rest",
								"vitis",
								"privileges",
								":rolname"
							],
							"query": [
								{
									"key": "token",
									"value": "{{test_user_token}}",
									"equals": true
								},
								{
									"key": "description",
									"value": "{{get_privilege_description}}",
									"equals": true
								},
								{
									"key": "users",
									"value": "{{get_privilege_users}}",
									"equals": true
								}
							],
							"variable": [
								{
									"key": "rolname",
									"value": "{{get_privilege_rolname}}"
								}
							]
						},
						"description": "Request to update Privilege"
					},
					"response": []
				},
				{
					"name": "Update Privilege (without rights)",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/xml, application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "https://{{host}}/rest/vitis/privileges/:rolname?token={{test_user_token}}&description={{get_privilege_description}}&users={{get_privilege_users}}",
							"protocol": "https",
							"host": [
								"{{host}}"
							],
							"path": [
								"rest",
								"vitis",
								"privileges",
								":rolname"
							],
							"query": [
								{
									"key": "token",
									"value": "{{test_user_token}}",
									"equals": true
								},
								{
									"key": "description",
									"value": "{{get_privilege_description}}",
									"equals": true
								},
								{
									"key": "users",
									"value": "{{get_privilege_users}}",
									"equals": true
								}
							],
							"variable": [
								{
									"key": "rolname",
									"value": "{{get_privilege_rolname}}"
								}
							]
						},
						"description": "Request to update Privilege"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "632a9c4e-f152-444b-a1ea-93252a40c619",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "e0f13f96-1690-48cf-b8b6-2ef4a97de154",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}